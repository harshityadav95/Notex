{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Notex For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-notex","text":"For full documentation visit mkdocs.org .","title":"Welcome to Notex"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"404/","text":"Under Process ....","title":"Release Notes"},{"location":"404/#under-process","text":"","title":"Under Process ...."},{"location":"C++/","text":"C++ Standard Wesbite : C++ List of Compiler Link Minigw gcc Clang gcc Compile - Object Code - Linked - Executable auto vs \"functions.h\" are defined by standard C++ org are defined function specific and not standard #include string name; += or + to combine two strings == or != to test two strings String Member Functions length - variable.length(); substr - find","title":"C/C++"},{"location":"C++/#c","text":"Standard Wesbite : C++ List of Compiler Link Minigw gcc Clang gcc Compile - Object Code - Linked - Executable auto vs \"functions.h\" are defined by standard C++ org are defined function specific and not standard #include string name; += or + to combine two strings == or != to test two strings String Member Functions length - variable.length(); substr - find","title":"C++"},{"location":"Javascript-ES6-Notes/","text":"Javascript ES6 Notes: JavaScript Versions: ES6 and Before Take for example pre-ES6 syntax for function expressions: var greeting = function() { console.log('Hello World!'); }; With ES6 arrow functions, we can transform the expression above into: let writingUtensil=tool || 'pen'const greeting = () = console.log('Hello World'); Progate + Codeacademy Lesson 1: Null : This data type represents the intentional absence of a value, and is represented by the keyword null (without quotes). Undefined : This data type is denoted by the keyword undefined (without quotes). It also represents the absence of a value though it has a different use than null . js let price; console.log(price); // Output: undefined Symbol : A newer feature to the language, symbols are unique identifiers, useful in more complex coding. No need to worry about these for now. Object : Collections of related data. The first 1-2 of those types are considered primitive data types . They are the most basic data types in the language. // Prinitng the Hello World console.log( Hello World ); // Output the result of 24 divided by 4 console.log(24/4); //Using the variable let name= Harshit Yadav ; console.log( My Name is +name); //dont use let again name=4; console.log(name); //Short hand works in JS name+=2; console.log(name); //Constants in JS const ne= this is constant ; // Templeate Literals console.log(`My name is ${ne} :) `); // if condition if(name 1) { console.log( check ); console.log(name 1); } const password = kentheninja ; // When the value of password is kentheninja , output Signed in successfully if(password=== kentheninja ) { switch (password){ case kentheninja : console.log( check mate ); break; default: console.log( fail ); break; } console.log( Signed in successfully ); } else { console.log( nope ); } // Short Circuit using and Operator let writingUtensil=tool || 'pen' // Ternary operator let isLocked = false; isLocked ? console.log('You will need a key to open the door.') : console.log('You will not need a key to open the door.'); let favoritePhrase = 'Love That!'; favoritePhrase === 'Love That!' ? console.log('I love that!'): console.log( I don't love that! ); Progate Lesson 2 CodeAcdemy Lesson 1: //calculating the length of the string console.log( hello .length); console.log('hello'.toUpperCase()); // Prints 'HELLO' console.log('Hey'.startsWith('H')); // Prints true console.log(' Remove whitespace '.trim());// Remove the WhiteSpace console.log(Math.random()); // Prints a random number between 0 and 1 console.math(Math.random()*50);//to generate number between 1 to 50 console.log(Math.floor(Math.random() * 50));// Floor the decimal values to whole number Maths In Javascript Documentation Number in Javascript Documentation Variable in JS There were a lot of changes introduced in the ES6 version of JavaScript in 2015. One of the biggest changes was two new keywords, let and const , to create, or declare , variables. Prior to the ES6, programmers could only use the var keyword to declare variables The let keyword signals that the variable can be reassigned a different value. //var myName = 'Arya'; let myName = 'Arya'; console.log(myName); myName is the variable\u2019s name. Capitalizing in this way is a standard convention in JavaScript called camel casing . In camel casing you group words into one, the first word is lowercase, then every word that follows will have its first letter uppercased. (e.g. camelCaseEverything) String Interpolation In the ES6 version of JavaScript, we can insert, or interpolate , variables into strings using template literals const myPet = 'armadillo'; console.log(`I own a pet ${myPet}.`); Typeof Operator let newVariable = 'Playing around with typeof.'; console.log(typeof newVariable); Functions in Javascript One way to create a function is by using a function declaration . Just like how a variable declaration binds a value to a variable name, a function declaration binds a function to a name, or an identifier . function getReminder() { console.log('Water the plants.'); } Default Parameters function makeShoppingList(item1='milk', item2='bread', item3='eggs'){ console.log(`Remember to buy ${item1}`); console.log(`Remember to buy ${item2}`); console.log(`Remember to buy ${item3}`); } Return Function function rectangleArea(width, height) { if (width 0 || height 0) { return 'You need positive integers to calculate area!'; } return width * height; Arrow Functions ES6 introduced arrow function syntax , a shorter way to write functions by using the special \u201cfat arrow\u201d () = notation. const rectangleArea = (width, height) = { let area = width * height; return area; }; Concise Body Arrow Functions const squareNum = num = num * num; Arrays Arrays are JavaScript\u2019s way of making lists. Arrays can store any data types (including strings, numbers, and booleans). Like lists, arrays are ordered, meaning each item has a numbered position let newYearsResolutions = ['Keep a journal', 'Take a falconry class', 'Learn to juggle']; console.log(newYearsResolutions); console.log(newYearsResolutions.length); Variables declared with the const keyword cannot be reassigned. However, elements in an array declared with const remain mutable. Meaning that we can change the contents of a const array, but cannot reassign a new array or a different value ### The .push() .pop()Method .push() can take a single argument or multiple arguments separated by commas Mozilla Documentation Some arrays methods that are available to JavaScript developers include: .join() , .slice() , .splice() , .shift() , .unshift() , and .concat() amongst many others. ```js const itemTracker = ['item 0', 'item 1', 'item 2']; itemTracker.push('item 3', 'item 4'); chores.pop(); console.log(itemTracker); const array1 = [1, 2, 3]; const firstElement = array1.shift(); const animals = ['ant', 'bison', 'camel', 'duck', 'elephant']; console.log(animals.slice(2)); // expected output: Array [\"camel\", \"duck\", \"elephant\"] console.log(animals.slice(2, 4)); ``` Arrays and Functions const concept = ['arrays', 'can', 'be', 'mutated']; function changeArr(arr){ arr[3] = 'MUTATED'; } changeArr(concept); function removeElement(newArr) { newArr.pop(); } removeElement(concept); console.log(concept); Nested Arrays let numberClusters=[[1,2],[3,4],[5,6]]; const target=numberClusters[2][1]; HIGHER-ORDER FUNCTIONS Functions as Data mozilla documentation const announceThatIAmDoingImportantWork = () = { console.log( I\u2019m doing very important work! ); }; const busy = announceThatIAmDoingImportantWork; busy(); // This function call barely takes any space! Functions as Parameters of data in JavaScript, it might not surprise you to learn that we can also pass functions (into other functions) as parameters. A higher-order function is a function that either accepts functions as parameters, returns a function, or both! We call the functions that get passed in as parameters and invoked callback functions because they get called during the execution of the higher-order function. When we pass a function in as an argument to another function, we don\u2019t invoke it. Invoking the function would evaluate to the return value of that function call. With callbacks, we pass in the function itself by typing the function name without the parentheses (that would evaluate to the result of calling the function): const timeFuncRuntime = funcParameter = { let t1 = Date.now(); funcParameter(); let t2 = Date.now(); return t2 - t1; } const addOneToOne = () = 1 + 1; timeFuncRuntime(addOneToOne); We wrote a higher-order function, timeFuncRuntime() . It takes in a function as an argument, saves a starting time, invokes the callback function, records the time after the function was called, and returns the time the function took to run by subtracting the starting time from the ending time. Example : const checkThatTwoPlusTwoEqualsFourAMillionTimes = () = { for(let i = 1; i = 1000000; i++) { if ( (2 + 2) != 4) { console.log('Something has gone very wrong :( '); } } }; const addTwo = num = num + 2; const timeFuncRuntime = funcParameter = { let t1 = Date.now(); funcParameter(); let t2 = Date.now(); return t2 - t1; }; // Write your code below const time2p2 = timeFuncRuntime(checkThatTwoPlusTwoEqualsFourAMillionTimes); const checkConsistentOutput = (func, val) = { let firstTry = func(val); let secondTry = func(val); if (firstTry === secondTry) { return firstTry } else { return 'This function returned inconsistent results' } }; checkConsistentOutput(addTwo, 10); Iterators Mozilla Documentation The .forEach() Method Aptly named, .forEach() will execute the same code for each element of an array. const fruits = ['mango', 'papaya', 'pineapple', 'apple']; fruits.forEach(groceryItem = console.log(fruits)); function printer(arr) { console.log('I want to eat a' + arr); } fruits.forEach(printer); fruits.forEach(fruit = console.log(`I want to eat a ${fruit}.`)) The .map() Method The second iterator we\u2019re going to cover is .map() . When .map() is called on an array, it takes an argument of a callback function and returns a new array! Take a look at an example of calling .map() : const numbers = [1, 2, 3, 4, 5]; const bigNumbers = numbers.map(number = { return number * 10; }); .map() works in a similar manner to .forEach() \u2014 the major difference is that .map() returns a new array. Example const animals = ['Hen', 'elephant', 'llama', 'leopard', 'ostrich', 'Whale', 'octopus', 'rabbit', 'lion', 'dog']; // Create the secretMessage array below const secretMessage=animals.map( world = { return world[0]; } ); The .filter() Method .filter() returns an array of elements after filtering out certain elements from the original array. The callback function for the .filter() method should return true or false depending on the element that is passed to it. The elements that cause the callback function to return true are added to the new array. Take a look at the following example: const words = ['chair', 'music', 'pillow', 'brick', 'pen', 'door']; const shortWords = words.filter(word = { return word.length 6; }); Example : const randomNumbers = [375, 200, 3.14, 7, 13, 852]; // Call .filter() on randomNumbers below const smallNumbers=randomNumbers.filter( digit = { return digit 250; }) console.log(smallNumbers); const favoriteWords = ['nostalgia', 'hyperbole', 'fervent', 'esoteric', 'serene']; // Call .filter() on favoriteWords below const longFavoriteWords=favoriteWords.filter( word = { return word.length 7; }); console.log(longFavoriteWords); The .findIndex() Method We sometimes want to find the location of an element in an array. That\u2019s where the .findIndex() method comes in! Calling .findIndex() on an array will return the index of the first element that evaluates to true in the callback function const jumbledNums = [123, 25, 78, 5, 9]; const lessThanTen = jumbledNums.findIndex(num = { return num 10; }); Example const animals = ['hippo', 'tiger', 'lion', 'seal', 'cheetah', 'monkey', 'salamander', 'elephant']; const foundAnimal=animals.findIndex( word = { return word==='elephant'; }); console.log(foundAnimal); const startsWithS=animals.findIndex( word = { return word[0]==='s'; } ); console.log(startsWithS); The .reduce() Method Another widely used iteration method is .reduce() . The .reduce() method returns a single value after iterating through the elements of an array, thereby reducing the array. const numbers = [1, 2, 4, 10]; const summedNums = numbers.reduce((accumulator, currentValue) = { return accumulator + currentValue }) console.log(summedNums) // Output: 17 The .reduce() method can also take an optional second parameter to set an initial value for accumulator (remember, the first argument is the callback function!). For instance: const numbers = [1, 2, 4, 10]; const summedNums = numbers.reduce((accumulator, currentValue) = { return accumulator + currentValue }, 100) // - Second argument for .reduce() console.log(summedNums); // Output: 117 Example : const newNumbers = [1, 3, 5, 7]; const newSum=newNumbers.reduce(function (accumulator,currentValue) { console.log('The value of accumulator: ', accumulator); console.log('The value of currentValue: ', currentValue); return accumulator + currentValue; },10); console.log(newSum); More Example : const words = ['unique', 'uncanny', 'pique', 'oxymoron', 'guise']; console.log(words.some(word = { return word.length 6; })); // Use filter to create a new array const interestingWords = words.filter((word) = {return word.length 5}); console.log(interestingWords.every((word) = {return word.length 5})); Revision : const cities = ['Orlando', 'Dubai', 'Edinburgh', 'Chennai', 'Accra', 'Denver', 'Eskisehir', 'Medellin', 'Yokohama']; const nums = [1, 50, 75, 200, 350, 525, 1000]; // Choose a method that will return undefined cities.forEach(city = console.log('Have you visited ' + city + '?')); // Choose a method that will return a new array const longCities = cities.filter(city = city.length 7); // Choose a method that will return a single value const word = cities.reduce((acc, currVal) = { return acc + currVal[0] }, C ); console.log(word) // Choose a method that will return a new array const smallerNums = nums.map(num = num - 5); // Choose a method that will return a boolean value nums.some(num = num 0); Introduction to Objects Creating Object Literals Objects can be assigned to variables just like any JavaScript type. We use curly braces, {} , to designate an object literal : let spaceship = {}; // spaceship is an empty object We fill an object with unordered data. This data is organized into key-value pairs . // An object literal with two key-value pairs let spaceship = { 'Fuel Type': 'diesel', color: 'silver' }; Accessing Properties let spaceship = { homePlanet: 'Earth', color: 'silver' }; spaceship.homePlanet; // Returns 'Earth', spaceship.color; // Returns 'silver', If we try to access a property that does not exist on that object, undefined will be returned. spaceship.favoriteIcecream; // Returns undefined Using Bracket [ ] notation The second way to access a key\u2019s value is by using bracket notation, [ ] . let spaceship = { 'Fuel Type': 'Turbo Fuel', 'Active Duty': true, homePlanet: 'Earth', numCrew: 5 }; spaceship['Active Duty']; // Returns true spaceship['Fuel Type']; // Returns 'Turbo Fuel' spaceship['numCrew']; // Returns 5 spaceship['!!!!!!!!!!!!!!!']; // Returns undefined Example : let spaceship = { 'Fuel Type' : 'Turbo Fuel', 'Active Mission' : true, homePlanet : 'Earth', numCrew: 5 }; let propName = 'Active Mission'; // Write your code below let isActive=spaceship['Active Mission']; console.log(spaceship[propName]); Property Assignment It\u2019s important to know that although we can\u2019t reassign an object declared with const , we can still mutate it, meaning we can add new properties and change the properties that are there. const spaceship = {type: 'shuttle'}; spaceship = {type: 'alien'}; // TypeError: Assignment to constant variable. spaceship.type = 'alien'; // Changes the value of the type property spaceship.speed = 'Mach 5'; // Creates a new key of 'speed' with a value of 'Mach 5' You can delete a property from an object with the delete operator. const spaceship = { 'Fuel Type': 'Turbo Fuel', homePlanet: 'Earth', mission: 'Explore the universe' }; delete spaceship.mission; // Removes the mission property Methods When the data stored on an object is a function we call that a method . A property is what an object has, while a method is what an object does. let retreatMessage = 'We no longer wish to conquer your planet. It is full of dogs, which we do not care for.'; // Write your code below let alienShip={ retreat : function () { console.log(retreatMessage); }, takeOff : function() { console.log('Spim... Borp... Glix... Blastoff!'); } } alienShip.retreat(); alienShip.takeOff(); Nested Objects spaceship.nanoelectronics['back-up'].battery; // Returns 'Lithium' Pass By Reference Objects are passed by reference . This means when we pass a variable assigned to an object into a function as an argument, the computer interprets the parameter name as pointing to the space in memory holding that object. As a result, functions which change object properties actually mutate the object permanently (even when the object is assigned to a const variable) const spaceship = { homePlanet : 'Earth', color : 'silver' }; let paintIt = obj = { obj.color = 'glorious gold' }; paintIt(spaceship); spaceship.color // Returns 'glorious gold' Example : let spaceship = { 'Fuel Type' : 'Turbo Fuel', homePlanet : 'Earth' }; greenEnergy(obj) { obj['Fuel Type'] ='avocado oil'; } function remotelyDisable(obj) { obj.disabled=true; } greenEnergy(spaceship); remotelyDisable(spaceship); console.log(spaceship); Looping Through Objects for...in will execute a given block of code for each property in an object. let spaceship = { crew: { captain: { name: 'Lily', degree: 'Computer Engineering', cheerTeam() { console.log('You got this!') } }, 'chief officer': { name: 'Dan', degree: 'Aerospace Engineering', agree() { console.log('I agree, captain!') } }, medic: { name: 'Clementine', degree: 'Physics', announce() { console.log(`Jets on!`) } }, translator: { name: 'Shauna', degree: 'Conservation Science', powerFuel() { console.log('The tank is full!') } } } }; // Write your code below for (let crewMember in spaceship.crew) { console.log(`${crewMember}: ${spaceship.crew[crewMember].name}`) }; for (let crewMember in spaceship.crew) { console.log(`${spaceship.crew[crewMember].name}: ${spaceship.crew[crewMember].degree}`) }; Advanced Objects Introduction The this Keyword Objects are collections of related data and functionality. We store that functionality in methods on our objects: const goat = { dietType: 'herbivore', makeSound() { console.log('baaa'); } }; In our goat object we have a .makeSound() method. We can invoke the .makeSound() method on goat . goat.makeSound(); // Prints baaa ice, we have a goat object that can print baaa to the console. Everything seems to be working fine. What if we wanted to add a new method to our goat object called .diet() that prints the goat \u2018s dietType ? const goat = { dietType: 'herbivore', makeSound() { console.log('baaa'); }, diet() { console.log(dietType); } }; goat.diet(); // Output will be ReferenceError: dietType is not defined That\u2019s strange, why is dietType not defined even though it\u2019s a property of goat ? That\u2019s because inside the scope of the .diet() method, we don\u2019t automatically have access to other properties of the goat object. Here\u2019s where the this keyword comes to the rescue. If we change the .diet() method to use the this , the .diet() works! const goat = { dietType: 'herbivore', makeSound() { console.log('baaa'); }, diet() { console.log(this.dietType); } }; goat.diet(); // Output: herbivore The this keyword references the calling object which provides access to the calling object\u2019s properties. In the example above, the calling object is goat and by using this we\u2019re accessing the goat object itself, and then the dietType property of goat by using property dot notation. Example : const robot = { model:'1E78V2', energyLevel:100, provideInfo(){ return(`I am ${this.model} and my current energy level is ${this.energyLevel}`); } }; console.log(robot.provideInfo()); Arrow Functions and this We saw in the previous exercise that for a method, the calling object is the object the method belongs to. If we use the this keyword in a method then the value of this is the calling object. However, it becomes a bit more complicated when we start using arrow functions for methods. Take a look at the example below: const goat = { dietType: 'herbivore', makeSound() { console.log('baaa'); }, diet: () = { console.log(this.dietType); } }; goat.diet(); // Prints undefined In the comment, you can see that goat.diet() would log undefined . So what happened? Notice that in the .diet() is defined using an arrow function. Arrow functions inherently bind , or tie, an already defined this value to the function itself that is NOT the calling object. In the code snippet above, the value of this is the global object , or an object that exists in the global scope, which doesn\u2019t have a dietType property and therefore returns undefined . To read more about either arrow functions or the global object check out the MDN documentation of the global object and arrow functions . Example : This would work const robot = { energyLevel: 100, checkEnergy() { console.log(`Energy is currently at ${this.energyLevel}%.`) } } robot.checkEnergy(); but this wont work : const robot = { energyLevel: 100, checkEnergy: () = { console.log(`Energy is currently at ${this.energyLevel}%.`) } } robot.checkEnergy(); Privacy Accessing and updating properties is fundamental in working with objects. However, there are cases in which we don\u2019t want other code simply accessing and updating an object\u2019s properties. When discussing privacy in objects, we define it as the idea that only certain properties should be mutable or able to change in value. Certain languages have privacy built-in for objects, but JavaScript does not have this feature. Rather, JavaScript developers follow naming conventions that signal to other developers how to interact with a property. One common convention is to place an underscore _ before the name of a property to mean that the property should not be altered. Here\u2019s an example of using _ to prepend a property. const bankAccount = { _amount: 1000 } In the example above, the _amount is not intended to be directly manipulated Getters Getters are methods that get and return the internal properties of an object. But they can do more than just retrieve the value of a property onst person = { _firstName: 'John', _lastName: 'Doe', get fullName() { if (this._firstName this._lastName){ return `${this._firstName} ${this._lastName}`; } else { return 'Missing a first name or a last name.'; } } } // To call the getter method: person.fullName; // 'John Doe' Setters Along with getter methods, we can also create setter methods which reassign values of existing properties within an object. Let\u2019s see an example of a setter method: const person = { _age: 37, set age(newAge){ if (typeof newAge === 'number'){ this._age = newAge; } else { console.log('You must assign a number to age'); } } }; Example : const robot = { _model: '1E78V2', _energyLevel: 100, _numOfSensors: 15, get numOfSensors(){ if(typeof this._numOfSensors === 'number'){ return this._numOfSensors; } else { return 'Sensors are currently down.' } }, set numOfSensors(num) { if (typeof num === 'number' num = 0){ this._numOfSensors = num; } else { console.log(`Pass in a number that is greater than or equal to 0`); } } }; robot.numOfSensors=100; console.log(robot.numOfSensors); Factory Functions So far we\u2019ve been creating objects individually, but there are times where we want to create many instances of an object quickly. Here\u2019s where factory functions come in A factory function is a function that returns an object and can be reused to make multiple object instances. Factory functions can also have parameters allowing us to customize the object that gets returned. Let\u2019s say we wanted to create an object to represent monsters in JavaScript. There are many different types of monsters and we could go about making each monster individually but we can also use a factory function to make our lives easier. To achieve this diabolical plan of creating multiple monsters objects, we can use a factory function that has parameters: js const monsterFactory = (name, age, energySource, catchPhrase) = { return { name: name, age: age, energySource: energySource, scare() { console.log(catchPhrase); } } }; To make an object that represents a specific monster like a ghost, we can call monsterFactory with the necessary arguments and assign the return value to a variable: js const ghost = monsterFactory('Ghouly', 251, 'ectoplasm', 'BOO!'); ghost.scare(); // 'BOO!' ## Property Value Shorthand ES6 introduced some new shortcuts for assigning properties to variables known as destructuring . In the previous exercise, we created a factory function that helped us create objects. We had to assign each property a key and value even though the key name was the same as the parameter name we assigned to it. To remind ourselves, here\u2019s a truncated version of the factory function: js const monsterFactory = (name, age) = { return { name: name, age: age } }; But we can use a destructuring technique, called property value shorthand , to save ourselves some keystrokes. js const monsterFactory = (name, age) = { return { name, age } }; ### Destructured Assignment We often want to extract key-value pairs from objects and save them as variables. js const vampire = { name: 'Dracula', residence: 'Transylvania', preferences: { day: 'stay inside', night: 'satisfy appetite' } }; If we wanted to extract the residence property as a variable, js const residence = vampire.residence; we can also take advantage of a destructuring technique called destructured assignment to save ourselves some keystrokes. In destructured assignment we create a variable with the name of an object\u2019s key that is wrapped in curly braces { } and assign to it the object. Take a look at the example below: js const { residence } = vampire; console.log(residence); // Prints 'Transylvania' Look back at the vampire object\u2019s properties in the first code example. Then, in the example above, we declare a new variable residence that extracts the value of the residence property of vampire . When we log the value of residence to the console, 'Transylvania' is printed. const { day } = vampire.preferences; console.log(day); // Prints 'stay inside' Example : const robot = { model: '1E78V2', energyLevel: 100, functionality: { beep() { console.log('Beep Boop'); }, fireLaser() { console.log('Pew Pew'); }, } }; const {functionality }=robot; functionality.beep(); Built-in Object Methods For example, we have access to object instance methods like: .hasOwnProperty() , .valueOf() , and many more! Practice your documentation reading skills and check out: MDN\u2019s object instance documentation . There are also useful Object class methods such as Object.assign() , Object.entries() , and Object.keys() just to name a few. For a comprehensive list, browse: MDN\u2019s object instance documentation . Find out what we have to include by reading MDN\u2019s Object.keys() documentation . To find how to use Object.entries() , read the documentation at MDN . we should check Object.assign() documentation at MDN . Example : const robot = { model: 'SAL-1000', mobile: true, sentient: false, armor: 'Steel-plated', energyLevel: 75 }; // What is missing in the following method call? const robotKeys = Object.keys(robot); console.log(robotKeys); // Declare robotEntries below this line: const robotEntries=Object.entries(robot); console.log(robotEntries); // Declare newRobot below this line: const newRobot=Object.assign({laserBlaster: true, voiceRecognition: true}, robot); console.log(newRobot); Introduction to Classes JavaScript is an object-oriented programming (OOP) language we can use to model real-world items. In this lesson, you will learn how to make classes . Take, for example, an object representing a dog named halley . This dog\u2019s name (a key) is \"Halley\" (a value) and has an age (another key) of 3 (another value). We create the halley object below: let halley = { _name: 'Halley', _behavior: 0, get name() { return this._name; }, get behavior() { return this._behavior; }, incrementBehavior() { this._behavior++; } } class instantiation, method const halley = new Dog('Halley'); console.log(halley.name); // Print name value to console console.log(halley.behavior); // Print behavior value to console halley.incrementBehavior(); // Add one to behavior console.log(halley.name); // Print name value to console console.log(halley.behavior); // Print behavior value to console Constructor Although you may see similarities between class and object syntax, there is one important method that sets them apart. It\u2019s called the constructor method. JavaScript calls the constructor() method every time it creates a new instance of a class. class Dog { constructor(name) { this.name = name; this.behavior = 0; } } Instance n instance is an object that contains the property names and methods of a class, but with unique property values. class Surgeon { constructor(name, department) { this.name = name; this.department = department; } } const surgeonCurry=new Surgeon('Curry','Cardiovascular'); const surgeonDurant=new Surgeon('Durant','Orthopedics'); Methods Example class Surgeon { constructor(name, department) { this._name = name; this._department = department; this._remainingVacationDays = 20; } get name() { return this._name; } get department() { return this._department; } get remainingVacationDays() { return this._remainingVacationDays; takeVacationDays(daysOff) { this._remainingVacationDays -= daysOff; } } const surgeonCurry = new Surgeon('Curry', 'Cardiovascular'); const surgeonDurant = new Surgeon('Durant', 'Orthopedics'); Method Calls Example : class Surgeon { constructor(name, department) { this._name = name; this._department = department; this._remainingVacationDays = 20; } get name() { return this._name; } get department() { return this._department; } get remainingVacationDays() { return this._remainingVacationDays; } takeVacationDays(daysOff) { this._remainingVacationDays -= daysOff; } } const surgeonCurry = new Surgeon('Curry', 'Cardiovascular'); const surgeonDurant = new Surgeon('Durant', 'Orthopedics'); console.log(surgeonCurry.name); surgeonCurry.takeVacationDays(3); console.log(surgeonCurry.remainingVacationDays); Inheritance I We\u2019ve abstracted the shared properties and methods of our Cat and Dog classes into a parent class called Animal (See below) class Animal { constructor(name) { this._name = name; this._behavior = 0; } get name() { return this._name; } get behavior() { return this._behavior; } incrementBehavior() { this._behavior++; } } Now that we have these shared properties and methods in the parent Animal class, we can extend them to the subclass, Cat class Cat extends Animal { constructor(name, usesLitter) { super(name); this._usesLitter = usesLitter; } } The super keyword calls the constructor of the parent class. In this case, super(name) passes the name argument of the Cat class to the constructor of the Animal class. When the Animal constructor runs, it sets this._name = name; for new Cat instances Example : class HospitalEmployee { constructor(name) { this._name = name; this._remainingVacationDays = 20; } get name() { return this._name; } get remainingVacationDays() { return this._remainingVacationDays; } takeVacationDays(daysOff) { this._remainingVacationDays -= daysOff; } } class Nurse extends HospitalEmployee { constructor(name, certifications) { super(name); this._certifications = certifications; } get certifications() { return this._certifications; } addCertification(newCertification) { this._certifications.push(newCertification); } } const nurseOlynyk = new Nurse('Olynyk', ['Trauma','Pediatrics']); nurseOlynyk.takeVacationDays(5); console.log(nurseOlynyk.remainingVacationDays); nurseOlynyk.addCertification('Genetics'); console.log(nurseOlynyk.certifications); When we call extends in a class declaration, all of the parent methods are available to the child class. Static Methods Sometimes you will want a class to have methods that aren\u2019t available in individual instances, but that you can call directly from the class. class Animal { constructor(name) { this._name = name; this._behavior = 0; } static generateName() { const names = ['Angel', 'Spike', 'Buffy', 'Willow', 'Tara']; const randomNumber = Math.floor(Math.random()*5); return names[randomNumber]; } } // static generatePassword() { return (Math.floor(Math.random() * 10000)); } BROWSER COMPATIBILITY AND TRANSPILATION caniuse.com \u2014 A website that provides data on web browser compatibility for HTML, CSS, and JavaScript features. You will learn how to use it to look up ES6 feature support. Babel \u2014 A Javascript library that you can use to convert new, unsupported JavaScript (ES6), into an older version (ES5) that is recognized by most modern browsers. Transpilation With Babel Although manual conversion only took you a few minutes, it is unsustainable as the size of the JavaScript file increases. Because ES6 is predictably backwards compatible, a collection of JavaScript programmers developed a JavaScript library called Babel that transpiles ES6 JavaScript to ES5. Transpilation is the process of converting one programming language to another transpile ES6 code to ES5 In the instructions below, you will pass JavaScript ES6 code to Babel, which will transpile it to ES5 and write it to a file in the lib directory. npm install babel-cli npm install babel-preset-env You can view the ES5 code in ./lib/main.js . You may need to refresh to see the newly created lib directory. npm init In the next five exercises you will learn how to setup a JavaScript project that transpiles code when you run npm run build from the root directory of a JavaScript project. The first step is to place your ES6 JavaScript file in a directory called src . From your root directory, the path to the ES6 file is ./src/main.js project |_ src |___ main.js Before we install Babel, we need to setup our project to use the node package manager (npm) . Developers use npm to access and manage Node packages. Node packages are directories that contain JavaScript code written by other developers. You can use these packages to reduce duplication of work and avoid bugs. Before we can add Babel to our project directory, we need to run npm init . The npm init command creates a package.json file in the root directory. Metadata \u2014 This includes a project title, description, authors, and more. A list of node packages required for the project \u2014 If another developer wants to run your project, npm looks inside package.json and downloads the packages in this list. Key-value pairs for command line scripts \u2014 You can use npm to run these shorthand scripts to perform some process. In a later exercise, we will add a script that runs Babel and transpiles ES6 to ES5. If you have Node installed on your computer, you can create a package.json file by typing npm init into the terminal. The terminal prompts you to fill in fields for the project\u2019s metadata (name, description, etc.) You are not required to answer the prompts, though we recommend at minimum, you add your own title and description. If you don\u2019t want to fill in a field, you can press enter. npm will leave fill these fields with default values or leave them empty when it creates the package.json file. After you run npm init your directory structure will contain the following files and folders: project |_ src |___ main.js |_ package.json npm adds the package.json file to the same level as the src directory. The babel-cli package includes command line Babel tools, and the babel-preset-env package has the code that maps any JavaScript feature, ES6 and above (ES6+), to ES5. $ npm install babel-cli -D $ npm install babel-preset-env -D The -D flag instructs npm to add each package to a property called devDependencies in package.json . Once the project\u2019s dependencies are listed in devDependencies , other developers can run your project without installing each package separately. Instead, they can simply run npm install \u2014 it instructs npm to look inside package.json and download all of the packages listed in devDependencies . Once you npm install packages, you can find the Babel packages and all their dependencies in the node_modules folder. The new directory structure contains the following: project |_ node_modules |___ .bin |___ ... |_ src |___ main.js |_ package.json .babelrc Now that you\u2019ve downloaded the Babel packages, you need to specify the version of the source JavaScript code. You can specify the initial JavaScript version inside of a file named .babelrc . In your root directory, you can run touch .babelrc to create this file. Your project directory contains the following folders and files: project |_ node_modules |___ .bin |___ ... |_ src |___ main.js |_ .babelrc |_ package.json Inside .babelrc you need to define the preset for your source JavaScript file. The preset specifies the version of your initial JavaScript file. Usually, you want to transpile JavaScript code from versions ES6 and later (ES6+) to ES5. From this point on, we will refer to our source code as ES6+, because Ecma introduces new syntax with each new version of JavaScript. To specify that we are transpiling code from an ES6+ source, we have to add the following JavaScript object into .babelrc : { presets : [ env ] } When you run Babel, it looks in .babelrc to determine the version of the initial JavaScript file. In this case, [\"env\"] instructs Babel to transpile any code from versions ES6 and later. There\u2019s one last step before we can transpile our code. We need to specify a script in package.json that initiates the ES6+ to ES5 transpilation. Inside of the package.json file, there is a property named \"scripts\" that holds an object for specifying command line shortcuts. It looks like this: ... scripts : { test : echo \\ Error: no test specified\\ exit 1 }, ... In the code above, the \"scripts\" property contains an object with one property called \"test\" . Below the \"test\" property, we will add a script that runs Babel like this: ... scripts : { test : echo \\ Error: no test specified\\ exit 1 , build : babel src -d lib } In the \"scripts\" object above, we add a property called \"build\" . The property\u2019s value, \"babel src -d lib\" , is a command line method that transpiles ES6+ code to ES5. Let\u2019s consider each argument in the method call: babel \u2014 The Babel command call responsible for transpiling code. src \u2014 Instructs Babel to transpile all JavaScript code inside the src directory. -d \u2014 Instructs Babel to write the transpiled code to a directory. lib \u2014 Babel writes the transpiled code to a directory called lib . In the next exercise, we\u2019ll run the babel src -d lib method to transpile our ES6+ code. { name : learning-babel , version : 1.0.0 , description : Use Babel to transpile JavaScript ES6 to ES5 , main : index.js , scripts : { test : echo \\ Error: no test specified\\ exit 1 }, author : , license : ISC , devDependencies : { babel-cli : ^6.26.0 , babel-preset-env : ^1.7.0 } build : babel src -d lib } Build We\u2019re ready to transpile our code! In the last exercise, we wrote the following script in package.json : build : babel src -d lib Now, we need to call \"build\" from the command line to transpile and write ES5 code to a directory called lib . From the command line, we type: npm run build The command above runs the build script in package.json . Babel writes the ES5 code to a file named main.js (it\u2019s always the same name as the original file), inside of a folder called lib . The resulting directory structure is: project |_ lib |___ main.js |_ node_modules |___ .bin |___ ... |_ src |___ main.js |_ .babelrc |_ package.json Notice, the directory contains a new folder named lib , with one file, called main.js . The npm run build command will transpile all JavaScript files inside of the src folder. This is helpful as you build larger JavaScript projects \u2014 regardless of the number of JavaScript files, you only need to run one command ( npm run build ) to transpile all of your code. INTERMEDIATE JAVASCRIPT MODULES module.exports We can get started with modules by defining a module in one file and making the module available for use in another file with Node.js module.exports syntax. Every JavaScript file run in Node has a local module object with an exports property used to define what should be exported from the file let Menu = {}; Menu.specialty = Roasted Beet Burger with Mint Sauce ; module.exports = Menu; Let\u2019s consider what this code means. let Menu = {}; creates the object that represents the module Menu . The statement contains an uppercase variable named Menu which is set equal to an empty object. Menu.specialty is defined as a property of the Menu module. We add data to the Menu object by setting properties on that object and giving the properties a value. \"Roasted Beet Burger with Mint Sauce\"; is the value stored in the Menu.specialty property. module.exports = Menu; exports the Menu object as a module. module is a variable that represents the module, and exports exposes the module as an object. The pattern we use to export modules is thus: Create an object to represent the module. Add properties or methods to the module object. Export the module with module.exports . require() To make use of the exported module and the behavior we define within it, we import the module into another file. In Node.js, use the require() function to import modules. For instance, say we want the module to control the menu\u2019s data and behavior, and we want a separate file to handle placing an order. We would create a separate file order.js and import the Menu module from menu.js to order.js using require() . require() takes a file path argument pointing to the original module file. In order.js we would write: const Menu = require('./menu.js'); function placeOrder() { console.log('My order is: ' + Menu.specialty); } placeOrder(); We can also wrap any collection of data and functions in an object, and export the object using module.exports . In menu.js , we could write: module.exports = { specialty: Roasted Beet Burger with Mint Sauce , getSpecialty: function() { return this.specialty; } }; Export default Node.js supports require() / module.exports , but as of ES6, JavaScript supports a new more readable and flexible syntax for exporting modules. These are usually broken down into one of two techniques, default export and named exports . We\u2019ll begin with the first syntax, default export. The default export syntax works similarly to the module.exports syntax, allowing us to export one module per file. let Menu = {}; export default Menu; export default uses the JavaScript export statement to export JavaScript objects, functions, and primitive data types. Menu refers to the name of the Menu object, the object that we are setting the properties on within our modules. When using ES6 syntax, we use export default in place of module.exports . Node.js doesn\u2019t support export default by default, so module.exports is usually used for Node.js development and ES6 syntax is used for front-end development. As with most ES6 features, it is common to transpile code since ES6 is not supported by all browsers . let Airplane = {}; Airplane.availableAirplanes = [ { name: 'AeroJet', fuelCapacity: 800 }, {name: 'SkyJet', fuelCapacity: 500 } ]; export default Airplane; Import ES6 module syntax also introduces the import keyword for importing objects. In our order.js example, we import an object like this import Menu from './menu'; Within the body of the displayFuelCapacity function, use forEach() to iterate over the Airplane.availableAirplanes array. The forEach() should take an anonymous function as a parameter. We\u2019ll add more in the next step. Pass the anonymous function you created in the last step a parameter of element . import Airplane from './airplane'; function displayFuelCapacity() { Airplane.availableAirplanes.forEach(function(element) { console.log('Fuel Capacity of ' + element.name + ': ' + element.fuelCapacity); }); } displayFuelCapacity(); Named Exports ES6 introduced a second common approach to export modules. In addition to export default , named exports allow us to export data through the use of variables. let specialty = ''; function isVegetarian() { }; function isLowSodium() { }; export { specialty, isVegetarian }; Example let availableAirplanes = [{ name: 'AeroJet', fuelCapacity: 800, availableStaff: ['pilots', 'flightAttendants', 'engineers', 'medicalAssistance', 'sensorOperators'], }, {name: 'SkyJet', fuelCapacity: 500, availableStaff: ['pilots', 'flightAttendants'] }]; let flightRequirements = { requiredStaff: 4, }; function meetsStaffRequirements(availableStaff, requiredStaff) { if (availableStaff.length = requiredStaff) { return true; } else { return false; } } export { availableAirplanes, flightRequirements, meetsStaffRequirements}; Named Imports To import objects stored in a variable, we use the import keyword and include the variables in a set of {} . import { specialty, isVegetarian } from './menu'; console.log(specialty); import {availableAirplanes, flightRequirements, meetsStaffRequirements} from './airplane'; function displayFuelCapacity() { } function displayStaffStatus() { availableAirplanes.forEach(function(element) { console.log(element.name + ' meets staff requirements: ' + meetsStaffRequirements(element.availableStaff, flightRequirements.requiredStaff) ); }); } displayStaffStatus(); Export Named Exports Named exports are also distinct in that they can be exported as soon as they are declared, by placing the keyword export in front of variable declarations. export let specialty = ''; export function isVegetarian() { }; function isLowSodium() { }; Example : export let availableAirplanes = [ {name: 'AeroJet', fuelCapacity: 800, availableStaff: ['pilots', 'flightAttendants', 'engineers', 'medicalAssistance', 'sensorOperators'], maxSpeed: 1200, minSpeed: 300 }, {name: 'SkyJet', fuelCapacity: 500, availableStaff: ['pilots', 'flightAttendants'], maxSpeed: 800, minSpeed: 200 } ]; export let flightRequirements = { requiredStaff: 4, requiredSpeedRange: 700 }; export function meetsSpeedRangeRequirements(maxSpeed, minSpeed, requiredSpeedRange) { let range = maxSpeed - minSpeed; if (range requiredSpeedRange) { return true; } else { return false; } }; export function meetsStaffRequirements(availableStaff, requiredStaff) { if (availableStaff.length = requiredStaff) { return true; } else { return false; } } Import Named Imports To import variables that are declared, we simply use the original syntax that describes the variable name. In other words, exporting upon declaration does not have an impact on how we import the variables. import { specialty, isVegetarian } from 'menu'; Export as Named exports also conveniently offer a way to change the name of variables when we export or import them. We can do this with the as keyword. let specialty = ''; let isVegetarian = function() { }; let isLowSodium = function() { }; export { specialty as chefsSpecial, isVegetarian as isVeg, isLowSodium }; Import as To import named export aliases with the as keyword, we add the aliased variable in our import statement. import { chefsSpecial, isVeg } from './menu'; In orders.js We import chefsSpecial and isVeg from the Menu object. Here, note that we have an option to alias an object that was not previously aliased when exported. For example, the isLowSodium object that we exported could be aliased with the as keyword when imported: import {isLowSodium as saltFree} from 'Menu'; Another way of using aliases is to import the entire module as an alias: import * as Carte from './menu'; Carte.chefsSpecial; Carte.isVeg(); Carte.isLowSodium(); Combining Export Statements We can also use named exports and default exports together. In menu.js : let specialty = ''; function isVegetarian() { }; function isLowSodium() { }; function isGlutenFree() { }; export { specialty as chefsSpecial, isVegetarian as isVeg }; export default isGlutenFree; Combining Import Statements We can import the collection of objects and functions with the same data. We can use an import keyword to import both types of variables as such: import { specialty, isVegetarian, isLowSodium } from './menu'; import GlutenFree from './menu'; What is a Promise? Promises are objects that represent the eventual outcome of an asynchronous operation. A Promise object can be in one of three states: Pending**: The initial state\u2014 the operation has not completed yet. Fulfilled : The operation has completed successfully and the promise now has a resolved value . For example, a request\u2019s promise might resolve with a JSON object as its value. Rejected : The operation has failed and the promise has a reason for the failure. This reason is usually an Error of some kind. Constructing a Promise Object Let\u2019s construct a promise! To create a new Promise object, we use the new keyword and the Promise constructor method: const executorFunction = (resolve, reject) = { }; const myFirstPromise = new Promise(executorFunction); The executor function has two function parameters, usually referred to as the resolve() and reject() functions. The resolve() and reject() functions aren\u2019t defined by the programmer. When the Promise constructor runs, JavaScript will pass its own resolve() and reject() functions into the executor function. resolve is a function with one argument. Under the hood, if invoked, resolve() will change the promise\u2019s status from pending to fulfilled , and the promise\u2019s resolved value will be set to the argument passed into resolve() . reject is a function that takes a reason or error as an argument. Under the hood, if invoked, reject() will change the promise\u2019s status from pending to rejected , and the promise\u2019s rejection reason will be set to the argument passed into reject() . Let\u2019s look at an example executor function in a Promise constructor: const executorFunction = (resolve, reject) = { if (someCondition) { resolve('I resolved!'); } else { reject('I rejected!'); } } const myFirstPromise = new Promise(executorFunction); Example : const inventory = { sunglasses: 1900, pants: 1088, bags: 1344 }; // Write your code below: const myExecutor=(resolve,reject)= { if(inventory.sunglasses 0) { resolve('Sunglasses order processed.'); } else { reject('That item is sold out.'); } }; function orderSunglasses() { return (new Promise(myExecutor)); } const orderPromise=orderSunglasses(); console.log(orderPromise); The Node setTimeout() Function Rather than constructing promises, you\u2019ll be handling Promise objects returned to you as the result of an asynchronous operation. These promises will start off pending but settle eventually. To accomplish this, we\u2019ll be using setTimeout() . setTimeout() is a Node API (a comparable API is provided by web browsers) that uses callback functions to schedule tasks to be performed after a delay. setTimeout() has two parameters: a callback function and a delay in milliseconds. const delayedHello = () = { console.log('Hi! This is an asynchronous greeting!'); }; setTimeout(delayedHello, 2000); Here, we invoke setTimeout() with the callback function delayedHello() and 2000 . In at least two seconds delayedHello() will be invoked. But why is it \u201cat least\u201d two seconds and not exactly two seconds? This delay is performed asynchronously\u2014the rest of our program won\u2019t stop executing during the delay. Asynchronous JavaScript uses something called the event-loop . After two seconds, delayedHello() is added to a line of code waiting to be run. Before it can run, any synchronous code from the program will run. Next, any code in front of it in the line will run. This means it might be more than two seconds before delayedHello() is actually executed. Let\u2019s look at how we\u2019ll be using setTimeout() to construct asynchronous promises: const returnPromiseFunction = () = { return new Promise((resolve, reject) = { setTimeout(( ) = {resolve('I resolved!')}, 1000); }); }; const prom = returnPromiseFunction(); In the example code, we invoked returnPromiseFunction() which returned a promise. We assigned that promise to the variable prom . Similar to the asynchronous promises you may encounter in production, prom will initially have a status of pending. Consuming Promises The initial state of an asynchronous promise is pending but we have a guarantee that it will settle. How do we tell the computer what should happen then? Promise objects come with an aptly named .then() method. It allows us to say, \u201cI have a promise, when it settles, then here\u2019s what I want to happen\u2026 .then() is a higher-order function\u2014 it takes two callback functions as arguments. We refer to these callbacks as handlers . The onFulfilled and onRejected Functions To handle a \u201csuccessful\u201d promise, or a promise that resolved, we invoke .then() on the promise, passing in a success handler callback function: const prom = new Promise((resolve, reject) = { resolve('Yay!'); }); const handleSuccess = (resolvedValue) = { console.log(resolvedValue); }; prom.then(handleSuccess); // Prints: 'Yay!' With typical promise consumption, we won\u2019t know whether a promise will resolve or reject, so we\u2019ll need to provide the logic for either case. We can pass both an onFulfilled and onRejected callback to .then() . let prom = new Promise((resolve, reject) = { let num = Math.random(); if (num .5 ){ resolve('Yay!'); } else { reject('Ohhh noooo!'); } }); const handleSuccess = (resolvedValue) = { console.log(resolvedValue); }; const handleFailure = (rejectionReason) = { console.log(rejectionReason); }; prom.then(handleSuccess, handleFailure); checkInventory(order).then(handleSuccess,handleFailure); Using catch() with Promises One way to write cleaner code is to follow a principle called separation of concerns . Separation of concerns means organizing code into distinct sections each handling a specific task. It enables us to quickly navigate our code and know where to look if something isn\u2019t working. prom .then((resolvedValue) = { console.log(resolvedValue); }) .then(null, (rejectionReason) = { console.log(rejectionReason); }); Since JavaScript doesn\u2019t mind whitespace, we follow a common convention of putting each part of this chain on a new line to make it easier to read. To create even more readable code, we can use a different promise function: .catch() . The .catch() function takes only one argument, onRejected . In the case of a rejected promise, this failure handler will be invoked with the reason for rejection. Using .catch() accomplishes the same thing as using a .then() with only a failure handler. Let\u2019s look at an example using .catch() : js prom .then((resolvedValue) = { console.log(resolvedValue); }) .catch((rejectionReason) = { console.log(rejectionReason); }); Example : checkInventory(order).then(handleSuccess).catch(handleFailure); Chaining Multiple Promises One common pattern we\u2019ll see with asynchronous programming is multiple operations which depend on each other to execute or that must be executed in a certain order. We might make one request to a database and use the data returned to us to make another request and so on This process of chaining promises together is called composition . Promises are designed with composition in mind! Here\u2019s a simple promise chain in code: firstPromiseFunction() .then((firstResolveVal) = { return secondPromiseFunction(firstResolveVal); }) .then((secondResolveVal) = { console.log(secondResolveVal); }); Example : checkInventory(order) .then((resolvedValueArray) = { // Write the correct return statement here: return processPayment(resolvedValueArray); }) .then((resolvedValueArray) = { // Write the correct return statement here: return shipOrder(resolvedValueArray); }) .then((successMessage) = { console.log(successMessage); }) .catch((errorMessage) = { console.log(errorMessage); }); Avoiding Common Mistakes Promise composition allows for much more readable code than the nested callback syntax that preceded it. However, it can still be easy to make mistakes. In this exercise, we\u2019ll go over two common mistakes with promise composition. Mistake 1: Nesting promises instead of chaining them. returnsFirstPromise() .then((firstResolveVal) = { return returnsSecondValue(firstResolveVal) .then((secondResolveVal) = { console.log(secondResolveVal); }) }) Instead of having a clean chain of promises, we\u2019ve nested the logic for one inside the logic of the other. Imagine if we were handling five or ten promises! Mistake 2: Forgetting to return a promise. returnsFirstPromise() .then((firstResolveVal) = { returnsSecondValue(firstResolveVal) }) .then((someVal) = { console.log(someVal); }) Using Promise.all() When done correctly, promise composition is a great way to handle situations where asynchronous operations depend on each other or execution order matters. What if we\u2019re dealing with multiple promises, but we don\u2019t care about the order? Let\u2019s think in terms of cleaning again. To maximize efficiency we should use concurrency , multiple asynchronous operations happening together. With promises, we can do this with the function Promise.all() . If every promise in the argument array resolves, the single promise returned from Promise.all() will resolve with an array containing the resolve value from each promise in the argument array. If any promise from the argument array rejects, the single promise returned from Promise.all() will immediately reject with the reason that promise rejected. This behavior is sometimes referred to as failing fast . let myPromises = Promise.all([returnsPromOne(), returnsPromTwo(), returnsPromThree()]); myPromises .then((arrayOfValues) = { console.log(arrayOfValues); }) .catch((rejectionReason) = { console.log(rejectionReason); }); We declare myPromises assigned to invoking Promise.all() . We invoke Promise.all() with an array of three promises\u2014 the returned values from functions. We invoke .then() with a success handler which will print the array of resolved values if each promise resolves successfully. We invoke .catch() with a failure handler which will print the first rejection message if any promise rejects. The async Keyword The async keyword is used to write functions that handle asynchronous actions. We wrap our asynchronous logic inside a function prepended with the async keyword. Then, we invoke that function. const myFunc = async () = { // Function body here }; myFunc(); async functions always return a promise. This means we can use traditional promise syntax, like .then() and .catch with our async functions. An async function will return in one of three ways: If there\u2019s nothing returned from the function, it will return a promise with a resolved value of undefined . If there\u2019s a non-promise value returned from the function, it will return a promise resolved to that value. If a promise is returned from the function, it will simply return that promise async function fivePromise() { return 5; } fivePromise() .then(resolvedValue = { console.log(resolvedValue); }) // Prints 5 The await Operator async functions are almost always used with the additional keyword await inside the function body. The await keyword can only be used inside an async function await is an operator: it returns the resolved value of a promise Since promises resolve in an indeterminate amount of time, await halts, or pauses, the execution of our async function until a given promise is resolved. ```js async function asyncFuncExample(){ let resolvedValue = await myPromise(); console.log(resolvedValue); } asyncFuncExample(); // Prints: I am resolved now! ``` Now we\u2019ll write two async functions which invoke myPromise() : ```js async function noAwait() { let value = myPromise(); console.log(value); } async function yesAwait() { let value = await myPromise(); console.log(value); } noAwait(); // Prints: Promise { } yesAwait(); // Prints: Yay, I resolved! ``` In the first async function, noAwait() , we left off the await keyword before myPromise() . In the second, yesAwait() , we included it. The noAwait() function logs Promise { } to the console. Without the await keyword, the function execution wasn\u2019t paused. The console.log() on the following line was executed before the promise had resolved. Remember that the await operator returns the resolved value of a promise. When used properly in yesAwait() , the variable value was assigned the resolved value of the myPromise() promise, whereas in noAwait() , value was assigned the promise object itself. #### Handling Dependent Promises The true beauty of async...await is when we have a series of asynchronous actions which depend on one another. For example, we may make a network request based on a query to a database. In that case, we would need to wait to make the network request until we had the results from the database. With native promise syntax, we use a chain of .then() functions making sure to return correctly each one: js function nativePromiseVersion() { returnsFirstPromise() .then((firstValue) = { console.log(firstValue); return returnsSecondPromise(firstValue); }) .then((secondValue) = { console.log(secondValue); }); } Let\u2019s break down what\u2019s happening in the nativePromiseVersion() function: Within our function we use two functions which return promises: returnsFirstPromise() and returnsSecondPromise() . We invoke returnsFirstPromise() and ensure that the first promise resolved by using .then() . In the callback of our first .then() , we log the resolved value of the first promise, firstValue , and then return returnsSecondPromise(firstValue) . We use another .then() to print the second promise\u2019s resolved value to the console. Here\u2019s how we\u2019d write an async function to accomplish the same thing: js async function asyncAwaitVersion() { let firstValue = await returnsFirstPromise(); console.log(firstValue); let secondValue = await returnsSecondPromise(firstValue); console.log(secondValue); } Handling Errors With async...await , we use try...catch statements for error handling. By using this syntax, not only are we able to handle errors in the same way we do with synchronous code, but we can also catch both synchronous and asynchronous errors. This makes for easier debugging! async function usingTryCatch() { try { let resolveValue = await asyncFunction('thing that will fail'); let secondValue = await secondAsyncFunction(resolveValue); } catch (err) { // Catches any errors in the try block console.log(err); } } usingTryCatch(); Handling Independent Promises Remember that await halts the execution of our async function. This allows us to conveniently write synchronous-style code to handle dependent promises. But what if our async function contains multiple promises which are not dependent on the results of one another to execute async function serveDinner() { const vegetablePromise = steamBroccoli(); const starchPromise = cookRice(); const proteinPromise = bakeChicken(); const sidePromise = cookBeans(); console.log(`Dinner is served. We're having ${await vegetablePromise}, ${await starchPromise}, ${await proteinPromise}, and ${await sidePromise}.`); } serveDinner(); Await Promise.all() Another way to take advantage of concurrency when we have multiple promises which can be executed simultaneously is to await a Promise.all() async function asyncPromAll() { const resultArray = await Promise.all([asyncTask1(), asyncTask2(), asyncTask3(), asyncTask4()]); for (let i = 0; i resultArray.length; i++){ console.log(resultArray[i]); } } Promise.all() allows us to take advantage of asynchronicity\u2014 each of the four asynchronous tasks can process concurrently. Promise.all() also has the benefit of failing fast , meaning it won\u2019t wait for the rest of the asynchronous actions to complete once any one has rejected. As soon as the first promise in the array rejects, the promise returned from Promise.all() will reject with that reason. As it was when working with native promises, Promise.all() is a good choice if multiple asynchronous tasks are all required, but none must wait for any other before executing. async function serveDinnerAgain(){ let foodArray = await Promise.all([steamBroccoli(), cookRice(), bakeChicken(), cookBeans()]); console.log(`Dinner is served. We're having ${foodArray[0]}, ${foodArray[1]}, ${foodArray[2]}, and ${foodArray[3]}.`) } serveDinnerAgain()","title":"Javascript"},{"location":"Javascript-ES6-Notes/#javascript-es6-notes","text":"","title":"Javascript ES6 Notes:"},{"location":"Javascript-ES6-Notes/#javascript-versions-es6-and-before","text":"Take for example pre-ES6 syntax for function expressions: var greeting = function() { console.log('Hello World!'); }; With ES6 arrow functions, we can transform the expression above into: let writingUtensil=tool || 'pen'const greeting = () = console.log('Hello World');","title":"JavaScript Versions: ES6 and Before"},{"location":"Javascript-ES6-Notes/#progate-codeacademy-lesson-1","text":"Null : This data type represents the intentional absence of a value, and is represented by the keyword null (without quotes). Undefined : This data type is denoted by the keyword undefined (without quotes). It also represents the absence of a value though it has a different use than null . js let price; console.log(price); // Output: undefined Symbol : A newer feature to the language, symbols are unique identifiers, useful in more complex coding. No need to worry about these for now. Object : Collections of related data. The first 1-2 of those types are considered primitive data types . They are the most basic data types in the language. // Prinitng the Hello World console.log( Hello World ); // Output the result of 24 divided by 4 console.log(24/4); //Using the variable let name= Harshit Yadav ; console.log( My Name is +name); //dont use let again name=4; console.log(name); //Short hand works in JS name+=2; console.log(name); //Constants in JS const ne= this is constant ; // Templeate Literals console.log(`My name is ${ne} :) `); // if condition if(name 1) { console.log( check ); console.log(name 1); } const password = kentheninja ; // When the value of password is kentheninja , output Signed in successfully if(password=== kentheninja ) { switch (password){ case kentheninja : console.log( check mate ); break; default: console.log( fail ); break; } console.log( Signed in successfully ); } else { console.log( nope ); } // Short Circuit using and Operator let writingUtensil=tool || 'pen' // Ternary operator let isLocked = false; isLocked ? console.log('You will need a key to open the door.') : console.log('You will not need a key to open the door.'); let favoritePhrase = 'Love That!'; favoritePhrase === 'Love That!' ? console.log('I love that!'): console.log( I don't love that! );","title":"Progate + Codeacademy Lesson 1:"},{"location":"Javascript-ES6-Notes/#progate-lesson-2","text":"","title":"Progate Lesson 2"},{"location":"Javascript-ES6-Notes/#codeacdemy-lesson-1","text":"//calculating the length of the string console.log( hello .length); console.log('hello'.toUpperCase()); // Prints 'HELLO' console.log('Hey'.startsWith('H')); // Prints true console.log(' Remove whitespace '.trim());// Remove the WhiteSpace console.log(Math.random()); // Prints a random number between 0 and 1 console.math(Math.random()*50);//to generate number between 1 to 50 console.log(Math.floor(Math.random() * 50));// Floor the decimal values to whole number","title":"CodeAcdemy Lesson 1:"},{"location":"Javascript-ES6-Notes/#maths-in-javascript-documentation","text":"","title":"Maths  In Javascript Documentation"},{"location":"Javascript-ES6-Notes/#number-in-javascript-documentation","text":"","title":"Number in Javascript Documentation"},{"location":"Javascript-ES6-Notes/#variable-in-js","text":"There were a lot of changes introduced in the ES6 version of JavaScript in 2015. One of the biggest changes was two new keywords, let and const , to create, or declare , variables. Prior to the ES6, programmers could only use the var keyword to declare variables The let keyword signals that the variable can be reassigned a different value. //var myName = 'Arya'; let myName = 'Arya'; console.log(myName); myName is the variable\u2019s name. Capitalizing in this way is a standard convention in JavaScript called camel casing . In camel casing you group words into one, the first word is lowercase, then every word that follows will have its first letter uppercased. (e.g. camelCaseEverything)","title":"Variable in JS"},{"location":"Javascript-ES6-Notes/#string-interpolation","text":"In the ES6 version of JavaScript, we can insert, or interpolate , variables into strings using template literals const myPet = 'armadillo'; console.log(`I own a pet ${myPet}.`);","title":"String Interpolation"},{"location":"Javascript-ES6-Notes/#typeof-operator","text":"let newVariable = 'Playing around with typeof.'; console.log(typeof newVariable);","title":"Typeof Operator"},{"location":"Javascript-ES6-Notes/#functions-in-javascript","text":"One way to create a function is by using a function declaration . Just like how a variable declaration binds a value to a variable name, a function declaration binds a function to a name, or an identifier . function getReminder() { console.log('Water the plants.'); }","title":"Functions in Javascript"},{"location":"Javascript-ES6-Notes/#default-parameters","text":"function makeShoppingList(item1='milk', item2='bread', item3='eggs'){ console.log(`Remember to buy ${item1}`); console.log(`Remember to buy ${item2}`); console.log(`Remember to buy ${item3}`); }","title":"Default Parameters"},{"location":"Javascript-ES6-Notes/#return-function","text":"function rectangleArea(width, height) { if (width 0 || height 0) { return 'You need positive integers to calculate area!'; } return width * height;","title":"Return Function"},{"location":"Javascript-ES6-Notes/#arrow-functions","text":"ES6 introduced arrow function syntax , a shorter way to write functions by using the special \u201cfat arrow\u201d () = notation. const rectangleArea = (width, height) = { let area = width * height; return area; };","title":"Arrow Functions"},{"location":"Javascript-ES6-Notes/#concise-body-arrow-functions","text":"const squareNum = num = num * num;","title":"Concise Body Arrow Functions"},{"location":"Javascript-ES6-Notes/#arrays","text":"Arrays are JavaScript\u2019s way of making lists. Arrays can store any data types (including strings, numbers, and booleans). Like lists, arrays are ordered, meaning each item has a numbered position let newYearsResolutions = ['Keep a journal', 'Take a falconry class', 'Learn to juggle']; console.log(newYearsResolutions); console.log(newYearsResolutions.length); Variables declared with the const keyword cannot be reassigned. However, elements in an array declared with const remain mutable. Meaning that we can change the contents of a const array, but cannot reassign a new array or a different value ### The .push() .pop()Method .push() can take a single argument or multiple arguments separated by commas Mozilla Documentation Some arrays methods that are available to JavaScript developers include: .join() , .slice() , .splice() , .shift() , .unshift() , and .concat() amongst many others. ```js const itemTracker = ['item 0', 'item 1', 'item 2']; itemTracker.push('item 3', 'item 4'); chores.pop(); console.log(itemTracker); const array1 = [1, 2, 3]; const firstElement = array1.shift(); const animals = ['ant', 'bison', 'camel', 'duck', 'elephant']; console.log(animals.slice(2)); // expected output: Array [\"camel\", \"duck\", \"elephant\"] console.log(animals.slice(2, 4)); ```","title":"Arrays"},{"location":"Javascript-ES6-Notes/#arrays-and-functions","text":"const concept = ['arrays', 'can', 'be', 'mutated']; function changeArr(arr){ arr[3] = 'MUTATED'; } changeArr(concept); function removeElement(newArr) { newArr.pop(); } removeElement(concept); console.log(concept);","title":"Arrays and Functions"},{"location":"Javascript-ES6-Notes/#nested-arrays","text":"let numberClusters=[[1,2],[3,4],[5,6]]; const target=numberClusters[2][1];","title":"Nested Arrays"},{"location":"Javascript-ES6-Notes/#higher-order-functions","text":"","title":"HIGHER-ORDER FUNCTIONS"},{"location":"Javascript-ES6-Notes/#functions-as-data","text":"mozilla documentation const announceThatIAmDoingImportantWork = () = { console.log( I\u2019m doing very important work! ); }; const busy = announceThatIAmDoingImportantWork; busy(); // This function call barely takes any space!","title":"Functions as Data"},{"location":"Javascript-ES6-Notes/#functions-as-parameters","text":"of data in JavaScript, it might not surprise you to learn that we can also pass functions (into other functions) as parameters. A higher-order function is a function that either accepts functions as parameters, returns a function, or both! We call the functions that get passed in as parameters and invoked callback functions because they get called during the execution of the higher-order function. When we pass a function in as an argument to another function, we don\u2019t invoke it. Invoking the function would evaluate to the return value of that function call. With callbacks, we pass in the function itself by typing the function name without the parentheses (that would evaluate to the result of calling the function): const timeFuncRuntime = funcParameter = { let t1 = Date.now(); funcParameter(); let t2 = Date.now(); return t2 - t1; } const addOneToOne = () = 1 + 1; timeFuncRuntime(addOneToOne); We wrote a higher-order function, timeFuncRuntime() . It takes in a function as an argument, saves a starting time, invokes the callback function, records the time after the function was called, and returns the time the function took to run by subtracting the starting time from the ending time. Example : const checkThatTwoPlusTwoEqualsFourAMillionTimes = () = { for(let i = 1; i = 1000000; i++) { if ( (2 + 2) != 4) { console.log('Something has gone very wrong :( '); } } }; const addTwo = num = num + 2; const timeFuncRuntime = funcParameter = { let t1 = Date.now(); funcParameter(); let t2 = Date.now(); return t2 - t1; }; // Write your code below const time2p2 = timeFuncRuntime(checkThatTwoPlusTwoEqualsFourAMillionTimes); const checkConsistentOutput = (func, val) = { let firstTry = func(val); let secondTry = func(val); if (firstTry === secondTry) { return firstTry } else { return 'This function returned inconsistent results' } }; checkConsistentOutput(addTwo, 10);","title":"Functions as Parameters"},{"location":"Javascript-ES6-Notes/#iterators","text":"Mozilla Documentation","title":"Iterators"},{"location":"Javascript-ES6-Notes/#the-foreach-method","text":"Aptly named, .forEach() will execute the same code for each element of an array. const fruits = ['mango', 'papaya', 'pineapple', 'apple']; fruits.forEach(groceryItem = console.log(fruits)); function printer(arr) { console.log('I want to eat a' + arr); } fruits.forEach(printer); fruits.forEach(fruit = console.log(`I want to eat a ${fruit}.`))","title":"The .forEach() Method"},{"location":"Javascript-ES6-Notes/#the-map-method","text":"The second iterator we\u2019re going to cover is .map() . When .map() is called on an array, it takes an argument of a callback function and returns a new array! Take a look at an example of calling .map() : const numbers = [1, 2, 3, 4, 5]; const bigNumbers = numbers.map(number = { return number * 10; }); .map() works in a similar manner to .forEach() \u2014 the major difference is that .map() returns a new array. Example const animals = ['Hen', 'elephant', 'llama', 'leopard', 'ostrich', 'Whale', 'octopus', 'rabbit', 'lion', 'dog']; // Create the secretMessage array below const secretMessage=animals.map( world = { return world[0]; } );","title":"The .map() Method"},{"location":"Javascript-ES6-Notes/#the-filter-method","text":".filter() returns an array of elements after filtering out certain elements from the original array. The callback function for the .filter() method should return true or false depending on the element that is passed to it. The elements that cause the callback function to return true are added to the new array. Take a look at the following example: const words = ['chair', 'music', 'pillow', 'brick', 'pen', 'door']; const shortWords = words.filter(word = { return word.length 6; }); Example : const randomNumbers = [375, 200, 3.14, 7, 13, 852]; // Call .filter() on randomNumbers below const smallNumbers=randomNumbers.filter( digit = { return digit 250; }) console.log(smallNumbers); const favoriteWords = ['nostalgia', 'hyperbole', 'fervent', 'esoteric', 'serene']; // Call .filter() on favoriteWords below const longFavoriteWords=favoriteWords.filter( word = { return word.length 7; }); console.log(longFavoriteWords);","title":"The .filter() Method"},{"location":"Javascript-ES6-Notes/#the-findindex-method","text":"We sometimes want to find the location of an element in an array. That\u2019s where the .findIndex() method comes in! Calling .findIndex() on an array will return the index of the first element that evaluates to true in the callback function const jumbledNums = [123, 25, 78, 5, 9]; const lessThanTen = jumbledNums.findIndex(num = { return num 10; }); Example const animals = ['hippo', 'tiger', 'lion', 'seal', 'cheetah', 'monkey', 'salamander', 'elephant']; const foundAnimal=animals.findIndex( word = { return word==='elephant'; }); console.log(foundAnimal); const startsWithS=animals.findIndex( word = { return word[0]==='s'; } ); console.log(startsWithS);","title":"The .findIndex() Method"},{"location":"Javascript-ES6-Notes/#the-reduce-method","text":"Another widely used iteration method is .reduce() . The .reduce() method returns a single value after iterating through the elements of an array, thereby reducing the array. const numbers = [1, 2, 4, 10]; const summedNums = numbers.reduce((accumulator, currentValue) = { return accumulator + currentValue }) console.log(summedNums) // Output: 17 The .reduce() method can also take an optional second parameter to set an initial value for accumulator (remember, the first argument is the callback function!). For instance: const numbers = [1, 2, 4, 10]; const summedNums = numbers.reduce((accumulator, currentValue) = { return accumulator + currentValue }, 100) // - Second argument for .reduce() console.log(summedNums); // Output: 117 Example : const newNumbers = [1, 3, 5, 7]; const newSum=newNumbers.reduce(function (accumulator,currentValue) { console.log('The value of accumulator: ', accumulator); console.log('The value of currentValue: ', currentValue); return accumulator + currentValue; },10); console.log(newSum);","title":"The .reduce() Method"},{"location":"Javascript-ES6-Notes/#more-example","text":"const words = ['unique', 'uncanny', 'pique', 'oxymoron', 'guise']; console.log(words.some(word = { return word.length 6; })); // Use filter to create a new array const interestingWords = words.filter((word) = {return word.length 5}); console.log(interestingWords.every((word) = {return word.length 5})); Revision : const cities = ['Orlando', 'Dubai', 'Edinburgh', 'Chennai', 'Accra', 'Denver', 'Eskisehir', 'Medellin', 'Yokohama']; const nums = [1, 50, 75, 200, 350, 525, 1000]; // Choose a method that will return undefined cities.forEach(city = console.log('Have you visited ' + city + '?')); // Choose a method that will return a new array const longCities = cities.filter(city = city.length 7); // Choose a method that will return a single value const word = cities.reduce((acc, currVal) = { return acc + currVal[0] }, C ); console.log(word) // Choose a method that will return a new array const smallerNums = nums.map(num = num - 5); // Choose a method that will return a boolean value nums.some(num = num 0);","title":"More Example  :"},{"location":"Javascript-ES6-Notes/#introduction-to-objects","text":"","title":"Introduction to Objects"},{"location":"Javascript-ES6-Notes/#creating-object-literals","text":"Objects can be assigned to variables just like any JavaScript type. We use curly braces, {} , to designate an object literal : let spaceship = {}; // spaceship is an empty object We fill an object with unordered data. This data is organized into key-value pairs . // An object literal with two key-value pairs let spaceship = { 'Fuel Type': 'diesel', color: 'silver' };","title":"Creating Object Literals"},{"location":"Javascript-ES6-Notes/#accessing-properties","text":"let spaceship = { homePlanet: 'Earth', color: 'silver' }; spaceship.homePlanet; // Returns 'Earth', spaceship.color; // Returns 'silver', If we try to access a property that does not exist on that object, undefined will be returned. spaceship.favoriteIcecream; // Returns undefined","title":"Accessing Properties"},{"location":"Javascript-ES6-Notes/#using-bracket-notation","text":"The second way to access a key\u2019s value is by using bracket notation, [ ] . let spaceship = { 'Fuel Type': 'Turbo Fuel', 'Active Duty': true, homePlanet: 'Earth', numCrew: 5 }; spaceship['Active Duty']; // Returns true spaceship['Fuel Type']; // Returns 'Turbo Fuel' spaceship['numCrew']; // Returns 5 spaceship['!!!!!!!!!!!!!!!']; // Returns undefined Example : let spaceship = { 'Fuel Type' : 'Turbo Fuel', 'Active Mission' : true, homePlanet : 'Earth', numCrew: 5 }; let propName = 'Active Mission'; // Write your code below let isActive=spaceship['Active Mission']; console.log(spaceship[propName]);","title":"Using Bracket [ ] notation"},{"location":"Javascript-ES6-Notes/#property-assignment","text":"It\u2019s important to know that although we can\u2019t reassign an object declared with const , we can still mutate it, meaning we can add new properties and change the properties that are there. const spaceship = {type: 'shuttle'}; spaceship = {type: 'alien'}; // TypeError: Assignment to constant variable. spaceship.type = 'alien'; // Changes the value of the type property spaceship.speed = 'Mach 5'; // Creates a new key of 'speed' with a value of 'Mach 5' You can delete a property from an object with the delete operator. const spaceship = { 'Fuel Type': 'Turbo Fuel', homePlanet: 'Earth', mission: 'Explore the universe' }; delete spaceship.mission; // Removes the mission property","title":"Property Assignment"},{"location":"Javascript-ES6-Notes/#methods","text":"When the data stored on an object is a function we call that a method . A property is what an object has, while a method is what an object does. let retreatMessage = 'We no longer wish to conquer your planet. It is full of dogs, which we do not care for.'; // Write your code below let alienShip={ retreat : function () { console.log(retreatMessage); }, takeOff : function() { console.log('Spim... Borp... Glix... Blastoff!'); } } alienShip.retreat(); alienShip.takeOff();","title":"Methods"},{"location":"Javascript-ES6-Notes/#nested-objects","text":"spaceship.nanoelectronics['back-up'].battery; // Returns 'Lithium'","title":"Nested Objects"},{"location":"Javascript-ES6-Notes/#pass-by-reference","text":"Objects are passed by reference . This means when we pass a variable assigned to an object into a function as an argument, the computer interprets the parameter name as pointing to the space in memory holding that object. As a result, functions which change object properties actually mutate the object permanently (even when the object is assigned to a const variable) const spaceship = { homePlanet : 'Earth', color : 'silver' }; let paintIt = obj = { obj.color = 'glorious gold' }; paintIt(spaceship); spaceship.color // Returns 'glorious gold' Example : let spaceship = { 'Fuel Type' : 'Turbo Fuel', homePlanet : 'Earth' }; greenEnergy(obj) { obj['Fuel Type'] ='avocado oil'; } function remotelyDisable(obj) { obj.disabled=true; } greenEnergy(spaceship); remotelyDisable(spaceship); console.log(spaceship);","title":"Pass By Reference"},{"location":"Javascript-ES6-Notes/#looping-through-objects","text":"for...in will execute a given block of code for each property in an object. let spaceship = { crew: { captain: { name: 'Lily', degree: 'Computer Engineering', cheerTeam() { console.log('You got this!') } }, 'chief officer': { name: 'Dan', degree: 'Aerospace Engineering', agree() { console.log('I agree, captain!') } }, medic: { name: 'Clementine', degree: 'Physics', announce() { console.log(`Jets on!`) } }, translator: { name: 'Shauna', degree: 'Conservation Science', powerFuel() { console.log('The tank is full!') } } } }; // Write your code below for (let crewMember in spaceship.crew) { console.log(`${crewMember}: ${spaceship.crew[crewMember].name}`) }; for (let crewMember in spaceship.crew) { console.log(`${spaceship.crew[crewMember].name}: ${spaceship.crew[crewMember].degree}`) };","title":"Looping Through Objects"},{"location":"Javascript-ES6-Notes/#advanced-objects-introduction","text":"","title":"Advanced Objects Introduction"},{"location":"Javascript-ES6-Notes/#the-this-keyword","text":"Objects are collections of related data and functionality. We store that functionality in methods on our objects: const goat = { dietType: 'herbivore', makeSound() { console.log('baaa'); } }; In our goat object we have a .makeSound() method. We can invoke the .makeSound() method on goat . goat.makeSound(); // Prints baaa ice, we have a goat object that can print baaa to the console. Everything seems to be working fine. What if we wanted to add a new method to our goat object called .diet() that prints the goat \u2018s dietType ? const goat = { dietType: 'herbivore', makeSound() { console.log('baaa'); }, diet() { console.log(dietType); } }; goat.diet(); // Output will be ReferenceError: dietType is not defined That\u2019s strange, why is dietType not defined even though it\u2019s a property of goat ? That\u2019s because inside the scope of the .diet() method, we don\u2019t automatically have access to other properties of the goat object. Here\u2019s where the this keyword comes to the rescue. If we change the .diet() method to use the this , the .diet() works! const goat = { dietType: 'herbivore', makeSound() { console.log('baaa'); }, diet() { console.log(this.dietType); } }; goat.diet(); // Output: herbivore The this keyword references the calling object which provides access to the calling object\u2019s properties. In the example above, the calling object is goat and by using this we\u2019re accessing the goat object itself, and then the dietType property of goat by using property dot notation. Example : const robot = { model:'1E78V2', energyLevel:100, provideInfo(){ return(`I am ${this.model} and my current energy level is ${this.energyLevel}`); } }; console.log(robot.provideInfo());","title":"The this Keyword"},{"location":"Javascript-ES6-Notes/#arrow-functions-and-this","text":"We saw in the previous exercise that for a method, the calling object is the object the method belongs to. If we use the this keyword in a method then the value of this is the calling object. However, it becomes a bit more complicated when we start using arrow functions for methods. Take a look at the example below: const goat = { dietType: 'herbivore', makeSound() { console.log('baaa'); }, diet: () = { console.log(this.dietType); } }; goat.diet(); // Prints undefined In the comment, you can see that goat.diet() would log undefined . So what happened? Notice that in the .diet() is defined using an arrow function. Arrow functions inherently bind , or tie, an already defined this value to the function itself that is NOT the calling object. In the code snippet above, the value of this is the global object , or an object that exists in the global scope, which doesn\u2019t have a dietType property and therefore returns undefined . To read more about either arrow functions or the global object check out the MDN documentation of the global object and arrow functions . Example : This would work const robot = { energyLevel: 100, checkEnergy() { console.log(`Energy is currently at ${this.energyLevel}%.`) } } robot.checkEnergy(); but this wont work : const robot = { energyLevel: 100, checkEnergy: () = { console.log(`Energy is currently at ${this.energyLevel}%.`) } } robot.checkEnergy();","title":"Arrow Functions and this"},{"location":"Javascript-ES6-Notes/#privacy","text":"Accessing and updating properties is fundamental in working with objects. However, there are cases in which we don\u2019t want other code simply accessing and updating an object\u2019s properties. When discussing privacy in objects, we define it as the idea that only certain properties should be mutable or able to change in value. Certain languages have privacy built-in for objects, but JavaScript does not have this feature. Rather, JavaScript developers follow naming conventions that signal to other developers how to interact with a property. One common convention is to place an underscore _ before the name of a property to mean that the property should not be altered. Here\u2019s an example of using _ to prepend a property. const bankAccount = { _amount: 1000 } In the example above, the _amount is not intended to be directly manipulated","title":"Privacy"},{"location":"Javascript-ES6-Notes/#getters","text":"Getters are methods that get and return the internal properties of an object. But they can do more than just retrieve the value of a property onst person = { _firstName: 'John', _lastName: 'Doe', get fullName() { if (this._firstName this._lastName){ return `${this._firstName} ${this._lastName}`; } else { return 'Missing a first name or a last name.'; } } } // To call the getter method: person.fullName; // 'John Doe'","title":"Getters"},{"location":"Javascript-ES6-Notes/#setters","text":"Along with getter methods, we can also create setter methods which reassign values of existing properties within an object. Let\u2019s see an example of a setter method: const person = { _age: 37, set age(newAge){ if (typeof newAge === 'number'){ this._age = newAge; } else { console.log('You must assign a number to age'); } } }; Example : const robot = { _model: '1E78V2', _energyLevel: 100, _numOfSensors: 15, get numOfSensors(){ if(typeof this._numOfSensors === 'number'){ return this._numOfSensors; } else { return 'Sensors are currently down.' } }, set numOfSensors(num) { if (typeof num === 'number' num = 0){ this._numOfSensors = num; } else { console.log(`Pass in a number that is greater than or equal to 0`); } } }; robot.numOfSensors=100; console.log(robot.numOfSensors);","title":"Setters"},{"location":"Javascript-ES6-Notes/#factory-functions","text":"So far we\u2019ve been creating objects individually, but there are times where we want to create many instances of an object quickly. Here\u2019s where factory functions come in A factory function is a function that returns an object and can be reused to make multiple object instances. Factory functions can also have parameters allowing us to customize the object that gets returned. Let\u2019s say we wanted to create an object to represent monsters in JavaScript. There are many different types of monsters and we could go about making each monster individually but we can also use a factory function to make our lives easier. To achieve this diabolical plan of creating multiple monsters objects, we can use a factory function that has parameters: js const monsterFactory = (name, age, energySource, catchPhrase) = { return { name: name, age: age, energySource: energySource, scare() { console.log(catchPhrase); } } }; To make an object that represents a specific monster like a ghost, we can call monsterFactory with the necessary arguments and assign the return value to a variable: js const ghost = monsterFactory('Ghouly', 251, 'ectoplasm', 'BOO!'); ghost.scare(); // 'BOO!' ## Property Value Shorthand ES6 introduced some new shortcuts for assigning properties to variables known as destructuring . In the previous exercise, we created a factory function that helped us create objects. We had to assign each property a key and value even though the key name was the same as the parameter name we assigned to it. To remind ourselves, here\u2019s a truncated version of the factory function: js const monsterFactory = (name, age) = { return { name: name, age: age } }; But we can use a destructuring technique, called property value shorthand , to save ourselves some keystrokes. js const monsterFactory = (name, age) = { return { name, age } }; ### Destructured Assignment We often want to extract key-value pairs from objects and save them as variables. js const vampire = { name: 'Dracula', residence: 'Transylvania', preferences: { day: 'stay inside', night: 'satisfy appetite' } }; If we wanted to extract the residence property as a variable, js const residence = vampire.residence; we can also take advantage of a destructuring technique called destructured assignment to save ourselves some keystrokes. In destructured assignment we create a variable with the name of an object\u2019s key that is wrapped in curly braces { } and assign to it the object. Take a look at the example below: js const { residence } = vampire; console.log(residence); // Prints 'Transylvania' Look back at the vampire object\u2019s properties in the first code example. Then, in the example above, we declare a new variable residence that extracts the value of the residence property of vampire . When we log the value of residence to the console, 'Transylvania' is printed. const { day } = vampire.preferences; console.log(day); // Prints 'stay inside' Example : const robot = { model: '1E78V2', energyLevel: 100, functionality: { beep() { console.log('Beep Boop'); }, fireLaser() { console.log('Pew Pew'); }, } }; const {functionality }=robot; functionality.beep();","title":"Factory Functions"},{"location":"Javascript-ES6-Notes/#built-in-object-methods","text":"For example, we have access to object instance methods like: .hasOwnProperty() , .valueOf() , and many more! Practice your documentation reading skills and check out: MDN\u2019s object instance documentation . There are also useful Object class methods such as Object.assign() , Object.entries() , and Object.keys() just to name a few. For a comprehensive list, browse: MDN\u2019s object instance documentation . Find out what we have to include by reading MDN\u2019s Object.keys() documentation . To find how to use Object.entries() , read the documentation at MDN . we should check Object.assign() documentation at MDN . Example : const robot = { model: 'SAL-1000', mobile: true, sentient: false, armor: 'Steel-plated', energyLevel: 75 }; // What is missing in the following method call? const robotKeys = Object.keys(robot); console.log(robotKeys); // Declare robotEntries below this line: const robotEntries=Object.entries(robot); console.log(robotEntries); // Declare newRobot below this line: const newRobot=Object.assign({laserBlaster: true, voiceRecognition: true}, robot); console.log(newRobot);","title":"Built-in Object Methods"},{"location":"Javascript-ES6-Notes/#introduction-to-classes","text":"JavaScript is an object-oriented programming (OOP) language we can use to model real-world items. In this lesson, you will learn how to make classes . Take, for example, an object representing a dog named halley . This dog\u2019s name (a key) is \"Halley\" (a value) and has an age (another key) of 3 (another value). We create the halley object below: let halley = { _name: 'Halley', _behavior: 0, get name() { return this._name; }, get behavior() { return this._behavior; }, incrementBehavior() { this._behavior++; } } class instantiation, method const halley = new Dog('Halley'); console.log(halley.name); // Print name value to console console.log(halley.behavior); // Print behavior value to console halley.incrementBehavior(); // Add one to behavior console.log(halley.name); // Print name value to console console.log(halley.behavior); // Print behavior value to console","title":"Introduction to Classes"},{"location":"Javascript-ES6-Notes/#constructor","text":"Although you may see similarities between class and object syntax, there is one important method that sets them apart. It\u2019s called the constructor method. JavaScript calls the constructor() method every time it creates a new instance of a class. class Dog { constructor(name) { this.name = name; this.behavior = 0; } }","title":"Constructor"},{"location":"Javascript-ES6-Notes/#instance","text":"n instance is an object that contains the property names and methods of a class, but with unique property values. class Surgeon { constructor(name, department) { this.name = name; this.department = department; } } const surgeonCurry=new Surgeon('Curry','Cardiovascular'); const surgeonDurant=new Surgeon('Durant','Orthopedics');","title":"Instance"},{"location":"Javascript-ES6-Notes/#methods_1","text":"Example class Surgeon { constructor(name, department) { this._name = name; this._department = department; this._remainingVacationDays = 20; } get name() { return this._name; } get department() { return this._department; } get remainingVacationDays() { return this._remainingVacationDays; takeVacationDays(daysOff) { this._remainingVacationDays -= daysOff; } } const surgeonCurry = new Surgeon('Curry', 'Cardiovascular'); const surgeonDurant = new Surgeon('Durant', 'Orthopedics');","title":"Methods"},{"location":"Javascript-ES6-Notes/#method-calls","text":"Example : class Surgeon { constructor(name, department) { this._name = name; this._department = department; this._remainingVacationDays = 20; } get name() { return this._name; } get department() { return this._department; } get remainingVacationDays() { return this._remainingVacationDays; } takeVacationDays(daysOff) { this._remainingVacationDays -= daysOff; } } const surgeonCurry = new Surgeon('Curry', 'Cardiovascular'); const surgeonDurant = new Surgeon('Durant', 'Orthopedics'); console.log(surgeonCurry.name); surgeonCurry.takeVacationDays(3); console.log(surgeonCurry.remainingVacationDays);","title":"Method Calls"},{"location":"Javascript-ES6-Notes/#inheritance-i","text":"We\u2019ve abstracted the shared properties and methods of our Cat and Dog classes into a parent class called Animal (See below) class Animal { constructor(name) { this._name = name; this._behavior = 0; } get name() { return this._name; } get behavior() { return this._behavior; } incrementBehavior() { this._behavior++; } } Now that we have these shared properties and methods in the parent Animal class, we can extend them to the subclass, Cat class Cat extends Animal { constructor(name, usesLitter) { super(name); this._usesLitter = usesLitter; } } The super keyword calls the constructor of the parent class. In this case, super(name) passes the name argument of the Cat class to the constructor of the Animal class. When the Animal constructor runs, it sets this._name = name; for new Cat instances Example : class HospitalEmployee { constructor(name) { this._name = name; this._remainingVacationDays = 20; } get name() { return this._name; } get remainingVacationDays() { return this._remainingVacationDays; } takeVacationDays(daysOff) { this._remainingVacationDays -= daysOff; } } class Nurse extends HospitalEmployee { constructor(name, certifications) { super(name); this._certifications = certifications; } get certifications() { return this._certifications; } addCertification(newCertification) { this._certifications.push(newCertification); } } const nurseOlynyk = new Nurse('Olynyk', ['Trauma','Pediatrics']); nurseOlynyk.takeVacationDays(5); console.log(nurseOlynyk.remainingVacationDays); nurseOlynyk.addCertification('Genetics'); console.log(nurseOlynyk.certifications); When we call extends in a class declaration, all of the parent methods are available to the child class.","title":"Inheritance I"},{"location":"Javascript-ES6-Notes/#static-methods","text":"Sometimes you will want a class to have methods that aren\u2019t available in individual instances, but that you can call directly from the class. class Animal { constructor(name) { this._name = name; this._behavior = 0; } static generateName() { const names = ['Angel', 'Spike', 'Buffy', 'Willow', 'Tara']; const randomNumber = Math.floor(Math.random()*5); return names[randomNumber]; } } // static generatePassword() { return (Math.floor(Math.random() * 10000)); }","title":"Static Methods"},{"location":"Javascript-ES6-Notes/#browser-compatibility-and-transpilation","text":"caniuse.com \u2014 A website that provides data on web browser compatibility for HTML, CSS, and JavaScript features. You will learn how to use it to look up ES6 feature support. Babel \u2014 A Javascript library that you can use to convert new, unsupported JavaScript (ES6), into an older version (ES5) that is recognized by most modern browsers.","title":"BROWSER COMPATIBILITY AND TRANSPILATION"},{"location":"Javascript-ES6-Notes/#transpilation-with-babel","text":"Although manual conversion only took you a few minutes, it is unsustainable as the size of the JavaScript file increases. Because ES6 is predictably backwards compatible, a collection of JavaScript programmers developed a JavaScript library called Babel that transpiles ES6 JavaScript to ES5. Transpilation is the process of converting one programming language to another","title":"Transpilation With Babel"},{"location":"Javascript-ES6-Notes/#transpile-es6-code-to-es5","text":"In the instructions below, you will pass JavaScript ES6 code to Babel, which will transpile it to ES5 and write it to a file in the lib directory. npm install babel-cli npm install babel-preset-env You can view the ES5 code in ./lib/main.js . You may need to refresh to see the newly created lib directory. npm init In the next five exercises you will learn how to setup a JavaScript project that transpiles code when you run npm run build from the root directory of a JavaScript project. The first step is to place your ES6 JavaScript file in a directory called src . From your root directory, the path to the ES6 file is ./src/main.js project |_ src |___ main.js Before we install Babel, we need to setup our project to use the node package manager (npm) . Developers use npm to access and manage Node packages. Node packages are directories that contain JavaScript code written by other developers. You can use these packages to reduce duplication of work and avoid bugs. Before we can add Babel to our project directory, we need to run npm init . The npm init command creates a package.json file in the root directory. Metadata \u2014 This includes a project title, description, authors, and more. A list of node packages required for the project \u2014 If another developer wants to run your project, npm looks inside package.json and downloads the packages in this list. Key-value pairs for command line scripts \u2014 You can use npm to run these shorthand scripts to perform some process. In a later exercise, we will add a script that runs Babel and transpiles ES6 to ES5. If you have Node installed on your computer, you can create a package.json file by typing npm init into the terminal. The terminal prompts you to fill in fields for the project\u2019s metadata (name, description, etc.) You are not required to answer the prompts, though we recommend at minimum, you add your own title and description. If you don\u2019t want to fill in a field, you can press enter. npm will leave fill these fields with default values or leave them empty when it creates the package.json file. After you run npm init your directory structure will contain the following files and folders: project |_ src |___ main.js |_ package.json npm adds the package.json file to the same level as the src directory. The babel-cli package includes command line Babel tools, and the babel-preset-env package has the code that maps any JavaScript feature, ES6 and above (ES6+), to ES5. $ npm install babel-cli -D $ npm install babel-preset-env -D The -D flag instructs npm to add each package to a property called devDependencies in package.json . Once the project\u2019s dependencies are listed in devDependencies , other developers can run your project without installing each package separately. Instead, they can simply run npm install \u2014 it instructs npm to look inside package.json and download all of the packages listed in devDependencies . Once you npm install packages, you can find the Babel packages and all their dependencies in the node_modules folder. The new directory structure contains the following: project |_ node_modules |___ .bin |___ ... |_ src |___ main.js |_ package.json","title":"transpile ES6 code to ES5"},{"location":"Javascript-ES6-Notes/#babelrc","text":"Now that you\u2019ve downloaded the Babel packages, you need to specify the version of the source JavaScript code. You can specify the initial JavaScript version inside of a file named .babelrc . In your root directory, you can run touch .babelrc to create this file. Your project directory contains the following folders and files: project |_ node_modules |___ .bin |___ ... |_ src |___ main.js |_ .babelrc |_ package.json Inside .babelrc you need to define the preset for your source JavaScript file. The preset specifies the version of your initial JavaScript file. Usually, you want to transpile JavaScript code from versions ES6 and later (ES6+) to ES5. From this point on, we will refer to our source code as ES6+, because Ecma introduces new syntax with each new version of JavaScript. To specify that we are transpiling code from an ES6+ source, we have to add the following JavaScript object into .babelrc : { presets : [ env ] } When you run Babel, it looks in .babelrc to determine the version of the initial JavaScript file. In this case, [\"env\"] instructs Babel to transpile any code from versions ES6 and later. There\u2019s one last step before we can transpile our code. We need to specify a script in package.json that initiates the ES6+ to ES5 transpilation. Inside of the package.json file, there is a property named \"scripts\" that holds an object for specifying command line shortcuts. It looks like this: ... scripts : { test : echo \\ Error: no test specified\\ exit 1 }, ... In the code above, the \"scripts\" property contains an object with one property called \"test\" . Below the \"test\" property, we will add a script that runs Babel like this: ... scripts : { test : echo \\ Error: no test specified\\ exit 1 , build : babel src -d lib } In the \"scripts\" object above, we add a property called \"build\" . The property\u2019s value, \"babel src -d lib\" , is a command line method that transpiles ES6+ code to ES5. Let\u2019s consider each argument in the method call: babel \u2014 The Babel command call responsible for transpiling code. src \u2014 Instructs Babel to transpile all JavaScript code inside the src directory. -d \u2014 Instructs Babel to write the transpiled code to a directory. lib \u2014 Babel writes the transpiled code to a directory called lib . In the next exercise, we\u2019ll run the babel src -d lib method to transpile our ES6+ code. { name : learning-babel , version : 1.0.0 , description : Use Babel to transpile JavaScript ES6 to ES5 , main : index.js , scripts : { test : echo \\ Error: no test specified\\ exit 1 }, author : , license : ISC , devDependencies : { babel-cli : ^6.26.0 , babel-preset-env : ^1.7.0 } build : babel src -d lib }","title":".babelrc"},{"location":"Javascript-ES6-Notes/#build","text":"We\u2019re ready to transpile our code! In the last exercise, we wrote the following script in package.json : build : babel src -d lib Now, we need to call \"build\" from the command line to transpile and write ES5 code to a directory called lib . From the command line, we type: npm run build The command above runs the build script in package.json . Babel writes the ES5 code to a file named main.js (it\u2019s always the same name as the original file), inside of a folder called lib . The resulting directory structure is: project |_ lib |___ main.js |_ node_modules |___ .bin |___ ... |_ src |___ main.js |_ .babelrc |_ package.json Notice, the directory contains a new folder named lib , with one file, called main.js . The npm run build command will transpile all JavaScript files inside of the src folder. This is helpful as you build larger JavaScript projects \u2014 regardless of the number of JavaScript files, you only need to run one command ( npm run build ) to transpile all of your code.","title":"Build"},{"location":"Javascript-ES6-Notes/#intermediate-javascript-modules","text":"","title":"INTERMEDIATE JAVASCRIPT MODULES"},{"location":"Javascript-ES6-Notes/#moduleexports","text":"We can get started with modules by defining a module in one file and making the module available for use in another file with Node.js module.exports syntax. Every JavaScript file run in Node has a local module object with an exports property used to define what should be exported from the file let Menu = {}; Menu.specialty = Roasted Beet Burger with Mint Sauce ; module.exports = Menu; Let\u2019s consider what this code means. let Menu = {}; creates the object that represents the module Menu . The statement contains an uppercase variable named Menu which is set equal to an empty object. Menu.specialty is defined as a property of the Menu module. We add data to the Menu object by setting properties on that object and giving the properties a value. \"Roasted Beet Burger with Mint Sauce\"; is the value stored in the Menu.specialty property. module.exports = Menu; exports the Menu object as a module. module is a variable that represents the module, and exports exposes the module as an object. The pattern we use to export modules is thus: Create an object to represent the module. Add properties or methods to the module object. Export the module with module.exports .","title":"module.exports"},{"location":"Javascript-ES6-Notes/#require","text":"To make use of the exported module and the behavior we define within it, we import the module into another file. In Node.js, use the require() function to import modules. For instance, say we want the module to control the menu\u2019s data and behavior, and we want a separate file to handle placing an order. We would create a separate file order.js and import the Menu module from menu.js to order.js using require() . require() takes a file path argument pointing to the original module file. In order.js we would write: const Menu = require('./menu.js'); function placeOrder() { console.log('My order is: ' + Menu.specialty); } placeOrder(); We can also wrap any collection of data and functions in an object, and export the object using module.exports . In menu.js , we could write: module.exports = { specialty: Roasted Beet Burger with Mint Sauce , getSpecialty: function() { return this.specialty; } };","title":"require()"},{"location":"Javascript-ES6-Notes/#export-default","text":"Node.js supports require() / module.exports , but as of ES6, JavaScript supports a new more readable and flexible syntax for exporting modules. These are usually broken down into one of two techniques, default export and named exports . We\u2019ll begin with the first syntax, default export. The default export syntax works similarly to the module.exports syntax, allowing us to export one module per file. let Menu = {}; export default Menu; export default uses the JavaScript export statement to export JavaScript objects, functions, and primitive data types. Menu refers to the name of the Menu object, the object that we are setting the properties on within our modules. When using ES6 syntax, we use export default in place of module.exports . Node.js doesn\u2019t support export default by default, so module.exports is usually used for Node.js development and ES6 syntax is used for front-end development. As with most ES6 features, it is common to transpile code since ES6 is not supported by all browsers . let Airplane = {}; Airplane.availableAirplanes = [ { name: 'AeroJet', fuelCapacity: 800 }, {name: 'SkyJet', fuelCapacity: 500 } ]; export default Airplane;","title":"Export default"},{"location":"Javascript-ES6-Notes/#import","text":"ES6 module syntax also introduces the import keyword for importing objects. In our order.js example, we import an object like this import Menu from './menu'; Within the body of the displayFuelCapacity function, use forEach() to iterate over the Airplane.availableAirplanes array. The forEach() should take an anonymous function as a parameter. We\u2019ll add more in the next step. Pass the anonymous function you created in the last step a parameter of element . import Airplane from './airplane'; function displayFuelCapacity() { Airplane.availableAirplanes.forEach(function(element) { console.log('Fuel Capacity of ' + element.name + ': ' + element.fuelCapacity); }); } displayFuelCapacity();","title":"Import"},{"location":"Javascript-ES6-Notes/#named-exports","text":"ES6 introduced a second common approach to export modules. In addition to export default , named exports allow us to export data through the use of variables. let specialty = ''; function isVegetarian() { }; function isLowSodium() { }; export { specialty, isVegetarian }; Example let availableAirplanes = [{ name: 'AeroJet', fuelCapacity: 800, availableStaff: ['pilots', 'flightAttendants', 'engineers', 'medicalAssistance', 'sensorOperators'], }, {name: 'SkyJet', fuelCapacity: 500, availableStaff: ['pilots', 'flightAttendants'] }]; let flightRequirements = { requiredStaff: 4, }; function meetsStaffRequirements(availableStaff, requiredStaff) { if (availableStaff.length = requiredStaff) { return true; } else { return false; } } export { availableAirplanes, flightRequirements, meetsStaffRequirements};","title":"Named Exports"},{"location":"Javascript-ES6-Notes/#named-imports","text":"To import objects stored in a variable, we use the import keyword and include the variables in a set of {} . import { specialty, isVegetarian } from './menu'; console.log(specialty); import {availableAirplanes, flightRequirements, meetsStaffRequirements} from './airplane'; function displayFuelCapacity() { } function displayStaffStatus() { availableAirplanes.forEach(function(element) { console.log(element.name + ' meets staff requirements: ' + meetsStaffRequirements(element.availableStaff, flightRequirements.requiredStaff) ); }); } displayStaffStatus();","title":"Named Imports"},{"location":"Javascript-ES6-Notes/#export-named-exports","text":"Named exports are also distinct in that they can be exported as soon as they are declared, by placing the keyword export in front of variable declarations. export let specialty = ''; export function isVegetarian() { }; function isLowSodium() { }; Example : export let availableAirplanes = [ {name: 'AeroJet', fuelCapacity: 800, availableStaff: ['pilots', 'flightAttendants', 'engineers', 'medicalAssistance', 'sensorOperators'], maxSpeed: 1200, minSpeed: 300 }, {name: 'SkyJet', fuelCapacity: 500, availableStaff: ['pilots', 'flightAttendants'], maxSpeed: 800, minSpeed: 200 } ]; export let flightRequirements = { requiredStaff: 4, requiredSpeedRange: 700 }; export function meetsSpeedRangeRequirements(maxSpeed, minSpeed, requiredSpeedRange) { let range = maxSpeed - minSpeed; if (range requiredSpeedRange) { return true; } else { return false; } }; export function meetsStaffRequirements(availableStaff, requiredStaff) { if (availableStaff.length = requiredStaff) { return true; } else { return false; } }","title":"Export Named Exports"},{"location":"Javascript-ES6-Notes/#import-named-imports","text":"To import variables that are declared, we simply use the original syntax that describes the variable name. In other words, exporting upon declaration does not have an impact on how we import the variables. import { specialty, isVegetarian } from 'menu';","title":"Import Named Imports"},{"location":"Javascript-ES6-Notes/#export-as","text":"Named exports also conveniently offer a way to change the name of variables when we export or import them. We can do this with the as keyword. let specialty = ''; let isVegetarian = function() { }; let isLowSodium = function() { }; export { specialty as chefsSpecial, isVegetarian as isVeg, isLowSodium };","title":"Export as"},{"location":"Javascript-ES6-Notes/#import-as","text":"To import named export aliases with the as keyword, we add the aliased variable in our import statement. import { chefsSpecial, isVeg } from './menu'; In orders.js We import chefsSpecial and isVeg from the Menu object. Here, note that we have an option to alias an object that was not previously aliased when exported. For example, the isLowSodium object that we exported could be aliased with the as keyword when imported: import {isLowSodium as saltFree} from 'Menu'; Another way of using aliases is to import the entire module as an alias: import * as Carte from './menu'; Carte.chefsSpecial; Carte.isVeg(); Carte.isLowSodium();","title":"Import as"},{"location":"Javascript-ES6-Notes/#combining-export-statements","text":"We can also use named exports and default exports together. In menu.js : let specialty = ''; function isVegetarian() { }; function isLowSodium() { }; function isGlutenFree() { }; export { specialty as chefsSpecial, isVegetarian as isVeg }; export default isGlutenFree;","title":"Combining Export Statements"},{"location":"Javascript-ES6-Notes/#combining-import-statements","text":"We can import the collection of objects and functions with the same data. We can use an import keyword to import both types of variables as such: import { specialty, isVegetarian, isLowSodium } from './menu'; import GlutenFree from './menu';","title":"Combining Import Statements"},{"location":"Javascript-ES6-Notes/#what-is-a-promise","text":"Promises are objects that represent the eventual outcome of an asynchronous operation. A Promise object can be in one of three states: Pending**: The initial state\u2014 the operation has not completed yet. Fulfilled : The operation has completed successfully and the promise now has a resolved value . For example, a request\u2019s promise might resolve with a JSON object as its value. Rejected : The operation has failed and the promise has a reason for the failure. This reason is usually an Error of some kind.","title":"What is a Promise?"},{"location":"Javascript-ES6-Notes/#constructing-a-promise-object","text":"Let\u2019s construct a promise! To create a new Promise object, we use the new keyword and the Promise constructor method: const executorFunction = (resolve, reject) = { }; const myFirstPromise = new Promise(executorFunction); The executor function has two function parameters, usually referred to as the resolve() and reject() functions. The resolve() and reject() functions aren\u2019t defined by the programmer. When the Promise constructor runs, JavaScript will pass its own resolve() and reject() functions into the executor function. resolve is a function with one argument. Under the hood, if invoked, resolve() will change the promise\u2019s status from pending to fulfilled , and the promise\u2019s resolved value will be set to the argument passed into resolve() . reject is a function that takes a reason or error as an argument. Under the hood, if invoked, reject() will change the promise\u2019s status from pending to rejected , and the promise\u2019s rejection reason will be set to the argument passed into reject() . Let\u2019s look at an example executor function in a Promise constructor: const executorFunction = (resolve, reject) = { if (someCondition) { resolve('I resolved!'); } else { reject('I rejected!'); } } const myFirstPromise = new Promise(executorFunction); Example : const inventory = { sunglasses: 1900, pants: 1088, bags: 1344 }; // Write your code below: const myExecutor=(resolve,reject)= { if(inventory.sunglasses 0) { resolve('Sunglasses order processed.'); } else { reject('That item is sold out.'); } }; function orderSunglasses() { return (new Promise(myExecutor)); } const orderPromise=orderSunglasses(); console.log(orderPromise);","title":"Constructing a Promise Object"},{"location":"Javascript-ES6-Notes/#the-node-settimeout-function","text":"Rather than constructing promises, you\u2019ll be handling Promise objects returned to you as the result of an asynchronous operation. These promises will start off pending but settle eventually. To accomplish this, we\u2019ll be using setTimeout() . setTimeout() is a Node API (a comparable API is provided by web browsers) that uses callback functions to schedule tasks to be performed after a delay. setTimeout() has two parameters: a callback function and a delay in milliseconds. const delayedHello = () = { console.log('Hi! This is an asynchronous greeting!'); }; setTimeout(delayedHello, 2000); Here, we invoke setTimeout() with the callback function delayedHello() and 2000 . In at least two seconds delayedHello() will be invoked. But why is it \u201cat least\u201d two seconds and not exactly two seconds? This delay is performed asynchronously\u2014the rest of our program won\u2019t stop executing during the delay. Asynchronous JavaScript uses something called the event-loop . After two seconds, delayedHello() is added to a line of code waiting to be run. Before it can run, any synchronous code from the program will run. Next, any code in front of it in the line will run. This means it might be more than two seconds before delayedHello() is actually executed. Let\u2019s look at how we\u2019ll be using setTimeout() to construct asynchronous promises: const returnPromiseFunction = () = { return new Promise((resolve, reject) = { setTimeout(( ) = {resolve('I resolved!')}, 1000); }); }; const prom = returnPromiseFunction(); In the example code, we invoked returnPromiseFunction() which returned a promise. We assigned that promise to the variable prom . Similar to the asynchronous promises you may encounter in production, prom will initially have a status of pending.","title":"The Node setTimeout() Function"},{"location":"Javascript-ES6-Notes/#consuming-promises","text":"The initial state of an asynchronous promise is pending but we have a guarantee that it will settle. How do we tell the computer what should happen then? Promise objects come with an aptly named .then() method. It allows us to say, \u201cI have a promise, when it settles, then here\u2019s what I want to happen\u2026 .then() is a higher-order function\u2014 it takes two callback functions as arguments. We refer to these callbacks as handlers .","title":"Consuming Promises"},{"location":"Javascript-ES6-Notes/#the-onfulfilled-and-onrejected-functions","text":"To handle a \u201csuccessful\u201d promise, or a promise that resolved, we invoke .then() on the promise, passing in a success handler callback function: const prom = new Promise((resolve, reject) = { resolve('Yay!'); }); const handleSuccess = (resolvedValue) = { console.log(resolvedValue); }; prom.then(handleSuccess); // Prints: 'Yay!' With typical promise consumption, we won\u2019t know whether a promise will resolve or reject, so we\u2019ll need to provide the logic for either case. We can pass both an onFulfilled and onRejected callback to .then() . let prom = new Promise((resolve, reject) = { let num = Math.random(); if (num .5 ){ resolve('Yay!'); } else { reject('Ohhh noooo!'); } }); const handleSuccess = (resolvedValue) = { console.log(resolvedValue); }; const handleFailure = (rejectionReason) = { console.log(rejectionReason); }; prom.then(handleSuccess, handleFailure); checkInventory(order).then(handleSuccess,handleFailure);","title":"The onFulfilled and onRejected Functions"},{"location":"Javascript-ES6-Notes/#using-catch-with-promises","text":"One way to write cleaner code is to follow a principle called separation of concerns . Separation of concerns means organizing code into distinct sections each handling a specific task. It enables us to quickly navigate our code and know where to look if something isn\u2019t working. prom .then((resolvedValue) = { console.log(resolvedValue); }) .then(null, (rejectionReason) = { console.log(rejectionReason); }); Since JavaScript doesn\u2019t mind whitespace, we follow a common convention of putting each part of this chain on a new line to make it easier to read. To create even more readable code, we can use a different promise function: .catch() . The .catch() function takes only one argument, onRejected . In the case of a rejected promise, this failure handler will be invoked with the reason for rejection. Using .catch() accomplishes the same thing as using a .then() with only a failure handler. Let\u2019s look at an example using .catch() : js prom .then((resolvedValue) = { console.log(resolvedValue); }) .catch((rejectionReason) = { console.log(rejectionReason); }); Example : checkInventory(order).then(handleSuccess).catch(handleFailure);","title":"Using catch() with Promises"},{"location":"Javascript-ES6-Notes/#chaining-multiple-promises","text":"One common pattern we\u2019ll see with asynchronous programming is multiple operations which depend on each other to execute or that must be executed in a certain order. We might make one request to a database and use the data returned to us to make another request and so on This process of chaining promises together is called composition . Promises are designed with composition in mind! Here\u2019s a simple promise chain in code: firstPromiseFunction() .then((firstResolveVal) = { return secondPromiseFunction(firstResolveVal); }) .then((secondResolveVal) = { console.log(secondResolveVal); }); Example : checkInventory(order) .then((resolvedValueArray) = { // Write the correct return statement here: return processPayment(resolvedValueArray); }) .then((resolvedValueArray) = { // Write the correct return statement here: return shipOrder(resolvedValueArray); }) .then((successMessage) = { console.log(successMessage); }) .catch((errorMessage) = { console.log(errorMessage); });","title":"Chaining Multiple Promises"},{"location":"Javascript-ES6-Notes/#avoiding-common-mistakes","text":"Promise composition allows for much more readable code than the nested callback syntax that preceded it. However, it can still be easy to make mistakes. In this exercise, we\u2019ll go over two common mistakes with promise composition. Mistake 1: Nesting promises instead of chaining them. returnsFirstPromise() .then((firstResolveVal) = { return returnsSecondValue(firstResolveVal) .then((secondResolveVal) = { console.log(secondResolveVal); }) }) Instead of having a clean chain of promises, we\u2019ve nested the logic for one inside the logic of the other. Imagine if we were handling five or ten promises! Mistake 2: Forgetting to return a promise. returnsFirstPromise() .then((firstResolveVal) = { returnsSecondValue(firstResolveVal) }) .then((someVal) = { console.log(someVal); })","title":"Avoiding Common Mistakes"},{"location":"Javascript-ES6-Notes/#using-promiseall","text":"When done correctly, promise composition is a great way to handle situations where asynchronous operations depend on each other or execution order matters. What if we\u2019re dealing with multiple promises, but we don\u2019t care about the order? Let\u2019s think in terms of cleaning again. To maximize efficiency we should use concurrency , multiple asynchronous operations happening together. With promises, we can do this with the function Promise.all() . If every promise in the argument array resolves, the single promise returned from Promise.all() will resolve with an array containing the resolve value from each promise in the argument array. If any promise from the argument array rejects, the single promise returned from Promise.all() will immediately reject with the reason that promise rejected. This behavior is sometimes referred to as failing fast . let myPromises = Promise.all([returnsPromOne(), returnsPromTwo(), returnsPromThree()]); myPromises .then((arrayOfValues) = { console.log(arrayOfValues); }) .catch((rejectionReason) = { console.log(rejectionReason); }); We declare myPromises assigned to invoking Promise.all() . We invoke Promise.all() with an array of three promises\u2014 the returned values from functions. We invoke .then() with a success handler which will print the array of resolved values if each promise resolves successfully. We invoke .catch() with a failure handler which will print the first rejection message if any promise rejects.","title":"Using Promise.all()"},{"location":"Javascript-ES6-Notes/#the-async-keyword","text":"The async keyword is used to write functions that handle asynchronous actions. We wrap our asynchronous logic inside a function prepended with the async keyword. Then, we invoke that function. const myFunc = async () = { // Function body here }; myFunc(); async functions always return a promise. This means we can use traditional promise syntax, like .then() and .catch with our async functions. An async function will return in one of three ways: If there\u2019s nothing returned from the function, it will return a promise with a resolved value of undefined . If there\u2019s a non-promise value returned from the function, it will return a promise resolved to that value. If a promise is returned from the function, it will simply return that promise async function fivePromise() { return 5; } fivePromise() .then(resolvedValue = { console.log(resolvedValue); }) // Prints 5","title":"The async Keyword"},{"location":"Javascript-ES6-Notes/#the-await-operator","text":"async functions are almost always used with the additional keyword await inside the function body. The await keyword can only be used inside an async function await is an operator: it returns the resolved value of a promise Since promises resolve in an indeterminate amount of time, await halts, or pauses, the execution of our async function until a given promise is resolved. ```js async function asyncFuncExample(){ let resolvedValue = await myPromise(); console.log(resolvedValue); } asyncFuncExample(); // Prints: I am resolved now! ``` Now we\u2019ll write two async functions which invoke myPromise() : ```js async function noAwait() { let value = myPromise(); console.log(value); } async function yesAwait() { let value = await myPromise(); console.log(value); } noAwait(); // Prints: Promise { } yesAwait(); // Prints: Yay, I resolved! ``` In the first async function, noAwait() , we left off the await keyword before myPromise() . In the second, yesAwait() , we included it. The noAwait() function logs Promise { } to the console. Without the await keyword, the function execution wasn\u2019t paused. The console.log() on the following line was executed before the promise had resolved. Remember that the await operator returns the resolved value of a promise. When used properly in yesAwait() , the variable value was assigned the resolved value of the myPromise() promise, whereas in noAwait() , value was assigned the promise object itself. #### Handling Dependent Promises The true beauty of async...await is when we have a series of asynchronous actions which depend on one another. For example, we may make a network request based on a query to a database. In that case, we would need to wait to make the network request until we had the results from the database. With native promise syntax, we use a chain of .then() functions making sure to return correctly each one: js function nativePromiseVersion() { returnsFirstPromise() .then((firstValue) = { console.log(firstValue); return returnsSecondPromise(firstValue); }) .then((secondValue) = { console.log(secondValue); }); } Let\u2019s break down what\u2019s happening in the nativePromiseVersion() function: Within our function we use two functions which return promises: returnsFirstPromise() and returnsSecondPromise() . We invoke returnsFirstPromise() and ensure that the first promise resolved by using .then() . In the callback of our first .then() , we log the resolved value of the first promise, firstValue , and then return returnsSecondPromise(firstValue) . We use another .then() to print the second promise\u2019s resolved value to the console. Here\u2019s how we\u2019d write an async function to accomplish the same thing: js async function asyncAwaitVersion() { let firstValue = await returnsFirstPromise(); console.log(firstValue); let secondValue = await returnsSecondPromise(firstValue); console.log(secondValue); }","title":"The await Operator"},{"location":"Javascript-ES6-Notes/#handling-errors","text":"With async...await , we use try...catch statements for error handling. By using this syntax, not only are we able to handle errors in the same way we do with synchronous code, but we can also catch both synchronous and asynchronous errors. This makes for easier debugging! async function usingTryCatch() { try { let resolveValue = await asyncFunction('thing that will fail'); let secondValue = await secondAsyncFunction(resolveValue); } catch (err) { // Catches any errors in the try block console.log(err); } } usingTryCatch();","title":"Handling Errors"},{"location":"Javascript-ES6-Notes/#handling-independent-promises","text":"Remember that await halts the execution of our async function. This allows us to conveniently write synchronous-style code to handle dependent promises. But what if our async function contains multiple promises which are not dependent on the results of one another to execute async function serveDinner() { const vegetablePromise = steamBroccoli(); const starchPromise = cookRice(); const proteinPromise = bakeChicken(); const sidePromise = cookBeans(); console.log(`Dinner is served. We're having ${await vegetablePromise}, ${await starchPromise}, ${await proteinPromise}, and ${await sidePromise}.`); } serveDinner();","title":"Handling Independent Promises"},{"location":"Javascript-ES6-Notes/#await-promiseall","text":"Another way to take advantage of concurrency when we have multiple promises which can be executed simultaneously is to await a Promise.all() async function asyncPromAll() { const resultArray = await Promise.all([asyncTask1(), asyncTask2(), asyncTask3(), asyncTask4()]); for (let i = 0; i resultArray.length; i++){ console.log(resultArray[i]); } } Promise.all() allows us to take advantage of asynchronicity\u2014 each of the four asynchronous tasks can process concurrently. Promise.all() also has the benefit of failing fast , meaning it won\u2019t wait for the rest of the asynchronous actions to complete once any one has rejected. As soon as the first promise in the array rejects, the promise returned from Promise.all() will reject with that reason. As it was when working with native promises, Promise.all() is a good choice if multiple asynchronous tasks are all required, but none must wait for any other before executing. async function serveDinnerAgain(){ let foodArray = await Promise.all([steamBroccoli(), cookRice(), bakeChicken(), cookBeans()]); console.log(`Dinner is served. We're having ${foodArray[0]}, ${foodArray[1]}, ${foodArray[2]}, and ${foodArray[3]}.`) } serveDinnerAgain()","title":"Await Promise.all()"},{"location":"Learning_System_Design/","text":"System Design from Scratch Chapter 1: Introduction to System Design 1.1 Before designing a system, below are the topics that we should be considering before designing any system. 1.1. Features 1.1.2. Define API's 1.1.3. Availability 1.1.4. Latency 1.1.5. Scalability 1.1.6. Durability 1.1.7. Class Diagram 1.1.8. Security and Privacy 1.1.9. Cost effective 1.1.1 Features Before designing a system, be clear about the features of the system. If you are appearing for an interview, ask the features to be included to the interviewer. For example: If you are to develop a chat application, you need to ask if there is only one to one chat or group chat. The level of security required and other features required. 1.1.2 Define API's Once we define the features, we need to come up with the API's. How many API's are needed, when to call those API's and who will call the APIs. 1.1.3 Availability Once we decide upon the API, we need to decide about the availability of the system. Particularly we need to decide upon how available the service should be. For example: If a service goes down or a data center goes down, what should be the state of the system. 1.1.4 Latency We need to decide upon how fast the system should be. If it is a chat application, the system should be very fast and responsive. Then we need to improve the latency of the system. One way to improve the latency is by using cache system, CDN. If it is a mail system, then it can be less responsive than our chat application. 1.1.5 Scalability Once we decide on latency, we need to think about the scalability of the system. Especially on how the system will behave when there are 100 users, or 1000 users, or 1M users. 1.1.6 Durability Now we should think about how durable the system should be. If the system you are designing is a code backup repository service, then the system should be highly durable and the associated security features needed for that data needs to be taken care. 1.1.7 Class Diagram If you are needed to design a parking lot or an elevator system, you need to design the class and how multiple classes interact with each other. Here the interviewer will be interested in OOP concepts and how effectively you use OOP concepts. 1.1.8 Security and Privacy This is important when we are designing an authentication or credit card storage system. 1.1.9 Cost effective Once we decide upon all the above features, we need to think how cost effective the system will be. Is there any alternative system available that are more cost effective? 1.2 Below are the topics to be known before designing a system 1.2.1. Vertical and Horizontal Scaling 1.2.2. CAP Theorem 1.2.3. ACID and BASE properties 1.2.4. Partitioning or Sharding data 1.2.5. consistent hashing 1.2.6. Strong vs Eventual Consistency 1.2.7. Optimistic vs pessimist locking 1.2.8. Relational vs No SQL DB 1.2.9. Caching 1.2.10. Datacenters / Racks/ Hosts 1.2.11. CPU/Memory/Network Bandwidth 1.2.12. Random vs sequential read/write on disks 1.2.13. http vs http2 vs web sockets 1.2.14. TCP/IP Model 1.2.15. IPv4 vs IPv6 1.2.16. TCP vs UDP 1.2.17. DNS lookup 1.2.18. HTTPS vs TLS 1.2.19. Certificate Authority 1.2.20. Load Balancers 1.2.21. CDN's 1.2.22. Design Pattern and Object Oriented design 1.2.23. Virtual Machines and containers 1.2.24. Publisher-Subscriber 1.2.25. Map reduce 1.2.26. Multithreading, Concurrency, locks, Synchronization. 1.2.1 Vertical and Horizontal Scaling If we want to serve more users, then we need to scale our system. We can do it in 2 ways : Vertical Scaling: It refers to adding more memory, RAM, increase the processor speed all in a single host or a computer. Horizontal Scaling: It refers to adding more hosts or computers as the number of users increases. 1.2.2 CAP Theorem CAP: Consistency, Availability and Partition Tolerance. Consistency: It refers to the read is the most recent write. Availability: It refers to, when user asks for a request, the system should be available to respond. * Partition Tolerance: The system should be able to function even if any one node or part of the system fails. CAP theorem says that it is only possible to achieve any 2 out of 3 things. 1.2.3 ACID and BASE properties ACID: Atomicity Consistency Isolation Durability Acid is for Relational Database. BASE: Basically Available Soft-state Event, Base is for No SQL DB. 1.2.4 Partitioning or Sharding data If we have huge amount of data, it is not possible to store all the data in a single DB system. Hence we need to store them in a different systems(nodes). Hence now Sharding of data comes to play. We need to choose to partition the data such that every node of DB is responsible for some of the data of that large amount of data 1.2.5 Consistent hashing Consistent hashing is a way of organizing the key value pair for distributed data. So that when we want to scale the system, data changes due to additional keys will be minimum. 1.2.6 Strong vs Eventual Consistency Strong consistency refers to the read will have the latest write. Eventual consistency refers that the read will have some write, but eventually will have the latest write. Strong consistency is used in relational DB. No SQL DB can be configured with Strong or Eventual Consistency. 1.2.7 Optimistic vs pessimist locking In optimist locking, before committing any transaction we check and see if no other system is using the resource. In pessimist locking, we acquire lock before committing any transaction. 1.2.8 Relational vs No SQL DB Relational DB will provide ACID properties, but No SQL DB provides high availability and is highly scalable. Hence Depending on the system, we check and use which fits better. 1.2.9 Caching Caching is frequently used in web-browser, it will store most frequently used data such as css files. Hence when you visit the website, it can be accessed quickly. 1.2.10 Datacenters / Racks/ Hosts Server: A server is a computer, that is used to serve the requests. Most of the time, a server will serve only one type of request. There are different types of servers like Web server, Proxy server, mail server. Racks: Racks is a collection of servers. Datacenter: A datacenter is a collection of multiple networking components like servers, routers, switches, firewalls inside a building. Datacenter can be a dedicated building or inside a room. To support these multiple servers and other networking components, they need to be kept cool, hence they need into kept in a AC room. Cluster: It is a collection of datacenter. Hosts: A host is a computer device; it is used to communicate to another hosts on the network. 1.2.11 CPU/Memory/Network Bandwidth As all the above resources are costly and are limited, they should be effectively utilized. Many big companies, design their own datacenter to further reduce energy costs. 1.2.12 Random vs sequential read/write on disks Sequential read and write are always faster than random read and writes on the disk. 1.2.13 http vs http2 vs web sockets http: It is a request, reply architecture between client and server. http2: It can do multiple requests over a single connection web-sockets: It is fully bidirectional communication between client and server. 10.2.14 TCP/IP Model TCP/IP model is used for communicating between different computers or applications over the internet. Any device that is connected to open internet should agree to TCP/IP model. It has 4 layers: * Layer 4: Application Layer * Layer 3: Transport Layer * Layer 2: Internet Layer * Layer 1: Link Layer All the 4 layers performs different functions. 10.2.15 IPv4 vs IPv6 Internet Protocol addressing is a way that 2 computers communicate with each other over the internet. Each device that is connected to internet will have an IP address attached to it. * IPv4: Internet Protocol version 4. It has 2\u00b3\u00b2 ip address in total. * IPv6: Internet Protocol version 6, as IPv4 address is running out, the technology is moving towards IPv6. It has 2\u00b9\u00b2\u2078 address. 10.2.16 TCP vs UDP These 2 protocols are used to transfer packets over the internet. * TCP: It stands for Transmission Control Protocol. It is connection oriented protocol. It guarantees delivery of the packet to the required recipient. Retransmission of lost packets can be done in TCP. * UDP: It stands for User Datagram Protocol. It is a connection less protocol. The packet reaching to the destination cannot be guaranteed. It is faster than TCP. 10.2.17 DNS lookup Domain Name Lookup service. When you type \"harshityadav.in \", then the request goes to DNS which does the translation of the address into an IP address. 10.2.18 HTTPS vs TLS TLS stands for Transport Layer Security, used to secure communication between client and server. When TLS is used with HTTP, it will become HTTPS. 10.2.19 Certificate Authority A certificate authority is an entity that issues digital certificates. A CA is tasked with identifying the website and ensuring safe data transfer between website and its clients. 10.2.20 Load Balancers Once our application gets more number of visitors, we need to include more application servers to serve those customers. So we place those application servers behind a load-balancer. A load balancer is a server that will be the first point of contact of user request, based on some model it will distribute those requests evenly among the available application server such that no server is overloaded. Load balancer server will also provide security for DDOS attacks, as those attacks will hit load balancer and application servers will be safe. 10.2.21 CDN's CDN stands for content delivery network. It will help to improve the performance and latency by keeping the requested data near to the user. 10.2.22 Design Pattern and Object Oriented design When developing/coding a system, it is important to follow coding standards. Design pattern will give an implementation idea for commonly occurring problems. Some of the design pattern to know are: Singleton Design Pattern: Here only one instance of the class will be available. Adapter Design Pattern: Here two incompatible elements can transfer data with adapter design pattern. Proxy Design Pattern: It is used in place of another component that can be delivered later. Factory Design Pattern: The concept is to create an object without exposing logic to the client. Most of the system today will follow Object Oriented Design. This design helps to reuse the same component multiple times, easy to debug and fix the issues. And has many advantages over procedure oriented design. 10.2.23 Virtual Machines and containers Virtual Machine is a software, that gives the user a feel that he is the owner of the hardware. But in reality that hardware will be shared by many users. Containers: It is a way to run an application along with it's dependency in an isolated environment. 10.2.24 Publisher-Subscriber Publisher Subscriber model is also called as Pub-Sub model in short. In this model, a publisher will broadcast the message without the knowledge of subscriber. A subscriber will be always listening to broadcast topic without the knowledge of who is publishing the message. 10.2.25 Map reduce This concept is used to do distributed and parallel processing of big data. 10.2.26 Multithreading, Concurrency, locks, Synchronization. These concepts are important in multithreading. In Java it comes built-in, while other languages like \"c\" need to depend upon platform for implementation. Topic 1: Microservices Architecture Topic 1: Microservices Architecture Before the introduction of Micro Architecture, there was a Monolithic Architecture. A Monolithic Architecture is like a big box where all the software components are assembled in a tightly packed manner. It means that all the components of a Monolithic Architecture are interconnected and inter dependent. For example: If you visit an online shopping website, they will be having: Products service, where customers can look at the product. Customer service, where customers can seek help to resolve any issues. Cart service, where customers can buy the product. So when you deploy the application, it will be deployed as a single instance that will be running all the time. For scaling them, we shall run multiple instances of these application and keep them behind the load balancer. The only advantage of these kind of application is the deployment will be easy and while scaling the application, you need to run multiple instances of the application which is easy. But there are many disadvantages for this kind of architecture. Some of them are displayed below: When you have a very large application, it will become difficult to modify and deploy the application without knowing all the dependencies. The development and maintenance of the application will be difficult. As the application size is large, a simple bug fix will require complete analysis of the application. The application memory consumption will be unfair. For example, a chat application will require less amount of CPU usage, but a payment checkout will require quick and immediate CPU resource. But in these kind of application, we cannot divide the CPU resources. Single point of failure. Because all of the application are tightly dependent, if one of the application goes down, entire application will be effected. Hence it will make the application highly unstable. Since all the modules are interdependent, adding new module or adding a new feature for existing module will become difficult. Hence we shifted towards Microservices Architecture. What is a Microservices Architecture? This architecture is a collection of small autonomous services that together form a complete application. Here all applications are independent of each other. They communicate through API provided by the applications. Below are some of the advantages of using Microservices Architecture: Each Microservices can focus on one business logic If any one of the service is down, it will not affect other services, as they are independent of each other. Development and bug fixing is easy, because the developer will focus on only one module. Instead of having a single database, each Microservices will be having its own database, avoiding single point of failure. Below are some of the features of Microservices: 1. Decoupling: The modules can be easily build, scaled and deployed. 2. Autonomy: Teams can work independently 3. Continuous Delivery As we have made all the modules as Microservices, each module will communicate with the API provided by other application. Components involved in Microservice Architecture: API gateway Load Balancer Database Service discovery (Link) Open-source tools for developing Microservices: Operating System: CentOS Container: Docker Scheduler: Kubernates Monitoring: Prometheus Messaging: rabbitMQ API: POSTMAN Programming Language: Elixir Below are some of the companies using Microservices: Twitter Netflix Amazon Paypal Topic 2: Data Sharding Before going to data sharding, let us understand Single storage and why we moved to data sharding. Before introduction of distributed systems, we had a single master storage. where in all the data will be dumped in to single DB and all the application traffic used to refer to that database. But as the application traffic increased, and usually we have more reads than writes, it made more sense to add more database to accommodate more reads. Hence we do read replication. In this model, we take two to three copy of the original database and redirect the traffic to those databases. Usually in this model, the write will go the master (original database) and then the latest data will be copied to other database. But in the above model, we have solved read delay but we introduced one potential issue. The issue is consistency, how to make use the read is the latest write? So how do we solve this? We solve the above consist any issue by Data Sharding. Data sharding is a way to break a large database into smaller DB's, in such a way that we maintain consistency in the database. How do we do this? Data sharding can be done in a very simple way. Consider we have 3 servers. We break the key into 3 different parts and assign each set of keys to different database. For example, we have keys from A to Z. we divide the keys into 3 parts, and assign to the serevers below: Server Key Server 1 A to F Server 2 G to N Server 3 O to z Hence we shard the data into multiple server, there by increasing the consistency. And each one of the databases will have their own replicated cluster. Above method of Data Sharding is called as Index based partitioning","title":"System Design"},{"location":"Learning_System_Design/#system-design-from-scratch","text":"","title":"System Design from\u00a0Scratch"},{"location":"Learning_System_Design/#chapter-1-introduction-to-system-design","text":"1.1 Before designing a system, below are the topics that we should be considering before designing any system. 1.1. Features 1.1.2. Define API's 1.1.3. Availability 1.1.4. Latency 1.1.5. Scalability 1.1.6. Durability 1.1.7. Class Diagram 1.1.8. Security and Privacy 1.1.9. Cost effective","title":"Chapter 1: Introduction to System\u00a0Design"},{"location":"Learning_System_Design/#111-features","text":"Before designing a system, be clear about the features of the system. If you are appearing for an interview, ask the features to be included to the interviewer. For example: If you are to develop a chat application, you need to ask if there is only one to one chat or group chat. The level of security required and other features required.","title":"1.1.1 Features"},{"location":"Learning_System_Design/#112-define-apis","text":"Once we define the features, we need to come up with the API's. How many API's are needed, when to call those API's and who will call the APIs.","title":"1.1.2 Define\u00a0API's"},{"location":"Learning_System_Design/#113-availability","text":"Once we decide upon the API, we need to decide about the availability of the system. Particularly we need to decide upon how available the service should be. For example: If a service goes down or a data center goes down, what should be the state of the system.","title":"1.1.3 Availability"},{"location":"Learning_System_Design/#114-latency","text":"We need to decide upon how fast the system should be. If it is a chat application, the system should be very fast and responsive. Then we need to improve the latency of the system. One way to improve the latency is by using cache system, CDN. If it is a mail system, then it can be less responsive than our chat application.","title":"1.1.4 Latency"},{"location":"Learning_System_Design/#115-scalability","text":"Once we decide on latency, we need to think about the scalability of the system. Especially on how the system will behave when there are 100 users, or 1000 users, or 1M users.","title":"1.1.5 Scalability"},{"location":"Learning_System_Design/#116-durability","text":"Now we should think about how durable the system should be. If the system you are designing is a code backup repository service, then the system should be highly durable and the associated security features needed for that data needs to be taken care.","title":"1.1.6 Durability"},{"location":"Learning_System_Design/#117-class-diagram","text":"If you are needed to design a parking lot or an elevator system, you need to design the class and how multiple classes interact with each other. Here the interviewer will be interested in OOP concepts and how effectively you use OOP concepts.","title":"1.1.7 Class\u00a0Diagram"},{"location":"Learning_System_Design/#118-security-and-privacy","text":"This is important when we are designing an authentication or credit card storage system.","title":"1.1.8 Security and\u00a0Privacy"},{"location":"Learning_System_Design/#119-cost-effective","text":"Once we decide upon all the above features, we need to think how cost effective the system will be. Is there any alternative system available that are more cost effective?","title":"1.1.9 Cost effective"},{"location":"Learning_System_Design/#12-below-are-the-topics-to-be-known-before-designing-a-system","text":"1.2.1. Vertical and Horizontal Scaling 1.2.2. CAP Theorem 1.2.3. ACID and BASE properties 1.2.4. Partitioning or Sharding data 1.2.5. consistent hashing 1.2.6. Strong vs Eventual Consistency 1.2.7. Optimistic vs pessimist locking 1.2.8. Relational vs No SQL DB 1.2.9. Caching 1.2.10. Datacenters / Racks/ Hosts 1.2.11. CPU/Memory/Network Bandwidth 1.2.12. Random vs sequential read/write on disks 1.2.13. http vs http2 vs web sockets 1.2.14. TCP/IP Model 1.2.15. IPv4 vs IPv6 1.2.16. TCP vs UDP 1.2.17. DNS lookup 1.2.18. HTTPS vs TLS 1.2.19. Certificate Authority 1.2.20. Load Balancers 1.2.21. CDN's 1.2.22. Design Pattern and Object Oriented design 1.2.23. Virtual Machines and containers 1.2.24. Publisher-Subscriber 1.2.25. Map reduce 1.2.26. Multithreading, Concurrency, locks, Synchronization.","title":"1.2 Below are the topics to be known before designing a\u00a0system"},{"location":"Learning_System_Design/#121-vertical-and-horizontal-scaling","text":"If we want to serve more users, then we need to scale our system. We can do it in 2 ways : Vertical Scaling: It refers to adding more memory, RAM, increase the processor speed all in a single host or a computer. Horizontal Scaling: It refers to adding more hosts or computers as the number of users increases.","title":"1.2.1 Vertical and Horizontal Scaling"},{"location":"Learning_System_Design/#122-cap-theorem","text":"CAP: Consistency, Availability and Partition Tolerance. Consistency: It refers to the read is the most recent write. Availability: It refers to, when user asks for a request, the system should be available to respond. * Partition Tolerance: The system should be able to function even if any one node or part of the system fails. CAP theorem says that it is only possible to achieve any 2 out of 3 things.","title":"1.2.2 CAP\u00a0Theorem"},{"location":"Learning_System_Design/#123-acid-and-base-properties","text":"ACID: Atomicity Consistency Isolation Durability Acid is for Relational Database. BASE: Basically Available Soft-state Event, Base is for No SQL DB.","title":"1.2.3 ACID and BASE properties"},{"location":"Learning_System_Design/#124-partitioning-or-sharding-data","text":"If we have huge amount of data, it is not possible to store all the data in a single DB system. Hence we need to store them in a different systems(nodes). Hence now Sharding of data comes to play. We need to choose to partition the data such that every node of DB is responsible for some of the data of that large amount of data","title":"1.2.4 Partitioning or Sharding\u00a0data"},{"location":"Learning_System_Design/#125-consistent-hashing","text":"Consistent hashing is a way of organizing the key value pair for distributed data. So that when we want to scale the system, data changes due to additional keys will be minimum.","title":"1.2.5 Consistent hashing"},{"location":"Learning_System_Design/#126-strong-vs-eventual-consistency","text":"Strong consistency refers to the read will have the latest write. Eventual consistency refers that the read will have some write, but eventually will have the latest write. Strong consistency is used in relational DB. No SQL DB can be configured with Strong or Eventual Consistency.","title":"1.2.6 Strong vs Eventual Consistency"},{"location":"Learning_System_Design/#127-optimistic-vs-pessimist-locking","text":"In optimist locking, before committing any transaction we check and see if no other system is using the resource. In pessimist locking, we acquire lock before committing any transaction.","title":"1.2.7 Optimistic vs pessimist locking"},{"location":"Learning_System_Design/#128-relational-vs-no-sql-db","text":"Relational DB will provide ACID properties, but No SQL DB provides high availability and is highly scalable. Hence Depending on the system, we check and use which fits better.","title":"1.2.8 Relational vs No SQL\u00a0DB"},{"location":"Learning_System_Design/#129-caching","text":"Caching is frequently used in web-browser, it will store most frequently used data such as css files. Hence when you visit the website, it can be accessed quickly.","title":"1.2.9 Caching"},{"location":"Learning_System_Design/#1210-datacenters-racks-hosts","text":"Server: A server is a computer, that is used to serve the requests. Most of the time, a server will serve only one type of request. There are different types of servers like Web server, Proxy server, mail server. Racks: Racks is a collection of servers. Datacenter: A datacenter is a collection of multiple networking components like servers, routers, switches, firewalls inside a building. Datacenter can be a dedicated building or inside a room. To support these multiple servers and other networking components, they need to be kept cool, hence they need into kept in a AC room. Cluster: It is a collection of datacenter. Hosts: A host is a computer device; it is used to communicate to another hosts on the network.","title":"1.2.10 Datacenters / Racks/\u00a0Hosts"},{"location":"Learning_System_Design/#1211-cpumemorynetwork-bandwidth","text":"As all the above resources are costly and are limited, they should be effectively utilized. Many big companies, design their own datacenter to further reduce energy costs.","title":"1.2.11 CPU/Memory/Network Bandwidth"},{"location":"Learning_System_Design/#1212-random-vs-sequential-readwrite-on-disks","text":"Sequential read and write are always faster than random read and writes on the disk.","title":"1.2.12 Random vs sequential read/write on\u00a0disks"},{"location":"Learning_System_Design/#1213-http-vs-http2-vs-web-sockets","text":"http: It is a request, reply architecture between client and server. http2: It can do multiple requests over a single connection web-sockets: It is fully bidirectional communication between client and server.","title":"1.2.13 http vs http2 vs web sockets"},{"location":"Learning_System_Design/#10214-tcpip-model","text":"TCP/IP model is used for communicating between different computers or applications over the internet. Any device that is connected to open internet should agree to TCP/IP model. It has 4 layers: * Layer 4: Application Layer * Layer 3: Transport Layer * Layer 2: Internet Layer * Layer 1: Link Layer All the 4 layers performs different functions.","title":"10.2.14 TCP/IP\u00a0Model"},{"location":"Learning_System_Design/#10215-ipv4-vs-ipv6","text":"Internet Protocol addressing is a way that 2 computers communicate with each other over the internet. Each device that is connected to internet will have an IP address attached to it. * IPv4: Internet Protocol version 4. It has 2\u00b3\u00b2 ip address in total. * IPv6: Internet Protocol version 6, as IPv4 address is running out, the technology is moving towards IPv6. It has 2\u00b9\u00b2\u2078 address.","title":"10.2.15 IPv4 vs\u00a0IPv6"},{"location":"Learning_System_Design/#10216-tcp-vs-udp","text":"These 2 protocols are used to transfer packets over the internet. * TCP: It stands for Transmission Control Protocol. It is connection oriented protocol. It guarantees delivery of the packet to the required recipient. Retransmission of lost packets can be done in TCP. * UDP: It stands for User Datagram Protocol. It is a connection less protocol. The packet reaching to the destination cannot be guaranteed. It is faster than TCP.","title":"10.2.16 TCP vs\u00a0UDP"},{"location":"Learning_System_Design/#10217-dns-lookup","text":"Domain Name Lookup service. When you type \"harshityadav.in \", then the request goes to DNS which does the translation of the address into an IP address.","title":"10.2.17 DNS\u00a0lookup"},{"location":"Learning_System_Design/#10218-https-vs-tls","text":"TLS stands for Transport Layer Security, used to secure communication between client and server. When TLS is used with HTTP, it will become HTTPS.","title":"10.2.18 HTTPS vs\u00a0TLS"},{"location":"Learning_System_Design/#10219-certificate-authority","text":"A certificate authority is an entity that issues digital certificates. A CA is tasked with identifying the website and ensuring safe data transfer between website and its clients.","title":"10.2.19 Certificate Authority"},{"location":"Learning_System_Design/#10220-load-balancers","text":"Once our application gets more number of visitors, we need to include more application servers to serve those customers. So we place those application servers behind a load-balancer. A load balancer is a server that will be the first point of contact of user request, based on some model it will distribute those requests evenly among the available application server such that no server is overloaded. Load balancer server will also provide security for DDOS attacks, as those attacks will hit load balancer and application servers will be safe.","title":"10.2.20 Load Balancers"},{"location":"Learning_System_Design/#10221-cdns","text":"CDN stands for content delivery network. It will help to improve the performance and latency by keeping the requested data near to the user.","title":"10.2.21 CDN's"},{"location":"Learning_System_Design/#10222-design-pattern-and-object-oriented-design","text":"When developing/coding a system, it is important to follow coding standards. Design pattern will give an implementation idea for commonly occurring problems. Some of the design pattern to know are: Singleton Design Pattern: Here only one instance of the class will be available. Adapter Design Pattern: Here two incompatible elements can transfer data with adapter design pattern. Proxy Design Pattern: It is used in place of another component that can be delivered later. Factory Design Pattern: The concept is to create an object without exposing logic to the client. Most of the system today will follow Object Oriented Design. This design helps to reuse the same component multiple times, easy to debug and fix the issues. And has many advantages over procedure oriented design.","title":"10.2.22 Design Pattern and Object Oriented\u00a0design"},{"location":"Learning_System_Design/#10223-virtual-machines-and-containers","text":"Virtual Machine is a software, that gives the user a feel that he is the owner of the hardware. But in reality that hardware will be shared by many users. Containers: It is a way to run an application along with it's dependency in an isolated environment.","title":"10.2.23 Virtual Machines and containers"},{"location":"Learning_System_Design/#10224-publisher-subscriber","text":"Publisher Subscriber model is also called as Pub-Sub model in short. In this model, a publisher will broadcast the message without the knowledge of subscriber. A subscriber will be always listening to broadcast topic without the knowledge of who is publishing the message.","title":"10.2.24 Publisher-Subscriber"},{"location":"Learning_System_Design/#10225-map-reduce","text":"This concept is used to do distributed and parallel processing of big data.","title":"10.2.25 Map\u00a0reduce"},{"location":"Learning_System_Design/#10226-multithreading-concurrency-locks-synchronization","text":"These concepts are important in multithreading. In Java it comes built-in, while other languages like \"c\" need to depend upon platform for implementation.","title":"10.2.26 Multithreading, Concurrency, locks, Synchronization."},{"location":"Learning_System_Design/#topic-1-microservices-architecture","text":"Topic 1: Microservices Architecture Before the introduction of Micro Architecture, there was a Monolithic Architecture. A Monolithic Architecture is like a big box where all the software components are assembled in a tightly packed manner. It means that all the components of a Monolithic Architecture are interconnected and inter dependent. For example: If you visit an online shopping website, they will be having: Products service, where customers can look at the product. Customer service, where customers can seek help to resolve any issues. Cart service, where customers can buy the product. So when you deploy the application, it will be deployed as a single instance that will be running all the time. For scaling them, we shall run multiple instances of these application and keep them behind the load balancer. The only advantage of these kind of application is the deployment will be easy and while scaling the application, you need to run multiple instances of the application which is easy. But there are many disadvantages for this kind of architecture. Some of them are displayed below: When you have a very large application, it will become difficult to modify and deploy the application without knowing all the dependencies. The development and maintenance of the application will be difficult. As the application size is large, a simple bug fix will require complete analysis of the application. The application memory consumption will be unfair. For example, a chat application will require less amount of CPU usage, but a payment checkout will require quick and immediate CPU resource. But in these kind of application, we cannot divide the CPU resources. Single point of failure. Because all of the application are tightly dependent, if one of the application goes down, entire application will be effected. Hence it will make the application highly unstable. Since all the modules are interdependent, adding new module or adding a new feature for existing module will become difficult. Hence we shifted towards Microservices Architecture.","title":"Topic 1: Microservices Architecture"},{"location":"Learning_System_Design/#what-is-a-microservices-architecture","text":"This architecture is a collection of small autonomous services that together form a complete application. Here all applications are independent of each other. They communicate through API provided by the applications. Below are some of the advantages of using Microservices Architecture: Each Microservices can focus on one business logic If any one of the service is down, it will not affect other services, as they are independent of each other. Development and bug fixing is easy, because the developer will focus on only one module. Instead of having a single database, each Microservices will be having its own database, avoiding single point of failure. Below are some of the features of Microservices: 1. Decoupling: The modules can be easily build, scaled and deployed. 2. Autonomy: Teams can work independently 3. Continuous Delivery As we have made all the modules as Microservices, each module will communicate with the API provided by other application. Components involved in Microservice Architecture: API gateway Load Balancer Database Service discovery (Link) Open-source tools for developing Microservices: Operating System: CentOS Container: Docker Scheduler: Kubernates Monitoring: Prometheus Messaging: rabbitMQ API: POSTMAN Programming Language: Elixir Below are some of the companies using Microservices: Twitter Netflix Amazon Paypal","title":"What is a Microservices Architecture?"},{"location":"Learning_System_Design/#topic-2-data-sharding","text":"Before going to data sharding, let us understand Single storage and why we moved to data sharding. Before introduction of distributed systems, we had a single master storage. where in all the data will be dumped in to single DB and all the application traffic used to refer to that database. But as the application traffic increased, and usually we have more reads than writes, it made more sense to add more database to accommodate more reads. Hence we do read replication. In this model, we take two to three copy of the original database and redirect the traffic to those databases. Usually in this model, the write will go the master (original database) and then the latest data will be copied to other database. But in the above model, we have solved read delay but we introduced one potential issue. The issue is consistency, how to make use the read is the latest write? So how do we solve this? We solve the above consist any issue by Data Sharding. Data sharding is a way to break a large database into smaller DB's, in such a way that we maintain consistency in the database.","title":"Topic 2: Data\u00a0Sharding"},{"location":"Learning_System_Design/#how-do-we-do-this","text":"Data sharding can be done in a very simple way. Consider we have 3 servers. We break the key into 3 different parts and assign each set of keys to different database. For example, we have keys from A to Z. we divide the keys into 3 parts, and assign to the serevers below: Server Key Server 1 A to F Server 2 G to N Server 3 O to z Hence we shard the data into multiple server, there by increasing the consistency. And each one of the databases will have their own replicated cluster. Above method of Data Sharding is called as Index based partitioning","title":"How do we do\u00a0this?"},{"location":"Programming_Interview_Study_Plan/","text":"Programming_Interview_Study_Plan This is the Programming Interview Study Plan by Siraj Raval on Youtube. It's this video. Step 1 - Create a list of roles/companies that excite you Use Linkedin Job Search to find jobs Use Trello to keep track of the job pipeline Step 2 - Learn Python Read Automate the Boring Stuff Alternatively, you can watch the related playlist Step 3 - Learn Data Structures Algorithms Take this intro course by Udacity Step 4 - Design Your Porfolio Watch this intro video to GitHub Create upload 3 python web apps to your GitHub portfolio (document the installation steps well in the README) Design your resume . Leverage your Social Media . Step 5 - Practice Data Structures Algorithms Solve 100 Easy, 50 Medium, and 2 Hard Leetcode problems. Give yourself 45 minutes max per problem. How to Solve problems Brute force solution Conceptualize a simpler version fo the problem Use visualization More effciient solution Test solution Explain solution in English Write bulletpoints of solution Write Pseudocode Write Function Defintions Write function implementations Step 6 - Practice System Design Questions Finish all the flashcards here Step 7 - Practice Mock Interviews Practice using interviewing.io Step 8 - Start applying for jobs Cold apply Grab linkedin emails using Getprospect Step 9 - Start Interviewing Phone Screen, Technical Screen, Onsite interviews, Offer/rejection Don't get demoralized by rejections, see this Step 10 - Select the best offer","title":"Interview"},{"location":"Programming_Interview_Study_Plan/#programming_interview_study_plan","text":"This is the Programming Interview Study Plan by Siraj Raval on Youtube. It's this video.","title":"Programming_Interview_Study_Plan"},{"location":"Programming_Interview_Study_Plan/#step-1-create-a-list-of-rolescompanies-that-excite-you","text":"Use Linkedin Job Search to find jobs Use Trello to keep track of the job pipeline","title":"Step 1 - Create a list of roles/companies that excite you"},{"location":"Programming_Interview_Study_Plan/#step-2-learn-python","text":"Read Automate the Boring Stuff Alternatively, you can watch the related playlist","title":"Step 2 - Learn Python"},{"location":"Programming_Interview_Study_Plan/#step-3-learn-data-structures-algorithms","text":"Take this intro course by Udacity","title":"Step 3 - Learn Data Structures &amp; Algorithms"},{"location":"Programming_Interview_Study_Plan/#step-4-design-your-porfolio","text":"Watch this intro video to GitHub Create upload 3 python web apps to your GitHub portfolio (document the installation steps well in the README) Design your resume . Leverage your Social Media .","title":"Step 4 - Design Your Porfolio"},{"location":"Programming_Interview_Study_Plan/#step-5-practice-data-structures-algorithms","text":"Solve 100 Easy, 50 Medium, and 2 Hard Leetcode problems. Give yourself 45 minutes max per problem.","title":"Step 5 - Practice Data Structures &amp; Algorithms"},{"location":"Programming_Interview_Study_Plan/#how-to-solve-problems","text":"Brute force solution Conceptualize a simpler version fo the problem Use visualization More effciient solution Test solution Explain solution in English Write bulletpoints of solution Write Pseudocode Write Function Defintions Write function implementations","title":"How to Solve problems"},{"location":"Programming_Interview_Study_Plan/#step-6-practice-system-design-questions","text":"Finish all the flashcards here","title":"Step 6 - Practice System Design Questions"},{"location":"Programming_Interview_Study_Plan/#step-7-practice-mock-interviews","text":"Practice using interviewing.io","title":"Step 7 - Practice Mock Interviews"},{"location":"Programming_Interview_Study_Plan/#step-8-start-applying-for-jobs","text":"Cold apply Grab linkedin emails using Getprospect","title":"Step 8 - Start applying for jobs"},{"location":"Programming_Interview_Study_Plan/#step-9-start-interviewing","text":"Phone Screen, Technical Screen, Onsite interviews, Offer/rejection Don't get demoralized by rejections, see this","title":"Step 9 - Start Interviewing"},{"location":"Programming_Interview_Study_Plan/#step-10-select-the-best-offer","text":"","title":"Step 10 - Select the best offer"},{"location":"Research/","text":"Research Papers Arxiv IEEE Research Gate Academics Torrent - Search Dataset Arxiv Sanity - Search best papers Openreview Research Papers with code Papers with code Requires Trial Subscription Signup McGrawHill","title":"Research"},{"location":"Research/#requires-trial-subscription-signup","text":"McGrawHill","title":"Requires Trial Subscription Signup"},{"location":"Tools_Compilation/","text":"Tools Compilation --Back to Home AI Product Desgin Book by Google Awesome Design Tools Download Entire Youtube Playlist Open source Platform for Large Scale Participant Driven Event Free Ebooks Source 1 REST API Client UI Prototyping Front END Master Collection Index Repo for all resources Resume Glossary Terms","title":"Tool Compilation"},{"location":"Tools_Compilation/#tools-compilation","text":"","title":"Tools Compilation"},{"location":"Tools_Compilation/#-back-to-home","text":"AI Product Desgin Book by Google Awesome Design Tools Download Entire Youtube Playlist Open source Platform for Large Scale Participant Driven Event Free Ebooks Source 1 REST API Client UI Prototyping Front END Master Collection Index Repo for all resources Resume Glossary Terms","title":"&lt;--Back to Home"},{"location":"ai_ml_index/","text":"Ai And Machine Learning --Back to Home Getting Started with Machine Learning in 3 Months Curriculum By Siraj Raval Learn_Machine_Learning_in_3_Months This is the Curriculum for \"Learn Machine Learning in 3 Months\" this video by Siraj Raval on Youtube Month 1 Week 1 Linear Algebra https://www.youtube.com/watch?v=kjBOesZCoqc index=1 list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab https://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/ Week 2 Calculus https://www.youtube.com/playlist?list=PLZHQObOWTQDMsr9K-rj53DwVRMYO3t5Yr Week 3 Probability https://www.edx.org/course/introduction-probability-science-mitx-6-041x-2 Week 4 Algorithms https://www.edx.org/course/algorithm-design-analysis-pennx-sd3x Month 2 Week 1 Learn python for data science https://www.youtube.com/watch?v=T5pRlIbr6gg list=PL2-dafEMk2A6QKz1mrk1uIGfHkC1zZ6UU Math of Intelligence https://www.youtube.com/watch?v=xRJCOz3AfYY list=PL2-dafEMk2A7mu0bSksCGMJEmeddU_H4D Intro to Tensorflow https://www.youtube.com/watch?v=2FmcHiLCwTU list=PL2-dafEMk2A7EEME489DsI468AB0wQsMV Week 2 Intro to ML (Udacity) https://eu.udacity.com/course/intro-to-machine-learning--ud120 Week 3-4 ML Project Ideas https://github.com/NirantK/awesome-project-ideas Month 3 (Deep Learning) Week 1 Intro to Deep Learning https://www.youtube.com/watch?v=vOppzHpvTiQ list=PL2-dafEMk2A7YdKv4XfKpfbTH5z6rEEj3 Week 2 Deep Learning by Fast.AI http://course.fast.ai/ Week 3-4 Re-implement DL projects from my github https://github.com/llSourcell?tab=repositories Additional Resources: - People in ML to follow on Twitter - Join the \"Wizards\" Slack channel - SubReddit ML Community - Use Twitter by Subscribing to really smart people - Hacker News Resource Microsoft Book : Developers Guide to Building Ai Applications with Microsoft Ai bot Course : Microsoft Ai School Google Alibaba Amazon Microsoft Others","title":"Start"},{"location":"ai_ml_index/#ai-and-machine-learning","text":"","title":"Ai And Machine Learning"},{"location":"ai_ml_index/#-back-to-home","text":"","title":"&lt;--Back to Home"},{"location":"ai_ml_index/#getting-started-with-machine-learning-in-3-months-curriculum-by-siraj-raval","text":"","title":"Getting Started with Machine Learning in 3 Months Curriculum By Siraj Raval"},{"location":"ai_ml_index/#learn_machine_learning_in_3_months","text":"This is the Curriculum for \"Learn Machine Learning in 3 Months\" this video by Siraj Raval on Youtube","title":"Learn_Machine_Learning_in_3_Months"},{"location":"ai_ml_index/#month-1","text":"","title":"Month 1"},{"location":"ai_ml_index/#week-1-linear-algebra","text":"https://www.youtube.com/watch?v=kjBOesZCoqc index=1 list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab https://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/","title":"Week 1 Linear Algebra"},{"location":"ai_ml_index/#week-2-calculus","text":"https://www.youtube.com/playlist?list=PLZHQObOWTQDMsr9K-rj53DwVRMYO3t5Yr","title":"Week 2 Calculus"},{"location":"ai_ml_index/#week-3-probability","text":"https://www.edx.org/course/introduction-probability-science-mitx-6-041x-2","title":"Week 3 Probability"},{"location":"ai_ml_index/#week-4-algorithms","text":"https://www.edx.org/course/algorithm-design-analysis-pennx-sd3x","title":"Week 4 Algorithms"},{"location":"ai_ml_index/#month-2","text":"","title":"Month 2"},{"location":"ai_ml_index/#week-1","text":"","title":"Week 1"},{"location":"ai_ml_index/#learn-python-for-data-science","text":"https://www.youtube.com/watch?v=T5pRlIbr6gg list=PL2-dafEMk2A6QKz1mrk1uIGfHkC1zZ6UU","title":"Learn python for data science"},{"location":"ai_ml_index/#math-of-intelligence","text":"https://www.youtube.com/watch?v=xRJCOz3AfYY list=PL2-dafEMk2A7mu0bSksCGMJEmeddU_H4D","title":"Math of Intelligence"},{"location":"ai_ml_index/#intro-to-tensorflow","text":"https://www.youtube.com/watch?v=2FmcHiLCwTU list=PL2-dafEMk2A7EEME489DsI468AB0wQsMV","title":"Intro to Tensorflow"},{"location":"ai_ml_index/#week-2","text":"Intro to ML (Udacity) https://eu.udacity.com/course/intro-to-machine-learning--ud120","title":"Week 2"},{"location":"ai_ml_index/#week-3-4","text":"ML Project Ideas https://github.com/NirantK/awesome-project-ideas","title":"Week 3-4"},{"location":"ai_ml_index/#month-3-deep-learning","text":"","title":"Month 3 (Deep Learning)"},{"location":"ai_ml_index/#week-1_1","text":"Intro to Deep Learning https://www.youtube.com/watch?v=vOppzHpvTiQ list=PL2-dafEMk2A7YdKv4XfKpfbTH5z6rEEj3","title":"Week 1"},{"location":"ai_ml_index/#week-2_1","text":"Deep Learning by Fast.AI http://course.fast.ai/","title":"Week 2"},{"location":"ai_ml_index/#week-3-4_1","text":"Re-implement DL projects from my github https://github.com/llSourcell?tab=repositories Additional Resources: - People in ML to follow on Twitter - Join the \"Wizards\" Slack channel - SubReddit ML Community - Use Twitter by Subscribing to really smart people - Hacker News","title":"Week 3-4"},{"location":"ai_ml_index/#resource","text":"","title":"Resource"},{"location":"ai_ml_index/#microsoft","text":"Book : Developers Guide to Building Ai Applications with Microsoft Ai bot Course : Microsoft Ai School","title":"Microsoft"},{"location":"ai_ml_index/#google","text":"","title":"Google"},{"location":"ai_ml_index/#alibaba","text":"","title":"Alibaba"},{"location":"ai_ml_index/#amazon","text":"","title":"Amazon"},{"location":"ai_ml_index/#microsoft_1","text":"","title":"Microsoft"},{"location":"ai_ml_index/#others","text":"","title":"Others"},{"location":"django/","text":"Django Tutorials sudo apt install python3-pip pip3 install virtualenv which virtualenv virtualenv venv -p python3.6 source venv/bin/activate pip install django django-admin startproject myproject python manage.py runserver https://simpleisbetterthancomplex.com/series/2017/09/04/a-complete-beginners-guide-to-django-part-1.html Setup Check if you have the Latest Version of Python shell python3 --version Install virtualenv environment after installing pip if you don't have that already pip install virtualenv Create a folder where you want to setup your project and browse into it and setup a python 3.6 virtualenv inside it sudo apt install virtualenv virtualenv venv -p python3.6 Activate the VirtualEnv ``` ``` To Deactivate the env deactivate Install the Django inside your activated you virtualenv pip install django Start a New Project ``` django-admin startproject myproject # which will create the directory structure myproject/ -- higher level folder |-- myproject/ -- django project folder | |-- myproject/ | | |-- init .py | | |-- settings.py | | |-- urls.py | | |-- wsgi.py | +-- manage.py +-- venv/ -- virtual environment folder ``` Our initial project structure is composed of five files: manage.py : a shortcut to use the django-admin command-line utility. It\u2019s used to run management commands related to our project. We will use it to run the development server, run tests, create migrations and much more. init .py : this empty file tells Python that this folder is a Python package. settings.py : this file contains all the project\u2019s configuration. We will refer to this file all the time! urls.py : this file is responsible for mapping the routes and paths in our project. For example, if you want to show something in the URL /about/ , you have to map it here first. wsgi.py : this file is a simple gateway interface used for deployment. You don\u2019t have to bother about it. Just let it be for now. Start your Blank Project python manage.py runserver to create a simple Web Forum or Discussion Board. To create our first app, go to the directory where the manage.py file is and executes the following command: django-admin startapp boards # that will create a strucutre like myproject/ |-- myproject/ | |-- whiteboard/ -- our new django app! | | |-- migrations/ | | | +-- __init__.py | | |-- __init__.py | | |-- admin.py | | |-- apps.py | | |-- models.py | | |-- tests.py | | +-- views.py | |-- myproject/ | | |-- __init__.py | | |-- settings.py | | |-- urls.py | | |-- wsgi.py | +-- manage.py +-- venv/ So, let\u2019s first explore what each file does: migrations/ : here Django store some files to keep track of the changes you create in the models.py file, so to keep the database and the models.py synchronized. admin.py : this is a configuration file for a built-in Django app called Django Admin . apps.py : this is a configuration file of the app itself. models.py : here is where we define the entities of our Web application. The models are translated automatically by Django into database tables. tests.py : this file is used to write unit tests for the app. views.py : this is the file where we handle the request/response cycle of our Web application. STEP 1 :Creating a Hello Word Page for Project Create the views.py file inside the boards app, and add the following code: views.py [In the whiteboard project we just created] from django.http import HttpResponse #add this also def home(request): return HttpResponse('Hello, World!') urls.py [in the other main project folder] from django.conf.urls import url #add this from django.contrib import admin from whiteboards import views #add this urlpatterns = [ url(r'^$', views.home, name='home'), url(r'^admin/', admin.site.urls), ] settings.py [in the same folder as the urls.py add the following in the Installed apps ] INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'board', ] Now to Run the Project python manage.py runserver Step 2 - Modeling Since we will be using Sqlite3 as DB , you can use SQLiteBrowser as an GUI Interface to browse and edit the DB Common field Arguments The following common arguments can be used when declaring many/most of the different field types: help_text : Provides a text label for HTML forms (e.g. in the admin site), as described above. verbose_name : A human-readable name for the field used in field labels. If not specified, Django will infer the default verbose name from the field name. default : The default value for the field. This can be a value or a callable object, in which case the object will be called every time a new record is created. null : If True , Django will store blank values as NULL in the database for fields where this is appropriate (a CharField will instead store an empty string). The default is False . blank : If True , the field is allowed to be blank in your forms. The default is False , which means that Django's form validation will force you to enter a value. This is often used with null=True , because if you're going to allow blank values, you also want the database to be able to represent them appropriately. choices : A group of choices for this field. If this is provided, the default corresponding form widget will be a select box with these choices instead of the standard text field. More on Choices primary_key : If True , sets the current field as the primary key for the model (A primary key is a special database column designated to uniquely identify all the different table records). If no field is specified as the primary key then Django will automatically add a field for this purpose. There are many other options \u2014 you can view the full list of field options here . Common Field Types The following list describes some of the more commonly used types of fields. CharField is used to define short-to-mid sized fixed-length strings. You must specify the max_length of the data to be stored. TextField is used for large arbitrary-length strings. You may specify a max_length for the field, but this is used only when the field is displayed in forms (it is not enforced at the database level). IntegerField is a field for storing integer (whole number) values, and for validating entered values as integers in forms. DateField and DateTimeField are used for storing/representing dates and date/time information (as Python datetime.date in and datetime.datetime objects, respectively). These fields can additionally declare the (mutually exclusive) parameters auto_now=True (to set the field to the current date every time the model is saved), auto_now_add (to only set the date when the model is first created) , and default (to set a default date that can be overridden by the user). EmailField is used to store and validate email addresses. FileField and ImageField are used to upload files and images respectively (the ImageField simply adds additional validation that the uploaded file is an image). These have parameters to define how and where the uploaded files are stored. AutoField is a special type of IntegerField that automatically increments. A primary key of this type is automatically added to your model if you don\u2019t explicitly specify one. ForeignKey is used to specify a one-to-many relationship to another database model (e.g. a car has one manufacturer, but a manufacturer can make many cars). The \"one\" side of the relationship is the model that contains the \"key\" (models containing a \"foreign key\" referring to that \"key\", are on the \"many\" side of such a relationship). There are many other types of fields, including fields for different types of numbers (big integers, small integers, floats), booleans, URLs, slugs, unique ids, and other \"time-related\" information (duration, time, etc.). You can view the full list here . Create the models.py file inside the boards app, and add the following code: from django.db import models from django.contrib.auth.models import User class Board(models.Model): name = models.CharField(max_length=30, unique=True) description = models.CharField(max_length=100) class Topic(models.Model): subject = models.CharField(max_length=255) last_updated = models.DateTimeField(auto_now_add=True) board = models.ForeignKey(Board, related_name='topics') starter = models.ForeignKey(User, related_name='topics') class Post(models.Model): message = models.TextField(max_length=4000) topic = models.ForeignKey(Topic, related_name='posts') created_at = models.DateTimeField(auto_now_add=True) updated_at = models.DateTimeField(null=True) created_by = models.ForeignKey(User, related_name='posts') updated_by = models.ForeignKey(User, null=True, related_name='+') https://simpleisbetterthancomplex.com/series/2017/09/11/a-complete-beginners-guide-to-django-part-2.html https://docs.djangoproject.com/en/3.0/topics/db/models/# https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Models https://docs.djangoproject.com/en/3.0/ref/models/fields/#field-options https://www.journaldev.com/21938/django-models from django.db import models from django.contrib.auth.models import User class CompanyTable(models.Model): id=models.AutoField(primary_key=True) name=models.CharField( Company Name ,max_length=100) class ComapnySchedule(models.Model): companyName=models.ForeignKey(CompanyTable,on_delete=models.DO_NOTHING) #branches=[( CSE , Computer Science Engineering ),( CSIS , Computer Science and information Security )] #eligibleBrances=models.TextChoices( CSE , CSIS ) eligibleBranches=models.CharField( Eligible Branches ,max_length=300,blank=False) # #,choices=branches offers=models.IntegerField(blank=False) class CompanyCriteriaAndOffer(models.Model): #last date of Registration #Company Name #Link on the Top recruitmentType=models.CharField( Recruitment Type ,max_length=100) jobType=models.CharField( Job Type ,max_length=20) eligibleBranches=models.CharField( Eligible Branches ,max_length=300,blank=False) #Needs to be in Decimal minimum_Gpa_Mtech=models.IntegerField( Minimum GPA 1st Sem Mtech ,blank=False) minimum_Cgpa_Btech=models.IntegerField( Minimum CGPA in Undergrad ,blank=False) #Needs to be without decimal maximumBackLog=models.IntegerField( Maximum Backlog ) minimum_12_marks=models.IntegerField( Minimum Class 12 Marks ) minimum_10_marks=models.IntegerField( Minimum Class 10 Marks ) minimum_Dimploma_marks=models.IntegerField( Minimum Diploma Marks ) stipend=models.CharField( Stipend ,blank=False) location=models.CharField( Location ,max_length=100) on_conversion=models.CharField( On Conversion CTC ,max_length=100) python manage.py makemigrations python manage.py sqlmigrate boards 0001 python manage.py migrate python manage.py createsuperuser","title":"Django"},{"location":"django/#django-tutorials","text":"sudo apt install python3-pip pip3 install virtualenv which virtualenv virtualenv venv -p python3.6 source venv/bin/activate pip install django django-admin startproject myproject python manage.py runserver https://simpleisbetterthancomplex.com/series/2017/09/04/a-complete-beginners-guide-to-django-part-1.html","title":"Django Tutorials"},{"location":"django/#setup","text":"Check if you have the Latest Version of Python shell python3 --version Install virtualenv environment after installing pip if you don't have that already pip install virtualenv Create a folder where you want to setup your project and browse into it and setup a python 3.6 virtualenv inside it sudo apt install virtualenv virtualenv venv -p python3.6 Activate the VirtualEnv ``` ``` To Deactivate the env deactivate Install the Django inside your activated you virtualenv pip install django Start a New Project ``` django-admin startproject myproject # which will create the directory structure myproject/ -- higher level folder |-- myproject/ -- django project folder | |-- myproject/ | | |-- init .py | | |-- settings.py | | |-- urls.py | | |-- wsgi.py | +-- manage.py +-- venv/ -- virtual environment folder ``` Our initial project structure is composed of five files: manage.py : a shortcut to use the django-admin command-line utility. It\u2019s used to run management commands related to our project. We will use it to run the development server, run tests, create migrations and much more. init .py : this empty file tells Python that this folder is a Python package. settings.py : this file contains all the project\u2019s configuration. We will refer to this file all the time! urls.py : this file is responsible for mapping the routes and paths in our project. For example, if you want to show something in the URL /about/ , you have to map it here first. wsgi.py : this file is a simple gateway interface used for deployment. You don\u2019t have to bother about it. Just let it be for now.","title":"Setup"},{"location":"django/#start-your-blank-project","text":"python manage.py runserver to create a simple Web Forum or Discussion Board. To create our first app, go to the directory where the manage.py file is and executes the following command: django-admin startapp boards # that will create a strucutre like myproject/ |-- myproject/ | |-- whiteboard/ -- our new django app! | | |-- migrations/ | | | +-- __init__.py | | |-- __init__.py | | |-- admin.py | | |-- apps.py | | |-- models.py | | |-- tests.py | | +-- views.py | |-- myproject/ | | |-- __init__.py | | |-- settings.py | | |-- urls.py | | |-- wsgi.py | +-- manage.py +-- venv/ So, let\u2019s first explore what each file does: migrations/ : here Django store some files to keep track of the changes you create in the models.py file, so to keep the database and the models.py synchronized. admin.py : this is a configuration file for a built-in Django app called Django Admin . apps.py : this is a configuration file of the app itself. models.py : here is where we define the entities of our Web application. The models are translated automatically by Django into database tables. tests.py : this file is used to write unit tests for the app. views.py : this is the file where we handle the request/response cycle of our Web application.","title":"Start your Blank Project"},{"location":"django/#step-1-creating-a-hello-word-page-for-project","text":"Create the views.py file inside the boards app, and add the following code: views.py [In the whiteboard project we just created] from django.http import HttpResponse #add this also def home(request): return HttpResponse('Hello, World!') urls.py [in the other main project folder] from django.conf.urls import url #add this from django.contrib import admin from whiteboards import views #add this urlpatterns = [ url(r'^$', views.home, name='home'), url(r'^admin/', admin.site.urls), ] settings.py [in the same folder as the urls.py add the following in the Installed apps ] INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'board', ] Now to Run the Project python manage.py runserver","title":"STEP 1 :Creating a Hello Word Page for Project"},{"location":"django/#step-2-modeling","text":"Since we will be using Sqlite3 as DB , you can use SQLiteBrowser as an GUI Interface to browse and edit the DB","title":"Step 2 - Modeling"},{"location":"django/#common-field-arguments","text":"The following common arguments can be used when declaring many/most of the different field types: help_text : Provides a text label for HTML forms (e.g. in the admin site), as described above. verbose_name : A human-readable name for the field used in field labels. If not specified, Django will infer the default verbose name from the field name. default : The default value for the field. This can be a value or a callable object, in which case the object will be called every time a new record is created. null : If True , Django will store blank values as NULL in the database for fields where this is appropriate (a CharField will instead store an empty string). The default is False . blank : If True , the field is allowed to be blank in your forms. The default is False , which means that Django's form validation will force you to enter a value. This is often used with null=True , because if you're going to allow blank values, you also want the database to be able to represent them appropriately. choices : A group of choices for this field. If this is provided, the default corresponding form widget will be a select box with these choices instead of the standard text field. More on Choices primary_key : If True , sets the current field as the primary key for the model (A primary key is a special database column designated to uniquely identify all the different table records). If no field is specified as the primary key then Django will automatically add a field for this purpose. There are many other options \u2014 you can view the full list of field options here .","title":"Common field Arguments"},{"location":"django/#common-field-types","text":"The following list describes some of the more commonly used types of fields. CharField is used to define short-to-mid sized fixed-length strings. You must specify the max_length of the data to be stored. TextField is used for large arbitrary-length strings. You may specify a max_length for the field, but this is used only when the field is displayed in forms (it is not enforced at the database level). IntegerField is a field for storing integer (whole number) values, and for validating entered values as integers in forms. DateField and DateTimeField are used for storing/representing dates and date/time information (as Python datetime.date in and datetime.datetime objects, respectively). These fields can additionally declare the (mutually exclusive) parameters auto_now=True (to set the field to the current date every time the model is saved), auto_now_add (to only set the date when the model is first created) , and default (to set a default date that can be overridden by the user). EmailField is used to store and validate email addresses. FileField and ImageField are used to upload files and images respectively (the ImageField simply adds additional validation that the uploaded file is an image). These have parameters to define how and where the uploaded files are stored. AutoField is a special type of IntegerField that automatically increments. A primary key of this type is automatically added to your model if you don\u2019t explicitly specify one. ForeignKey is used to specify a one-to-many relationship to another database model (e.g. a car has one manufacturer, but a manufacturer can make many cars). The \"one\" side of the relationship is the model that contains the \"key\" (models containing a \"foreign key\" referring to that \"key\", are on the \"many\" side of such a relationship). There are many other types of fields, including fields for different types of numbers (big integers, small integers, floats), booleans, URLs, slugs, unique ids, and other \"time-related\" information (duration, time, etc.). You can view the full list here . Create the models.py file inside the boards app, and add the following code: from django.db import models from django.contrib.auth.models import User class Board(models.Model): name = models.CharField(max_length=30, unique=True) description = models.CharField(max_length=100) class Topic(models.Model): subject = models.CharField(max_length=255) last_updated = models.DateTimeField(auto_now_add=True) board = models.ForeignKey(Board, related_name='topics') starter = models.ForeignKey(User, related_name='topics') class Post(models.Model): message = models.TextField(max_length=4000) topic = models.ForeignKey(Topic, related_name='posts') created_at = models.DateTimeField(auto_now_add=True) updated_at = models.DateTimeField(null=True) created_by = models.ForeignKey(User, related_name='posts') updated_by = models.ForeignKey(User, null=True, related_name='+') https://simpleisbetterthancomplex.com/series/2017/09/11/a-complete-beginners-guide-to-django-part-2.html https://docs.djangoproject.com/en/3.0/topics/db/models/# https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Models https://docs.djangoproject.com/en/3.0/ref/models/fields/#field-options https://www.journaldev.com/21938/django-models from django.db import models from django.contrib.auth.models import User class CompanyTable(models.Model): id=models.AutoField(primary_key=True) name=models.CharField( Company Name ,max_length=100) class ComapnySchedule(models.Model): companyName=models.ForeignKey(CompanyTable,on_delete=models.DO_NOTHING) #branches=[( CSE , Computer Science Engineering ),( CSIS , Computer Science and information Security )] #eligibleBrances=models.TextChoices( CSE , CSIS ) eligibleBranches=models.CharField( Eligible Branches ,max_length=300,blank=False) # #,choices=branches offers=models.IntegerField(blank=False) class CompanyCriteriaAndOffer(models.Model): #last date of Registration #Company Name #Link on the Top recruitmentType=models.CharField( Recruitment Type ,max_length=100) jobType=models.CharField( Job Type ,max_length=20) eligibleBranches=models.CharField( Eligible Branches ,max_length=300,blank=False) #Needs to be in Decimal minimum_Gpa_Mtech=models.IntegerField( Minimum GPA 1st Sem Mtech ,blank=False) minimum_Cgpa_Btech=models.IntegerField( Minimum CGPA in Undergrad ,blank=False) #Needs to be without decimal maximumBackLog=models.IntegerField( Maximum Backlog ) minimum_12_marks=models.IntegerField( Minimum Class 12 Marks ) minimum_10_marks=models.IntegerField( Minimum Class 10 Marks ) minimum_Dimploma_marks=models.IntegerField( Minimum Diploma Marks ) stipend=models.CharField( Stipend ,blank=False) location=models.CharField( Location ,max_length=100) on_conversion=models.CharField( On Conversion CTC ,max_length=100) python manage.py makemigrations python manage.py sqlmigrate boards 0001 python manage.py migrate python manage.py createsuperuser","title":"Common Field Types"},{"location":"git/","text":"Git Commands --Back to Home Basic Git/GitHub Cheat Sheet The Beginner's Guide to Version Control Setting up Git Identity $ git config --global user.name John Doe $ git config --global user.email johndoe@example.com Add a File to Git $git add . //will add everything $git add filename.extension $git add *.html Show Whats on the Staging area $git status Remove a File from Staging area $git reset filename.extension Changing the Remote URL for Git repo $ git remote set-url origin https://github.com/USERNAME/REPOSITORY.git Remove File from Staging Area and Set it to be Untracked $git rm --cached filename.extension Checking Settings git config --list Create a new branch with git and manage branches $git branch branchname Before creating a new branch, pull the changes from upstream. Your master needs to be up to date. $ git pull Create the branch on your local machine and switch in this branch : $ git checkout -b [name_of_your_new_branch] //or $ git checkout branchname While Inside Master take the commits from the your branch and merge them to the main Repository $ git merge branchname Push the branch on github : $ git push origin [name_of_your_new_branch] Git Cheat Sheet","title":"Git"},{"location":"git/#git-commands","text":"","title":"Git Commands"},{"location":"git/#-back-to-home","text":"","title":"&lt;--Back to Home"},{"location":"git/#basic-gitgithub-cheat-sheet","text":"","title":"Basic Git/GitHub Cheat Sheet"},{"location":"git/#the-beginners-guide-to-version-control","text":"Setting up Git Identity $ git config --global user.name John Doe $ git config --global user.email johndoe@example.com Add a File to Git $git add . //will add everything $git add filename.extension $git add *.html Show Whats on the Staging area $git status Remove a File from Staging area $git reset filename.extension Changing the Remote URL for Git repo $ git remote set-url origin https://github.com/USERNAME/REPOSITORY.git Remove File from Staging Area and Set it to be Untracked $git rm --cached filename.extension Checking Settings git config --list Create a new branch with git and manage branches $git branch branchname Before creating a new branch, pull the changes from upstream. Your master needs to be up to date. $ git pull Create the branch on your local machine and switch in this branch : $ git checkout -b [name_of_your_new_branch] //or $ git checkout branchname While Inside Master take the commits from the your branch and merge them to the main Repository $ git merge branchname Push the branch on github : $ git push origin [name_of_your_new_branch]","title":"The Beginner's Guide to Version Control"},{"location":"git/#git-cheat-sheet","text":"","title":"Git Cheat Sheet"},{"location":"markdownsyntax/","text":"This website was created with Docusaurus . What's In This Document Get Started in 5 Minutes Directory Structure Editing Content Adding Content Full Documentation Get Started in 5 Minutes Make sure all the dependencies for the website are installed: # Install dependencies $ yarn Run your dev server: # Start the site $ yarn start Directory Structure Your project file structure should look something like this my-docusaurus/ docs/ doc-1.md doc-2.md doc-3.md website/ blog/ 2016-3-11-oldest-post.md 2017-10-24-newest-post.md core/ node_modules/ pages/ static/ css/ img/ package.json sidebar.json siteConfig.js Editing Content Editing an existing docs page Edit docs by navigating to docs/ and editing the corresponding document: docs/doc-to-be-edited.md --- id: page-needs-edit title: This Doc Needs To Be Edited --- Edit me... For more information about docs, click here Editing an existing blog post Edit blog posts by navigating to website/blog and editing the corresponding post: website/blog/post-to-be-edited.md --- id: post-needs-edit title: This Blog Post Needs To Be Edited --- Edit me... For more information about blog posts, click here Adding Content Adding a new docs page to an existing sidebar Create the doc as a new markdown file in /docs , example docs/newly-created-doc.md : --- id: newly-created-doc title: This Doc Needs To Be Edited --- My new content here.. Refer to that doc's ID in an existing sidebar in website/sidebar.json : // Add newly-created-doc to the Getting Started category of docs { docs : { Getting Started : [ quick-start , newly-created-doc // new doc here ], ... }, ... } For more information about adding new docs, click here Adding a new blog post Make sure there is a header link to your blog in website/siteConfig.js : website/siteConfig.js headerLinks: [ ... { blog: true, label: 'Blog' }, ... ] Create the blog post with the format YYYY-MM-DD-My-Blog-Post-Title.md in website/blog : website/blog/2018-05-21-New-Blog-Post.md --- author: Frank Li authorURL: https://twitter.com/foobarbaz authorFBID: 503283835 title: New Blog Post --- Lorem Ipsum... For more information about blog posts, click here Adding items to your site's top navigation bar Add links to docs, custom pages or external links by editing the headerLinks field of website/siteConfig.js : website/siteConfig.js { headerLinks: [ ... /* you can add docs */ { doc: 'my-examples', label: 'Examples' }, /* you can add custom pages */ { page: 'help', label: 'Help' }, /* you can add external links */ { href: 'https://github.com/facebook/Docusaurus', label: 'GitHub' }, ... ], ... } For more information about the navigation bar, click here Adding custom pages Docusaurus uses React components to build pages. The components are saved as .js files in website/pages/en : If you want your page to show up in your navigation header, you will need to update website/siteConfig.js to add to the headerLinks element: website/siteConfig.js { headerLinks: [ ... { page: 'my-new-custom-page', label: 'My New Custom Page' }, ... ], ... } For more information about custom pages, click here . Full Documentation Full documentation can be found on the website . By Harshit Yadav","title":"MarkDown"},{"location":"markdownsyntax/#whats-in-this-document","text":"Get Started in 5 Minutes Directory Structure Editing Content Adding Content Full Documentation","title":"What's In This Document"},{"location":"markdownsyntax/#get-started-in-5-minutes","text":"Make sure all the dependencies for the website are installed: # Install dependencies $ yarn Run your dev server: # Start the site $ yarn start","title":"Get Started in 5 Minutes"},{"location":"markdownsyntax/#directory-structure","text":"Your project file structure should look something like this my-docusaurus/ docs/ doc-1.md doc-2.md doc-3.md website/ blog/ 2016-3-11-oldest-post.md 2017-10-24-newest-post.md core/ node_modules/ pages/ static/ css/ img/ package.json sidebar.json siteConfig.js","title":"Directory Structure"},{"location":"markdownsyntax/#editing-content","text":"","title":"Editing Content"},{"location":"markdownsyntax/#editing-an-existing-docs-page","text":"Edit docs by navigating to docs/ and editing the corresponding document: docs/doc-to-be-edited.md --- id: page-needs-edit title: This Doc Needs To Be Edited --- Edit me... For more information about docs, click here","title":"Editing an existing docs page"},{"location":"markdownsyntax/#editing-an-existing-blog-post","text":"Edit blog posts by navigating to website/blog and editing the corresponding post: website/blog/post-to-be-edited.md --- id: post-needs-edit title: This Blog Post Needs To Be Edited --- Edit me... For more information about blog posts, click here","title":"Editing an existing blog post"},{"location":"markdownsyntax/#adding-content","text":"","title":"Adding Content"},{"location":"markdownsyntax/#adding-a-new-docs-page-to-an-existing-sidebar","text":"Create the doc as a new markdown file in /docs , example docs/newly-created-doc.md : --- id: newly-created-doc title: This Doc Needs To Be Edited --- My new content here.. Refer to that doc's ID in an existing sidebar in website/sidebar.json : // Add newly-created-doc to the Getting Started category of docs { docs : { Getting Started : [ quick-start , newly-created-doc // new doc here ], ... }, ... } For more information about adding new docs, click here","title":"Adding a new docs page to an existing sidebar"},{"location":"markdownsyntax/#adding-a-new-blog-post","text":"Make sure there is a header link to your blog in website/siteConfig.js : website/siteConfig.js headerLinks: [ ... { blog: true, label: 'Blog' }, ... ] Create the blog post with the format YYYY-MM-DD-My-Blog-Post-Title.md in website/blog : website/blog/2018-05-21-New-Blog-Post.md --- author: Frank Li authorURL: https://twitter.com/foobarbaz authorFBID: 503283835 title: New Blog Post --- Lorem Ipsum... For more information about blog posts, click here","title":"Adding a new blog post"},{"location":"markdownsyntax/#adding-items-to-your-sites-top-navigation-bar","text":"Add links to docs, custom pages or external links by editing the headerLinks field of website/siteConfig.js : website/siteConfig.js { headerLinks: [ ... /* you can add docs */ { doc: 'my-examples', label: 'Examples' }, /* you can add custom pages */ { page: 'help', label: 'Help' }, /* you can add external links */ { href: 'https://github.com/facebook/Docusaurus', label: 'GitHub' }, ... ], ... } For more information about the navigation bar, click here","title":"Adding items to your site's top navigation bar"},{"location":"markdownsyntax/#adding-custom-pages","text":"Docusaurus uses React components to build pages. The components are saved as .js files in website/pages/en : If you want your page to show up in your navigation header, you will need to update website/siteConfig.js to add to the headerLinks element: website/siteConfig.js { headerLinks: [ ... { page: 'my-new-custom-page', label: 'My New Custom Page' }, ... ], ... } For more information about custom pages, click here .","title":"Adding custom pages"},{"location":"markdownsyntax/#full-documentation","text":"Full documentation can be found on the website . By Harshit Yadav","title":"Full Documentation"},{"location":"python/","text":"Python For Beginners Python Resources and List Automate Boring Stuff with Python Microsft Python for Beginners web Series","title":"Python"},{"location":"python/#python-for-beginners","text":"","title":"Python For Beginners"},{"location":"python/#python-resources-and-list","text":"Automate Boring Stuff with Python Microsft Python for Beginners web Series","title":"Python Resources and List"},{"location":"sql/","text":"SQL Statements 1.Create a table T_Salesman a.SalesMan_Id - Primary key b.Name c.City d.Commission 2.Create a table T_Customer a.Customer_Id - Primary Key b.Cust_Name c.City d.Grade e.SalesMan_Id 3.Create a table T_Orders a.Ord_num - Primary Key b.Purchase_Amt c.Ord_Date d.Customer_Id - Foreign Key (T_Customer) e.SalesMan_Id - Foreign Key (T_Salesman) CREATE TABLE T_Salesman (SalesMan_ID numeric(5) primary key, Name varchar(30), City varchar(15), Commission decimal(5,2)); CREATE TABLE T_Customer (Customer_ID numeric(5) primary key, Cust_Name varchar(30), City varchar(15), Grade numeric(3), SalesMan_ID numeric(5)); create table T_Orders(Ord_No numeric(5) primary key, Purchase_Amt decimal(8,2), Ord_Date date, Customer_ID numeric(5) references T_Customer(Customer_ID), SalesMan_ID numeric(5) references T_SalesMan(SalesMan_ID)); Inserting data into each table insert into T_Customer values(3002,'Nick Rimando','New York',100,5001); insert into T_Salesman values(5001,'James Hoog','New York',0.15); insert into T_Orders values(70001, 150.5 , '2012-10-05 ', 3005 , 5002); Retriving Data from Tables 1.Write a sql statement to display all the information of all salesmen. 2.Write a sql statement to display a string \"This is SQL Exercise, Practice and Solution\". 3.Write a query to display three numbers (5,10,15) in three columns. 4.Write a query to display the sum of two numbers 10 and 15. 5.Write a query to display the result of an arithmetic expression. 10+15-5*2 6.Write a sql statement to display specific columns like name and commission for all the salesmen. 7.Write a query to display the columns in a specific order like order date, salesman id, order number and purchase amount from for all the orders. 8.Write a query which will retrieve the value of salesman id of all salesmen, getting orders from the customers in orders table without any repeats. 9.Write a sql statement to display names and city of salesman, who belongs to the city of Paris. 10.Write a sql statement to display all the information for those customers with a grade of 200. 11.Write a sql query to display the order number followed by order date and the purchase amount for each order which will be delivered by the salesman who is holding the ID 5001. select * from T_Salesman; SELECT 'This is SQL Exercise, Practice and Solution'; select 5,10,15; select 10+15; select 10+15-5*2; select Name ,Commission from T_Salesman; select Ord_Date, SalesMan_ID,Ord_Date,Purchase_Amt from T_Orders; select Distinct SalesMan_ID from T_Orders; select Name ,City from T_Salesman where City='Paris'; select * from T_Customer where Grade=200; select Ord_No,Purchase_Amt,Ord_Date from T_Orders where SalesMan_ID=5001; Using Boolean and Relational operators 1.Write a query to display all customers with a grade above 100. 2.Write a query statement to display all customers in New York who have a grade value above 100. 3.Write a SQL statement to display all customers, who are either belongs to the city New York or had a grade above 100. 4.Write a SQL statement to display all the customers, who are either belongs to the city New York or not had a grade above 100. 5.Write a SQL query to display those customers who are neither belongs to the city New York nor grade value is more than 100. 6.Write a SQL statement to display either those orders which is not issued on date 2012-09-10 and issued by the salesman whose ID is 505 and below or those orders which purchase amount is 1000.00 and below. 7.Write a SQL statement to display salesman_id, name, city and commission who gets the commission within the range more than 0.10% and less than 0.12%. 8.Write a SQL statement to display all information where purchase amount less than a specified amount or order date is less than a specified date and customer id greater than or equal to a specified number, then display the output in descending order of order date. 9.Write a SQL query to display all orders where purchase amount less than a specified amount or orders in a specified date and customer ID less than a specified number, then display the output in descending order of order date 10.Display all in descending order of order date where order dates equal to a specified date or customer id greater than a specified number and purchase amount less than a specified amount. select * from T_Customer where Grade 100; select * from T_Customer where Grade 100 AND City='New York' ; select * from T_Customer where NOT Grade 100 or City='New York' ; select * from T_Customer where NOT Grade 100 or not City='New York' ; select * from T_Customer where NOT Grade 100 or not City='New York' ; select * from T_Orders Where (Not Ord_Date='2012-09-10' and SalesMan_ID=505) or Purchase_Amt =1000.0; select * from T_Salesman where Commission 0.10 and Commission 0.12; select * from T_Orders where (Purchase_Amt 300.0 or Ord_Date ='2012-09-10') and Customer_ID 3009 order by Ord_Date desc; select * from T_Orders where ((Purchase_Amt 300 or Ord_Date ='2012-09-10') and Customer_ID 3009 )order by Ord_Date desc ; select * from T_Orders where Ord_Date ='2012-09-10' or Customer_ID 3009 order by Ord_Date desc; Wild Card and Special Operators 1.Write a SQL statement to find those salesmen with all information who come from the city either Paris or Rome. 2.Write a query to filter those salesmen with all information who comes from any of the cities Paris and Rome. 3.Write a query to filter those salesmen with all information who likes to leave other cities than Paris and Rome. 4.Write a query to sort out those customers with all information whose ID value is within any of 3007, 3008 and 3009. 5.Write a SQL statement to find those salesmen with all information who gets the commission within a range of 0.12 and 0.14. 6.Write a query to filter all those orders with all information which purchase amount value is within the range 500 and 4000 except those orders of purchase amount value 948.50 and 1983.43. 7.Write a SQL statement to find those salesmen with all other information and name started with any letter 'A' and 'L'. 8.Write a SQL statement to find those salesmen with all other information and name started with other than any letter within 'A' and 'L'. 9.Write a SQL statement to find those customer with all information whose name begin with the letter 'B'. 10.Write a SQL statement to find all those customer with all information whose names are ending with the letter 'n'. 11.Write a SQL statement to find those salesmen with all information whose name contain only four characters, in which 1st character must be 'N' and 4th character is l and rests may be any character. select * from T_Salesman where City='Rome' or CITY='Paris'; select * from T_Salesman where City in('Rome','Paris'); select * from T_Salesman where City not in('Rome','Paris'); select * from T_Customer where Customer_ID in (3007,3008,3009); select * from T_Salesman where Commission between 0.12 and 0.14; select * from T_Orders where (Purchase_Amt between 500 and 4000) and (Purchase_Amt not in (948.50,1983.43)) ; select * from T_Salesman where Name between 'A' and 'L'; select * from T_Salesman where Name not between 'A' and 'L'; select * from T_Customer where Cust_Name like 'B%'; select * from T_Customer where Cust_Name like'%n'; select * from T_Salesman where Name like 'N__l%' Special Characters Sample Data - \u2018Test Table\u2019 col1 ```A001/DJ-402\\44_/100/2015 A001_\\DJ-402\\44_/100/2015 A001_DJ-402-2014-2015 A002_DJ-401-2014-2015 A001/DJ_401 A001/DJ_402\\44 A001/DJ_402\\44\\2015 A001/DJ-402%45\\2015/200 A001/DJ_402\\45\\2015%100 A001/DJ_402%45\\2015/300 A001/DJ-402\\44 - 12.Write a SQL statement to find those rows from the table test table which contain the escape character underscore ( _ ) in its column 'col1'. - 13.Write a SQL statement to find those rows from the table test table which does not contain the character underscore ( _ ) in its column 'col1'. - 14.Write a SQL statement to find those rows from the table test table which contain the escape character ( / ) in its column 'col1'. - 15.Write a SQL statement to find those rows from the table test table which does not contain the escape character ( / ) in its column 'col1'. - 16.Write a SQL statement to find those rows from the table test table which contain the string ( _/ ) in its column 'col1'. - 17.Write a SQL statement to find those rows from the table test table which does not contain the string ( _/ ) in its column 'col1'. - 18.Write a SQL statement to find those rows from the table test table which contain the character ( % ) in its column 'col1'. - 19.Write a SQL statement to find those rows from the table test table which does not contain the character ( % ) in its column 'col1'. - 20.Write a SQL statement to find those customer with all information who does not get any grade except NULL. 21.Write a SQL statement to find those customer with all information who gets a grade except NULL value. select * from TestTable where col1 like '%/ %' escape '/' ; select * from TestTable where col1 not like '%/ %' escape '/' ; select * from TestTable where col1 like '%//%' escape '/' ; select * from TestTable where col1 not like '%//%' escape '/' ; select * from TestTable where col1 like '%/ //%' escape '/' ; select * from TestTable where col1 not like '%/ //%' escape '/' ; select * from TestTable where col1 like '%/%%' escape '/'; select * from TestTable where col1 not like '%/%%' escape '/'; select * from T_Customer where Grade is null; select * from T_Customer where Grade is not null; ### Aggregate Functions - 1.Write a SQL statement to find the total purchase amount of all orders. - 2.Write a SQL statement to find the average purchase amount of an order - 3.Write a SQL statement to find the number of salesmen currently listing for all of their customers. - 4.Write a SQL statement know how many customer have listed their names with other information. - 5.Write a SQL statement find the number of customers who gets at least a gradation for his/her performance. - 6.Write a SQL statement to get the maximum purchase amount of all the orders. - 7.Write a SQL statement to get the minimum purchase amount of all the orders. - 8.Write a SQL statement which selects the highest grade for each of the cities of the customers. - 9.Write a SQL statement to find the highest purchase amount ordered by the each customer with their ID and highest purchase amount. - 10.Write a SQL statement to find the highest purchase amount ordered by the each customer on a particular date with their ID, order date and highest purchase amount. - 11.Write a SQL statement to find the highest purchase amount in a date '2012-08-17' for each salesman with their ID. - 12.Write a SQL statement to find the highest purchase amount with their ID and order date, for only those customers who have highest purchase amount in a day is more than 2000. - 13.Write a SQL statement to find the highest purchase amount with their ID and order date, for those customers who have a higher purchase amount in a day is within the range 2000 and 6000. - 14.Write a SQL statement to find the highest purchase amount with their ID and order date, for only those customers who have a higher purchase amount in a day is within the list 2000, 3000, 5760 and 6000. - 15.Write a SQL statement to find the highest purchase amount with their ID, for only those customers whose ID is within the range 3002 and 3007. - 16.Write a SQL statement to display customer details (ID and purchase amount) whose IDs are within the range 3002 and 3007 and highest purchase amount is more than 1000. - 17.Write a SQL statement to find the highest purchase amount with their ID, for only those salesmen whose ID is within the range 5003 and 5008. - 18.Write a SQL statement that counts all orders for a date August 17th, 2012. - 19.Write a SQL statement that counts the number of different non NULL city values for salesmen. - 20.Write a query that counts the number of salesmen with their order date and ID registering orders for each day. select sum(Purchase_Amt) from T_Orders; select avg(Purchase_Amt) from T_Orders ; select count(distinct SalesMan_ID ) from T_Orders; select count(distinct Customer_ID )from T_Customer; select count(ALL Grade) from T_Customer; select MAX(Purchase_Amt)from T_Orders; select MIN(Purchase_Amt)from T_Orders; Select City , Max(Grade) from T_Customer group by City; select Max(Purchase_Amt) ,Customer_ID from T_Orders group by Customer_ID; select Customer_ID,Ord_Date ,max(Purchase_Amt) from T_Orders group by Ord_Date,Customer_ID; select SalesMan_ID,Max(Purchase_Amt) from T_Orders where Ord_Date='2012-08-17' group by SalesMan_ID; select Customer_ID,Ord_Date, max(Purchase_Amt) from T_Orders group by Customer_ID, Ord_Date having max(Purchase_Amt) 2000; select Customer_ID,Ord_date,max(Purchase_Amt) from T_Orders group by Customer_ID, Ord_Date having MAX(Purchase_Amt) between 2000 and 6000; --select Customer_ID,Ord_Date,max(Purchase_Amt) from T_Orders GROUP BY Customer_ID,Ord_Date having MAX(Purchase_Amt) like '2___.%' select Customer_ID,Ord_Date,max(Purchase_Amt) from T_Orders GROUP BY Customer_ID,Ord_Date having MAX(Purchase_Amt) in (2000,3000,5760,6000) select Customer_ID,MAX(Purchase_Amt) from T_Orders group by Customer_ID having Customer_ID between 3002 and 3007 select Customer_ID, max(Purchase_Amt) from T_Orders where Customer_ID between 3002 and 3007 group by Customer_ID having MAX(Purchase_Amt) 1000 select SalesMan_ID, MAX(Purchase_Amt) from T_Orders group by SalesMan_ID having SalesMan_ID between 5003 and 5008 select count(*) from T_Orders where Ord_Date='2012-08-17' select SalesMan_ID, Ord_Date,COUNT(*) from T_Orders group by Ord_Date, SalesMan_ID ### Formatting Output - 1.Write a SQL statement to find out the number of orders booked for each day and display it in such a format like For 2001-10-10 there are 15 orders . - 2.Write a query to display the orders according to the order number arranged by ascending order. - 3.Write a SQL statement to arrange the orders according to the order date in such a manner that the latest date will come first then previous dates. - 4.Write a SQL statement to display the orders with all information in such a manner that the latest order date with highest purchase amount will come first. - 5.Write a SQL statement to display the customer name, city and grade etc. and smallest customer ID will comes first. - 6.Write a SQL statement to make a report with salesman ID, order date in such an arrangement that, the smallest salesman ID will come first along with their smallest order date and highest purchase amount. - 7.Write a SQL statement to display customer name, city and grade in such a manner that, the customer holding highest grade will comes first. - 8.Write a SQL statement make a report with customer ID in such a manner that, the largest number of orders booked by the customer will comes first along with their highest purchase amount. - 9.Write a SQL statement to make a report with order date in such a manner that, the latest order date will comes first along with the total purchase amount and total commission (15% for all salesmen) for that date. select 'FOR' ,Ord_Date,'there are' ,COUNT(distinct Ord_No), 'Orders' from T_Orders group by Ord_Date select * from T_orders order by Ord_No asc select * from T_Orders order by Ord_Date desc select * from T_Orders order by Ord_Date,Purchase_Amt desc select Cust_Name, City, Grade from T_Customer order by Customer_ID asc select SalesMan_ID, Ord_Date , max(Purchase_Amt) from T_Orders group by SalesMan_ID, Ord_Date order by SalesMan_ID , Ord_Date select Cust_Name, City, Grade from T_Customer order by Grade desc select Customer_ID,count(distinct Ord_No),MAX(Purchase_Amt) from T_Orders group by Customer_ID order by MAX(Purchase_Amt) DESC select Ord_Date ,sum(Purchase_Amt),sum(Purchase_Amt)*.15 from T_Orders group by Ord_Date order by Ord_Date ### Queries on Multiple Table - 1.Write a query to find those customers with their name and those salesmen with their name and city who lives in the same city. - 2.Write a SQL statement to find the names of all customers along with the salesmen who works for them. - 3.Write a SQL statement to display all those orders by the customers not located in the same cities where their salesmen lives. - 4.Write a SQL statement that find out each order number followed by the name of the customers who made the order. - 5.Write a SQL statement that short out the customer and their grade who made an order. Each of the customer must have a grade and served by at least a salesman, who belongs to a city. - 6.Write a query that produces all customers with their name, city, salesman and commission, who served by a salesman and the salesman works at a rate of commission within 12% to 14%. - 7.Write a SQL statement that produces all orders with order number, customer name, commission rate and earned commission amount for those customers who carry their grade more than 200 and served by an existing salesman. select T_Customer.Cust_Name , T_Salesman.Name ,T_Customer.City from T_Customer, T_Salesman where T_Customer.City=T_Salesman.City select T_Customer.Cust_Name, T_Salesman.Name from T_Salesman,T_Customer where T_Customer.SalesMan_ID=T_Salesman.SalesMan_ID select Ord_No,T_Orders.Customer_ID,T_Orders.SalesMan_ID from T_Salesman , T_Customer,T_Orders where T_Customer.City!=T_Salesman.City AND T_Orders.Customer_ID=T_Customer.Customer_ID AND T_Orders.SalesMan_ID= T_Salesman.SalesMan_ID; select Ord_No, T_Customer.Cust_Name from T_Orders , T_Customer where T_Orders.Customer_ID=T_Customer.Customer_ID select T_Customer.Cust_Name, T_Customer.Grade from T_Orders, T_Customer, T_Salesman where T_Orders.Customer_ID=T_Customer.Customer_ID and T_Orders.SalesMan_ID=T_Salesman.SalesMan_ID and T_Customer.Grade is not null and T_Salesman.city is not null select T_Customer.Customer_ID, T_Customer.Cust_Name ,T_Customer.City ,T_Salesman.SalesMan_ID, T_Salesman.Commission from T_Salesman , T_Customer where T_Customer.SalesMan_ID=T_Salesman.SalesMan_ID and T_Salesman.Commission between 0.12 and 0.14 select T_Orders.Ord_No ,Cust_Name, T_Orders.Purchase_Amt*T_Salesman.Commission from T_Customer , T_Salesman, T_Orders where T_Orders.Customer_ID=T_Customer.Customer_ID and T_Orders.SalesMan_ID=T_Salesman.SalesMan_ID and T_Customer.Grade 200 ### Joins - 1.Write a SQL statement to prepare a list with salesman name, customer name and their cities for the salesmen and customer who belongs to same city. - 2.Write a SQL statement to make a list with order no, purchase amount, customer name and their cities for those orders which order amount between 500 and 2000. - 3.Write a SQL statement to know which salesman are working for which customer. - 4.Write a SQL statement to find the list of customers who appointed a salesman for their jobs who gets a commission from the company is more than 12%. - 5.Write a SQL statement to find the list of customers who appointed a salesman for their jobs who does not live in same city where there customer lives, and gets a commission is above 12% . - 6.Write a SQL statement to find the details of a order i.e. order number, order date, amount of order, which customer gives the order and which salesman works for that customer and how much commission he gets for an order. - 7.Write a SQL statement to make a join within the tables salesman, customer and orders in such a form that the same column of each table will appear once and only the relational rows will come. - 8.Write a SQL statement to make a list in ascending order for the customer who works either through a salesman or by own. - 9.Write a SQL statement to make a list in ascending order for the customer who holds a grade less than 300 and works either through a salesman or by own. - 10.Write a SQL statement to make a report with customer name, city, order number, order date and order amount in ascending order according to the order date to find that either any of the existing customer have placed no order or placed one or more orders. - 11.Write a SQL statement to make a report with customer name, city, order number, order date, order amount salesman name and commission to find that either any of the existing customer have placed no order or placed one or more orders by their salesman or by own. - 12.Write a SQL statement to make a list in ascending order for the salesmen who works either for one or more customer or not yet join under any of the customer. - 13.Write a SQL statement to make a list for the salesmen who works either for one or more customer or not yet join under any of the customer who placed either one or more orders or no order to their supplier. - 14.Write a SQL statement to make a list for the salesmen who either work for one or more customer or yet to join any of the customer. The customer, may have placed, either one or more orders on or above order amount 2000 and must have a grade, or he may not have placed any order to the associated supplier. - 15.Write a SQL statement to make a report with customer name, city, order no. order date, purchase amount for those customers from the existing list who placed one or more orders or which order(s) have been placed by the customer who are not in the list. - 16. Write a SQL statement to make a report with customer name, city, order no. order date, purchase amount for only those customers in the list who must have a grade and placed one or more orders or which order(s) have been placed by the customer who are neither in the list not have a grade. - 17.Write a SQL statement to make a cartesian product between salesman and customer i.e. each salesman will appear for all customer and vice versa. - 18.Write a SQL statement to make a cartesian product between salesman and customer i.e. each salesman will appear for all customer and vice versa for those customer who belongs to a city. - 19. Write a SQL statement to make a cartesian product between salesman and customer i.e. each salesman will appear for all customer and vice versa for those salesmen who belongs to a city and the customers who must have a grade. - 20.Write a SQL statement to make a cartesian product between salesman and customer i.e. each salesman will appear for all customer and vice versa for those salesmen who must belongs a city which is not the same as his customer and the customers should have a own grade. select T_Salesman.Name, T_Customer.Cust_Name,T_Salesman.City from T_Customer,T_Salesman where T_Customer.City=T_Salesman.City select T_Orders.Ord_No , T_Orders.Purchase_Amt, T_Customer.Cust_Name ,T_Customer.City from T_Orders , T_Customer where T_Customer.Customer_ID=T_Orders.Customer_ID and T_Orders.Purchase_Amt between 500 and 2000 --select T_Salesman.Name, T_Customer.Cust_Name from T_Salesman , T_Customer where T_Customer.SalesMan_ID=T_Salesman.SalesMan_ID select b.Name, a.Cust_Name from T_Customer a inner join T_Salesman b on a.SalesMan_ID=b.SalesMan_ID select a.Cust_Name, b.Name,b.Commission from T_Customer a inner join T_Salesman b on a.SalesMan_ID=b.SalesMan_ID where b.Commission .12 select a.Cust_Name, b.Name,b.Commission from T_Customer a inner join T_Salesman b on a.SalesMan_ID=b.SalesMan_ID where b.Commission .12 and a.City b.City select a.Ord_No ,a.Ord_Date, a.Purchase_Amt,b.Cust_Name,c.Name,c.Commission from T_Orders a inner join T_Customer b on a.Customer_ID=b.Customer_ID inner join T_Salesman c on a.SalesMan_ID=c.SalesMan_ID -- doubt in 7 select * from T_Customer a left join T_Salesman b on a.SalesMan_ID=b.SalesMan_ID order by Customer_ID asc select * from T_Customer a left join T_Salesman b on a.SalesMan_ID=b.SalesMan_ID where a.Grade 300 order by Customer_ID asc select a.Cust_Name ,a.City,b.Ord_No,b.Ord_Date,b.Purchase_Amt from T_Customer a left join T_Orders b on a.Customer_ID=b.Customer_ID order by b.Ord_Date asc select a.Cust_Name ,a.City,b.Ord_No,b.Ord_Date,b.Purchase_Amt , c.Commission from T_Customer a left join T_Orders b on a.Customer_ID=b.Customer_ID left join T_Salesman c on b.SalesMan_ID=c.SalesMan_ID order by b.Ord_Date asc select * from T_Customer a left join T_Salesman b on a.SalesMan_ID=b.SalesMan_ID order by Customer_ID asc --select * from T_Salesman a left join T_Customer b on a.SalesMan_ID=b.SalesMan_ID left join T_Orders c on b.Customer_ID=c.Customer_ID select * from T_Salesman a right join T_Customer b on a.SalesMan_ID=b.SalesMan_ID right join T_Orders c on b.Customer_ID=c.Customer_ID select a.SalesMan_ID from T_Salesman a right join T_Customer b on a.SalesMan_ID=b.SalesMan_ID right join T_Orders c on b.Customer_ID=c.Customer_ID where c.Purchase_Amt 2000 and b.Grade is not null select b.Cust_Name,b.City,c.Ord_No,Ord_Date, c.Purchase_Amt from T_Salesman a right join T_Customer b on a.SalesMan_ID=b.SalesMan_ID right join T_Orders c on b.Customer_ID=c.Customer_ID select b.Cust_Name,b.City,c.Ord_No,Ord_Date, c.Purchase_Amt from T_Salesman a right join T_Customer b on a.SalesMan_ID=b.SalesMan_ID right join T_Orders c on b.Customer_ID=c.Customer_ID where b.Grade is not null select * from T_Customer a cross join T_Salesman select * from T_Salesman a cross join T_Customer b where a.City is not null select * from T_Salesman a cross join T_Customer b where a.City is not null and b.Grade is not null and a.City b.City ### Subqueries - 1.Write a query to display all the orders from the orders table issued by the salesman 'Paul Adam'. - 2.Write a query to display all the orders for the salesman who belongs to the city New York. - 3.Write a query to find all the orders issued against the salesman who works for customer whose id is 3007. - 4.Write a query to display all the orders which values are greater than the average order value for 10th October 2012. - 5.Write a query to find all orders attributed to salesman in New york. - 6.Write a query to display the commission of all the salesmen servicing customers in Paris. - 7.Write a query to display all the customers whose id is 2001 bellow the salesman ID of Mc Lyon. - 8.Write a query to counts the customers with grades above New York's average. - 9.Write a query to display all customers with orders on October 5, 2012. - 10.Write a query to display all the customers with orders issued on date 17th August, 2012. - 11.Write a query to find the name and numbers of all salesmen who had more than one customer - 12.Write a queries to find all orders with order amounts which is above-average amounts for their customers. - 13.Write a queries to find all orders with order amounts which is on or above-average amounts for their customers. - 14.Write a query to find the sums of the amounts from the orders table, grouped by date, eliminating all those dates where the sum was not at least 1000.00 above the maximum amount. - 15.Write a query to extract the data from the customer table if and only if one or more of the customers in the customer table are located in London. - 16.Write a query to display the name of salesmen who have multiple customers. - 17.Write a query to find the all salesmen name with only one customer. - 18.Write a query that are extracts the rows of all salesmen who have customers with more than one current order. - 19.Write a query to find salesman with customers located in their cities. - 20.Write a query to find all the salesmen for whom there are customers that follow them. - 21.Write a query to display the salesmen which name are alphabetically lower than the name of the customers. - 22.Write a query to display the customers who have a greater gradation than any customer who belongs to the alphabetically lower than the city New York. - 23.Write a query to display all the orders that had amounts that were greater than at least one of the orders from October 9th 2012. - 24.Write a query to find all orders with amount smaller than any amount for a customer in London. - 25.Write a query to display all orders with amount smaller than any amount for a customer in London. - 26.Write a query to display only those customers whose grade are, in fact, higher than every customer in New York. - 27.Write a query to find only those customers whose grade are, higher than every customer to the city New York. - 28.Write a query to find all grade for those customers who belongs to the city Rome. - 29.Write a query to find all those customers whose grade are not as the grade, belongs to the city Paris. - 30.Write a query to find all those customers who holds a different grade than any customer of the city Dallas. select * from T_Orders where SalesMan_ID=(select SalesMan_ID from T_Salesman where Name='Paul Adam'); select * from T_Orders where SalesMan_ID=(select SalesMan_ID from T_Salesman where City='New York') select * from T_Orders where SalesMan_ID=(select SalesMan_ID from T_Orders where Customer_ID=3007) select * from T_Orders where Purchase_Amt (select AVG(Purchase_Amt) from T_Orders where Ord_Date='2012-10-10') select * from T_Orders where SalesMan_ID=(select SalesMan_ID from T_Salesman where City='New York') select * from T_Salesman where SalesMan_ID=(select SalesMan_ID from T_Customer where City='Paris') select * from T_Customer where Customer_ID=(select SalesMan_ID-2001 from T_Salesman where Name='Mc Lyon') select COUNT(*) from T_Customer where Grade (select AVG(Grade) from T_Customer where City='New York') select * FROM T_CUSTOMER where Customer_Id IN(select Customer_Id FROM T_ORDERS where Ord_Date='10/05/2012'); select * from T_CUSTOMER where Customer_Id IN(select Customer_Id FROM T_ORDERS where Ord_Date='08/17/2012'); select Salesman_Id, Name FROM T_SALESMAN where Salesman_Id IN(select Salesman_Id FROM T_ORDERS GROUP BY Salesman_Id HAVING COUNT(DISTINCT(Customer_id)) 1); select * FROM T_ORDERS Torm where Purchase_Amt (select AVG(Purchase_Amt) FROM T_ORDERS Tori where Torm.Customer_id=Tori.Customer_id ); select * FROM T_ORDERS Torm where Purchase_Amt =(select AVG(Purchase_Amt) FROM T_ORDERS Tori where Torm.Customer_id=Tori.Customer_id ); select SUM(Purchase_Amt)AS 'Total Purchase ' ,Ord_Date FROM T_ORDERS Torm GROUP BY Ord_Date HAVING SUM(Purchase_Amt) (select MAX(Purchase_Amt)+1000 FROM T_ORDERS Tori where Tori.Ord_Date=Torm.Ord_Date); select * FROM T_CUSTOMER where EXISTS (select Customer_Id FROM T_CUSTOMER where City='London'); select Salesman_Id, Name FROM T_SALESMAN where Salesman_Id IN(select Salesman_Id FROM T_ORDERS GROUP BY Salesman_Id HAVING COUNT(DISTINCT(Customer_id)) 1); select Salesman_Id, Name FROM T_SALESMAN where Salesman_Id IN(select Salesman_Id FROM T_ORDERS GROUP BY Salesman_Id HAVING COUNT(DISTINCT(Customer_id))=1); select Salesman_Id, Name FROM T_SALESMAN where Salesman_Id IN(select Ord_No FROM T_ORDERS GROUP BY Customer_id,Salesman_Id HAVING COUNT(Ord_No) 1);--/ Pending select * FROM T_SALESMAN where CITY IN(select DISTINCT(CITY) FROM T_CUSTOMER) select * FROM T_SALESMAN where CITY IN(select DISTINCT(CITY) FROM T_CUSTOMER) ; select * FROM T_SALESMAN Ts where EXISTS(select Customer_Id FROM T_CUSTOMER where Cust_name Ts.Name); select * FROM T_CUSTOMER Tc where Grade ANY (select Grade FROM T_CUSTOMER where City 'New York' ); select * FROM T_ORDERS where Purchase_Amt ANY(select Purchase_Amt FROM T_ORDERS where Ord_Date='10/09/2012'); select * FROM T_ORDERS where Purchase_Amt ANY(select Purchase_amt FROM T_ORDERS where Customer_id IN(select Customer_id FROM T_CUSTOMER where City='lONDON')); select * FROM T_ORDERS where Purchase_Amt ANY(select Purchase_amt FROM T_ORDERS where Customer_id IN(select Customer_id FROM T_CUSTOMER where City='lONDON')); select * FROM T_CUSTOMER where Grade ALL(select Grade FROM T_CUSTOMER where City='New York' ); select * FROM T_CUSTOMER where Grade ALL(select Grade FROM T_CUSTOMER where City='New York' ); select * FROM T_CUSTOMER where City='Rome'; select * FROM T_CUSTOMER where GRADE NOT IN(select Grade FROM T_CUSTOMER where CITY='Paris'); select * FROM T_CUSTOMER where GRADE NOT IN(select Grade FROM T_CUSTOMER where CITY='Dallas'); ### Union - 1.Write a query to display all salesmen and customer located in California. - 2.Write a query to display distinct salesman and their cities. - 3.Write a query to display all the salesmen and customer. - 4.Write a query to make a report of which salesman produce the largest and smallest orders on each date. - 5.Write a query to make a report of which salesman produce the largest and smallest orders on each date and arranged the orders number in smallest to largest number. - 6.Write a query to list all the salesmen, and indicate those who do not have customers in their cities, as well as those who do. - 7.Write a query to that appends strings to the selected fields, indicating whether or not a specified salesman was matched to a customer in his city. - 8.Create a union of two queries that shows the names, cities, and ratings of all customers. Those with a rating of 200 or greater will also have the words High Rating , while the others will have the words Low Rating . - 9.Write a command that produces the name and number of each salesman and each customer with more than one current order. Put the results in alphabetical order. --1 select Cust_name,City from T_CUSTOMER where City='California' UNION select Name,City from T_SALESMAN where City='California'; --2 select Distinct Cust_Name from T_Customer UNION select Distinct Name from T_Salesman --3 select Cust_Name from T_Customer UNION select Name from T_Salesman --4 select 'Highest',Ts.Salesman_id,Ts.Name,Purchase_Amt,Ord_No,Ord_Date from T_ORDERS Tor,T_SALESMAN Ts where Tor.Salesman_id=Ts.Salesman_Id AND Purchase_Amt = (select MAX(Purchase_Amt) from T_orders Tori where Tori.Ord_Date=Tor.Ord_Date) UNION select 'Lowest',Ts.Salesman_id,Ts.Name,Purchase_Amt,Ord_No,Ord_Date from T_ORDERS Tor,T_SALESMAN Ts where Tor.Salesman_id=Ts.Salesman_Id AND Purchase_Amt = (select MIN(Purchase_Amt) from T_orders Tori where Tori.Ord_Date=Tor.Ord_Date) --5 select 'Highest',Ts.Salesman_id,Ts.Name,Purchase_Amt,Ord_No,Ord_Date from T_ORDERS Tor,T_SALESMAN Ts where Tor.Salesman_id=Ts.Salesman_Id AND Purchase_Amt = (select MAX(Purchase_Amt) from T_orders Tori where Tori.Ord_Date=Tor.Ord_Date) UNION select 'Lowest',Ts.Salesman_id,Ts.Name,Purchase_Amt,Ord_No,Ord_Date from T_ORDERS Tor,T_SALESMAN Ts where Tor.Salesman_id=Ts.Salesman_Id AND Purchase_Amt = (select MIN(Purchase_Amt) from T_orders Tori where Tori.Ord_Date=Tor.Ord_Date) order by Ord_No --6 select * from T_SALESMAN where City NOT IN (select City from T_CUSTOMER ) UNION select * from T_SALESMAN where City IN(select CITY from T_CUSTOMER ) --7 select Ts.Salesman_Id,Name,Ts.City, 'Match' from T_SALESMAN Ts,T_CUSTOMER Tc where Ts.City=Tc.City UNION select Salesman_id ,Ts.Name, Ts.City ,'No Match' from T_SALESMAN Ts where Ts.City NOT IN(select City from T_CUSTOMER) --8 select Cust_Name,City,Grade,'High Rating' from T_CUSTOMER where Grade =200 UNION select Cust_Name,City,Grade,'Low Rating' from T_CUSTOMER where Grade 200 --9 select Customer_Id,Cust_Name from T_CUSTOMER Tc where 1 (select COUNT( ) from T_ORDERS Tor where Tc.Customer_Id=Tor.Customer_id ) UNION select Salesman_id,Name from T_SALESMAN Ts where 1 (select COUNT( ) from T_ORDERS Tor where Ts.Salesman_Id=Tor.Salesman_id ) ORDER BY Cust_name ### Views - 1.Write a query to create a view for all salesmen with columns salesman_id, name and city. - 2.Write a query to create a view for all salesmen with columns salesman_id, name and city. - 3.Write a query to find the salesmen of the city New York who achieved the commission more than 13%. - 4.Write a query to create a view to get a count of how many customers we have at each level of grade. - 5.Write a query to create a view to keep track the number of customers ordering, number of salesmen attached, average amount of orders and total amount of orders in a day. - 6.Write a query to create a view that shows for each order the salesman and customer by name. - 7.Write a query to create a view that find the salesman who has the customer with the highest order on a day. - 8.Write a query to create a view that find the salesman who has the customer with the highest order at least 3 times on a day. - 9.Write a query to create a view that shows all of the customers who have the highest grade. - 10.Write a query to create a view that shows the number of salesman in each city. - 11.Write a query to create a view that shows the average and total orders for each salesman after his or her name. (Assume all names are unique) - 12.Write a query to create a view that shows each salesman with more than one customers. - 13.Write a query to create a view that shows all matches of customers with salesman such that at least one customer in the city of customer served by a salesman in the city of salesman. - 14.Write a query to create a view that shows the number of orders in each day. - 15.Write a query to create a view that find the salesmen who issued orders on October 10th, 2012. - 16.Write a query to create a view that find the salesmen who issued orders on either August 17th, 2012 or October 10th, 2012. --1 CREATE VIEW SALESMAN_INFO AS select Salesman_id,Name,City from T_SALESMAN --2 CREATE VIEW SALESMAN_INFO AS select Salesman_id,Name,City from T_SALESMAN --3 CREATE VIEW SALES_COM_NEW AS SELECT * FROM T_SALESMAN WHERE City='New York'AND Commission .13; --4 CREATE VIEW CUST_SAME_LEVEL AS (SELECT Grade,COUNT( ) AS 'COunt ' FROM T_CUSTOMER GROUP BY Grade); --5 CREATE VIEW TRACKDATA AS SELECT Ord_Date,COUNT( DISTINCT Customer_id)'Customers',AVG(Purchase_Amt)'Avg Purchase',SUM(Purchase_Amt) 'Total Purchase'FROM T_ORDERS GROUP BY ord_date; SELECT * FROM TRACKDATA; --6 CREATE VIEW ORD_SAL_CUST AS (SELECT Ord_Num,Cust_Name,Name FROM T_ORDERS Tor,T_CUSTOMER Tc,T_SALESMAN Ts WHERE Tor.salesman_id=Ts.Salesman_Id AND Tor.Customer_id=Tc.Customer_Id ); SELECT * FROM ORD_SAL_CUST; --7 CREATE VIEW HIGHEST_ORDER AS SELECT Ord_No,Ts.Salesman_Id,Ts.Name FROM T_ORDERS Tor,T_SALESMAN Ts WHERE Tor.Salesman_id=Ts.Salesman_Id AND Tor.Purchase_Amt =(SELECT MAX(purchase_amt) FROM T_ORDERS Tori WHERE Tor.ord_date=tori.ord_date); SELECT * FROM HIGHEST_ORDER; --8 CREATE VIEW hIGHEST3 AS SELECT Salesman_id,Name FROM T_SALESMAN Ts WHERE 3 =(SELECT COUNT( ) FROM T_SALESMAN TsI WHERE TsI.Salesman_Id=Ts.Salesman_Id); SELECT * FROM hIGHEST3 --9 CREATE VIEW HIGHEST_GRADE AS SELECT MAX(GRADE)AS 'GRADE' FROM T_CUSTOMER; SELECT * FROM HIGHEST_GRADE; --10 CREATE VIEW CITYWISE_SALESMAN AS SELECT CITY,COUNT(CITY)AS 'COUNT' FROM T_SALESMAN GROUP BY City SELECT * FROM CITYWISE_SALESMAN --11 CREATE VIEW AVGORD_SALESMAN AS SELECT Ts.Name,AVG(Purchase_Amt)AS 'AVG ORDER',COUNT(Purchase_Amt)AS 'TOTAL ORDER' FROM T_ORDERS Tor,T_SALESMAN Ts WHERE Tor.salesman_id=TS.Salesman_Id GROUP BY Ts.Name SELECT * FROM AVGORD_SALESMAN --12 CREATE VIEW SALESCUST1GREAT AS SELECT * FROM T_SALESMAN Ts WHERE 1 (SELECT COUNT( ) FROM T_CUSTOMER Tc WHERE Tc.salesman_id=Ts.Salesman_Id); SELECT * FROM SALESCUST1GREAT; --13 CREATE VIEW citymatch(custcity, salescity) AS SELECT DISTINCT a.City, b.City FROM T_Customer a, T_Salesman b WHERE a.SalesMan_ID = b.SalesMan_ID --14 CREATE VIEW ORDEREACHDAY AS SELECT Ord_Date,COUNT( )AS 'On DAte Order' FROM T_ORDERS GROUP BY Ord_Date; SELECT * FROM ORDEREACHDAY; --15 CREATE VIEW ORDERONDATE10TH AS SELECT * FROM T_Salesman WHERE Salesman_Id IN(SELECT Salesman_Id FROM T_ORDERS WHERE Ord_Date='10/10/2012') SELECT * FROM ORDERONDATE10TH; --16 CREATE VIEW ORDERONDATE12TH AS SELECT * FROM T_Salesman WHERE Salesman_Id IN(SELECT Salesman_Id FROM T_ORDERS WHERE Ord_Date='10/10/2012' OR Ord_Date='08/17/2012'); SELECT * FROM ORDERONDATE12TH; ```","title":"SQL"},{"location":"sql/#sql-statements","text":"1.Create a table T_Salesman a.SalesMan_Id - Primary key b.Name c.City d.Commission 2.Create a table T_Customer a.Customer_Id - Primary Key b.Cust_Name c.City d.Grade e.SalesMan_Id 3.Create a table T_Orders a.Ord_num - Primary Key b.Purchase_Amt c.Ord_Date d.Customer_Id - Foreign Key (T_Customer) e.SalesMan_Id - Foreign Key (T_Salesman) CREATE TABLE T_Salesman (SalesMan_ID numeric(5) primary key, Name varchar(30), City varchar(15), Commission decimal(5,2)); CREATE TABLE T_Customer (Customer_ID numeric(5) primary key, Cust_Name varchar(30), City varchar(15), Grade numeric(3), SalesMan_ID numeric(5)); create table T_Orders(Ord_No numeric(5) primary key, Purchase_Amt decimal(8,2), Ord_Date date, Customer_ID numeric(5) references T_Customer(Customer_ID), SalesMan_ID numeric(5) references T_SalesMan(SalesMan_ID)); Inserting data into each table insert into T_Customer values(3002,'Nick Rimando','New York',100,5001); insert into T_Salesman values(5001,'James Hoog','New York',0.15); insert into T_Orders values(70001, 150.5 , '2012-10-05 ', 3005 , 5002);","title":"SQL Statements"},{"location":"sql/#retriving-data-from-tables","text":"1.Write a sql statement to display all the information of all salesmen. 2.Write a sql statement to display a string \"This is SQL Exercise, Practice and Solution\". 3.Write a query to display three numbers (5,10,15) in three columns. 4.Write a query to display the sum of two numbers 10 and 15. 5.Write a query to display the result of an arithmetic expression. 10+15-5*2 6.Write a sql statement to display specific columns like name and commission for all the salesmen. 7.Write a query to display the columns in a specific order like order date, salesman id, order number and purchase amount from for all the orders. 8.Write a query which will retrieve the value of salesman id of all salesmen, getting orders from the customers in orders table without any repeats. 9.Write a sql statement to display names and city of salesman, who belongs to the city of Paris. 10.Write a sql statement to display all the information for those customers with a grade of 200. 11.Write a sql query to display the order number followed by order date and the purchase amount for each order which will be delivered by the salesman who is holding the ID 5001. select * from T_Salesman; SELECT 'This is SQL Exercise, Practice and Solution'; select 5,10,15; select 10+15; select 10+15-5*2; select Name ,Commission from T_Salesman; select Ord_Date, SalesMan_ID,Ord_Date,Purchase_Amt from T_Orders; select Distinct SalesMan_ID from T_Orders; select Name ,City from T_Salesman where City='Paris'; select * from T_Customer where Grade=200; select Ord_No,Purchase_Amt,Ord_Date from T_Orders where SalesMan_ID=5001;","title":"Retriving Data from Tables"},{"location":"sql/#using-boolean-and-relational-operators","text":"1.Write a query to display all customers with a grade above 100. 2.Write a query statement to display all customers in New York who have a grade value above 100. 3.Write a SQL statement to display all customers, who are either belongs to the city New York or had a grade above 100. 4.Write a SQL statement to display all the customers, who are either belongs to the city New York or not had a grade above 100. 5.Write a SQL query to display those customers who are neither belongs to the city New York nor grade value is more than 100. 6.Write a SQL statement to display either those orders which is not issued on date 2012-09-10 and issued by the salesman whose ID is 505 and below or those orders which purchase amount is 1000.00 and below. 7.Write a SQL statement to display salesman_id, name, city and commission who gets the commission within the range more than 0.10% and less than 0.12%. 8.Write a SQL statement to display all information where purchase amount less than a specified amount or order date is less than a specified date and customer id greater than or equal to a specified number, then display the output in descending order of order date. 9.Write a SQL query to display all orders where purchase amount less than a specified amount or orders in a specified date and customer ID less than a specified number, then display the output in descending order of order date 10.Display all in descending order of order date where order dates equal to a specified date or customer id greater than a specified number and purchase amount less than a specified amount. select * from T_Customer where Grade 100; select * from T_Customer where Grade 100 AND City='New York' ; select * from T_Customer where NOT Grade 100 or City='New York' ; select * from T_Customer where NOT Grade 100 or not City='New York' ; select * from T_Customer where NOT Grade 100 or not City='New York' ; select * from T_Orders Where (Not Ord_Date='2012-09-10' and SalesMan_ID=505) or Purchase_Amt =1000.0; select * from T_Salesman where Commission 0.10 and Commission 0.12; select * from T_Orders where (Purchase_Amt 300.0 or Ord_Date ='2012-09-10') and Customer_ID 3009 order by Ord_Date desc; select * from T_Orders where ((Purchase_Amt 300 or Ord_Date ='2012-09-10') and Customer_ID 3009 )order by Ord_Date desc ; select * from T_Orders where Ord_Date ='2012-09-10' or Customer_ID 3009 order by Ord_Date desc;","title":"Using Boolean and Relational operators"},{"location":"sql/#wild-card-and-special-operators","text":"1.Write a SQL statement to find those salesmen with all information who come from the city either Paris or Rome. 2.Write a query to filter those salesmen with all information who comes from any of the cities Paris and Rome. 3.Write a query to filter those salesmen with all information who likes to leave other cities than Paris and Rome. 4.Write a query to sort out those customers with all information whose ID value is within any of 3007, 3008 and 3009. 5.Write a SQL statement to find those salesmen with all information who gets the commission within a range of 0.12 and 0.14. 6.Write a query to filter all those orders with all information which purchase amount value is within the range 500 and 4000 except those orders of purchase amount value 948.50 and 1983.43. 7.Write a SQL statement to find those salesmen with all other information and name started with any letter 'A' and 'L'. 8.Write a SQL statement to find those salesmen with all other information and name started with other than any letter within 'A' and 'L'. 9.Write a SQL statement to find those customer with all information whose name begin with the letter 'B'. 10.Write a SQL statement to find all those customer with all information whose names are ending with the letter 'n'. 11.Write a SQL statement to find those salesmen with all information whose name contain only four characters, in which 1st character must be 'N' and 4th character is l and rests may be any character. select * from T_Salesman where City='Rome' or CITY='Paris'; select * from T_Salesman where City in('Rome','Paris'); select * from T_Salesman where City not in('Rome','Paris'); select * from T_Customer where Customer_ID in (3007,3008,3009); select * from T_Salesman where Commission between 0.12 and 0.14; select * from T_Orders where (Purchase_Amt between 500 and 4000) and (Purchase_Amt not in (948.50,1983.43)) ; select * from T_Salesman where Name between 'A' and 'L'; select * from T_Salesman where Name not between 'A' and 'L'; select * from T_Customer where Cust_Name like 'B%'; select * from T_Customer where Cust_Name like'%n'; select * from T_Salesman where Name like 'N__l%'","title":"Wild Card and Special Operators"},{"location":"sql/#special-characters","text":"Sample Data - \u2018Test Table\u2019 col1 ```A001/DJ-402\\44_/100/2015 A001_\\DJ-402\\44_/100/2015 A001_DJ-402-2014-2015 A002_DJ-401-2014-2015 A001/DJ_401 A001/DJ_402\\44 A001/DJ_402\\44\\2015 A001/DJ-402%45\\2015/200 A001/DJ_402\\45\\2015%100 A001/DJ_402%45\\2015/300 A001/DJ-402\\44 - 12.Write a SQL statement to find those rows from the table test table which contain the escape character underscore ( _ ) in its column 'col1'. - 13.Write a SQL statement to find those rows from the table test table which does not contain the character underscore ( _ ) in its column 'col1'. - 14.Write a SQL statement to find those rows from the table test table which contain the escape character ( / ) in its column 'col1'. - 15.Write a SQL statement to find those rows from the table test table which does not contain the escape character ( / ) in its column 'col1'. - 16.Write a SQL statement to find those rows from the table test table which contain the string ( _/ ) in its column 'col1'. - 17.Write a SQL statement to find those rows from the table test table which does not contain the string ( _/ ) in its column 'col1'. - 18.Write a SQL statement to find those rows from the table test table which contain the character ( % ) in its column 'col1'. - 19.Write a SQL statement to find those rows from the table test table which does not contain the character ( % ) in its column 'col1'. - 20.Write a SQL statement to find those customer with all information who does not get any grade except NULL. 21.Write a SQL statement to find those customer with all information who gets a grade except NULL value. select * from TestTable where col1 like '%/ %' escape '/' ; select * from TestTable where col1 not like '%/ %' escape '/' ; select * from TestTable where col1 like '%//%' escape '/' ; select * from TestTable where col1 not like '%//%' escape '/' ; select * from TestTable where col1 like '%/ //%' escape '/' ; select * from TestTable where col1 not like '%/ //%' escape '/' ; select * from TestTable where col1 like '%/%%' escape '/'; select * from TestTable where col1 not like '%/%%' escape '/'; select * from T_Customer where Grade is null; select * from T_Customer where Grade is not null; ### Aggregate Functions - 1.Write a SQL statement to find the total purchase amount of all orders. - 2.Write a SQL statement to find the average purchase amount of an order - 3.Write a SQL statement to find the number of salesmen currently listing for all of their customers. - 4.Write a SQL statement know how many customer have listed their names with other information. - 5.Write a SQL statement find the number of customers who gets at least a gradation for his/her performance. - 6.Write a SQL statement to get the maximum purchase amount of all the orders. - 7.Write a SQL statement to get the minimum purchase amount of all the orders. - 8.Write a SQL statement which selects the highest grade for each of the cities of the customers. - 9.Write a SQL statement to find the highest purchase amount ordered by the each customer with their ID and highest purchase amount. - 10.Write a SQL statement to find the highest purchase amount ordered by the each customer on a particular date with their ID, order date and highest purchase amount. - 11.Write a SQL statement to find the highest purchase amount in a date '2012-08-17' for each salesman with their ID. - 12.Write a SQL statement to find the highest purchase amount with their ID and order date, for only those customers who have highest purchase amount in a day is more than 2000. - 13.Write a SQL statement to find the highest purchase amount with their ID and order date, for those customers who have a higher purchase amount in a day is within the range 2000 and 6000. - 14.Write a SQL statement to find the highest purchase amount with their ID and order date, for only those customers who have a higher purchase amount in a day is within the list 2000, 3000, 5760 and 6000. - 15.Write a SQL statement to find the highest purchase amount with their ID, for only those customers whose ID is within the range 3002 and 3007. - 16.Write a SQL statement to display customer details (ID and purchase amount) whose IDs are within the range 3002 and 3007 and highest purchase amount is more than 1000. - 17.Write a SQL statement to find the highest purchase amount with their ID, for only those salesmen whose ID is within the range 5003 and 5008. - 18.Write a SQL statement that counts all orders for a date August 17th, 2012. - 19.Write a SQL statement that counts the number of different non NULL city values for salesmen. - 20.Write a query that counts the number of salesmen with their order date and ID registering orders for each day. select sum(Purchase_Amt) from T_Orders; select avg(Purchase_Amt) from T_Orders ; select count(distinct SalesMan_ID ) from T_Orders; select count(distinct Customer_ID )from T_Customer; select count(ALL Grade) from T_Customer; select MAX(Purchase_Amt)from T_Orders; select MIN(Purchase_Amt)from T_Orders; Select City , Max(Grade) from T_Customer group by City; select Max(Purchase_Amt) ,Customer_ID from T_Orders group by Customer_ID; select Customer_ID,Ord_Date ,max(Purchase_Amt) from T_Orders group by Ord_Date,Customer_ID; select SalesMan_ID,Max(Purchase_Amt) from T_Orders where Ord_Date='2012-08-17' group by SalesMan_ID; select Customer_ID,Ord_Date, max(Purchase_Amt) from T_Orders group by Customer_ID, Ord_Date having max(Purchase_Amt) 2000; select Customer_ID,Ord_date,max(Purchase_Amt) from T_Orders group by Customer_ID, Ord_Date having MAX(Purchase_Amt) between 2000 and 6000; --select Customer_ID,Ord_Date,max(Purchase_Amt) from T_Orders GROUP BY Customer_ID,Ord_Date having MAX(Purchase_Amt) like '2___.%' select Customer_ID,Ord_Date,max(Purchase_Amt) from T_Orders GROUP BY Customer_ID,Ord_Date having MAX(Purchase_Amt) in (2000,3000,5760,6000) select Customer_ID,MAX(Purchase_Amt) from T_Orders group by Customer_ID having Customer_ID between 3002 and 3007 select Customer_ID, max(Purchase_Amt) from T_Orders where Customer_ID between 3002 and 3007 group by Customer_ID having MAX(Purchase_Amt) 1000 select SalesMan_ID, MAX(Purchase_Amt) from T_Orders group by SalesMan_ID having SalesMan_ID between 5003 and 5008 select count(*) from T_Orders where Ord_Date='2012-08-17' select SalesMan_ID, Ord_Date,COUNT(*) from T_Orders group by Ord_Date, SalesMan_ID ### Formatting Output - 1.Write a SQL statement to find out the number of orders booked for each day and display it in such a format like For 2001-10-10 there are 15 orders . - 2.Write a query to display the orders according to the order number arranged by ascending order. - 3.Write a SQL statement to arrange the orders according to the order date in such a manner that the latest date will come first then previous dates. - 4.Write a SQL statement to display the orders with all information in such a manner that the latest order date with highest purchase amount will come first. - 5.Write a SQL statement to display the customer name, city and grade etc. and smallest customer ID will comes first. - 6.Write a SQL statement to make a report with salesman ID, order date in such an arrangement that, the smallest salesman ID will come first along with their smallest order date and highest purchase amount. - 7.Write a SQL statement to display customer name, city and grade in such a manner that, the customer holding highest grade will comes first. - 8.Write a SQL statement make a report with customer ID in such a manner that, the largest number of orders booked by the customer will comes first along with their highest purchase amount. - 9.Write a SQL statement to make a report with order date in such a manner that, the latest order date will comes first along with the total purchase amount and total commission (15% for all salesmen) for that date. select 'FOR' ,Ord_Date,'there are' ,COUNT(distinct Ord_No), 'Orders' from T_Orders group by Ord_Date select * from T_orders order by Ord_No asc select * from T_Orders order by Ord_Date desc select * from T_Orders order by Ord_Date,Purchase_Amt desc select Cust_Name, City, Grade from T_Customer order by Customer_ID asc select SalesMan_ID, Ord_Date , max(Purchase_Amt) from T_Orders group by SalesMan_ID, Ord_Date order by SalesMan_ID , Ord_Date select Cust_Name, City, Grade from T_Customer order by Grade desc select Customer_ID,count(distinct Ord_No),MAX(Purchase_Amt) from T_Orders group by Customer_ID order by MAX(Purchase_Amt) DESC select Ord_Date ,sum(Purchase_Amt),sum(Purchase_Amt)*.15 from T_Orders group by Ord_Date order by Ord_Date ### Queries on Multiple Table - 1.Write a query to find those customers with their name and those salesmen with their name and city who lives in the same city. - 2.Write a SQL statement to find the names of all customers along with the salesmen who works for them. - 3.Write a SQL statement to display all those orders by the customers not located in the same cities where their salesmen lives. - 4.Write a SQL statement that find out each order number followed by the name of the customers who made the order. - 5.Write a SQL statement that short out the customer and their grade who made an order. Each of the customer must have a grade and served by at least a salesman, who belongs to a city. - 6.Write a query that produces all customers with their name, city, salesman and commission, who served by a salesman and the salesman works at a rate of commission within 12% to 14%. - 7.Write a SQL statement that produces all orders with order number, customer name, commission rate and earned commission amount for those customers who carry their grade more than 200 and served by an existing salesman. select T_Customer.Cust_Name , T_Salesman.Name ,T_Customer.City from T_Customer, T_Salesman where T_Customer.City=T_Salesman.City select T_Customer.Cust_Name, T_Salesman.Name from T_Salesman,T_Customer where T_Customer.SalesMan_ID=T_Salesman.SalesMan_ID select Ord_No,T_Orders.Customer_ID,T_Orders.SalesMan_ID from T_Salesman , T_Customer,T_Orders where T_Customer.City!=T_Salesman.City AND T_Orders.Customer_ID=T_Customer.Customer_ID AND T_Orders.SalesMan_ID= T_Salesman.SalesMan_ID; select Ord_No, T_Customer.Cust_Name from T_Orders , T_Customer where T_Orders.Customer_ID=T_Customer.Customer_ID select T_Customer.Cust_Name, T_Customer.Grade from T_Orders, T_Customer, T_Salesman where T_Orders.Customer_ID=T_Customer.Customer_ID and T_Orders.SalesMan_ID=T_Salesman.SalesMan_ID and T_Customer.Grade is not null and T_Salesman.city is not null select T_Customer.Customer_ID, T_Customer.Cust_Name ,T_Customer.City ,T_Salesman.SalesMan_ID, T_Salesman.Commission from T_Salesman , T_Customer where T_Customer.SalesMan_ID=T_Salesman.SalesMan_ID and T_Salesman.Commission between 0.12 and 0.14 select T_Orders.Ord_No ,Cust_Name, T_Orders.Purchase_Amt*T_Salesman.Commission from T_Customer , T_Salesman, T_Orders where T_Orders.Customer_ID=T_Customer.Customer_ID and T_Orders.SalesMan_ID=T_Salesman.SalesMan_ID and T_Customer.Grade 200 ### Joins - 1.Write a SQL statement to prepare a list with salesman name, customer name and their cities for the salesmen and customer who belongs to same city. - 2.Write a SQL statement to make a list with order no, purchase amount, customer name and their cities for those orders which order amount between 500 and 2000. - 3.Write a SQL statement to know which salesman are working for which customer. - 4.Write a SQL statement to find the list of customers who appointed a salesman for their jobs who gets a commission from the company is more than 12%. - 5.Write a SQL statement to find the list of customers who appointed a salesman for their jobs who does not live in same city where there customer lives, and gets a commission is above 12% . - 6.Write a SQL statement to find the details of a order i.e. order number, order date, amount of order, which customer gives the order and which salesman works for that customer and how much commission he gets for an order. - 7.Write a SQL statement to make a join within the tables salesman, customer and orders in such a form that the same column of each table will appear once and only the relational rows will come. - 8.Write a SQL statement to make a list in ascending order for the customer who works either through a salesman or by own. - 9.Write a SQL statement to make a list in ascending order for the customer who holds a grade less than 300 and works either through a salesman or by own. - 10.Write a SQL statement to make a report with customer name, city, order number, order date and order amount in ascending order according to the order date to find that either any of the existing customer have placed no order or placed one or more orders. - 11.Write a SQL statement to make a report with customer name, city, order number, order date, order amount salesman name and commission to find that either any of the existing customer have placed no order or placed one or more orders by their salesman or by own. - 12.Write a SQL statement to make a list in ascending order for the salesmen who works either for one or more customer or not yet join under any of the customer. - 13.Write a SQL statement to make a list for the salesmen who works either for one or more customer or not yet join under any of the customer who placed either one or more orders or no order to their supplier. - 14.Write a SQL statement to make a list for the salesmen who either work for one or more customer or yet to join any of the customer. The customer, may have placed, either one or more orders on or above order amount 2000 and must have a grade, or he may not have placed any order to the associated supplier. - 15.Write a SQL statement to make a report with customer name, city, order no. order date, purchase amount for those customers from the existing list who placed one or more orders or which order(s) have been placed by the customer who are not in the list. - 16. Write a SQL statement to make a report with customer name, city, order no. order date, purchase amount for only those customers in the list who must have a grade and placed one or more orders or which order(s) have been placed by the customer who are neither in the list not have a grade. - 17.Write a SQL statement to make a cartesian product between salesman and customer i.e. each salesman will appear for all customer and vice versa. - 18.Write a SQL statement to make a cartesian product between salesman and customer i.e. each salesman will appear for all customer and vice versa for those customer who belongs to a city. - 19. Write a SQL statement to make a cartesian product between salesman and customer i.e. each salesman will appear for all customer and vice versa for those salesmen who belongs to a city and the customers who must have a grade. - 20.Write a SQL statement to make a cartesian product between salesman and customer i.e. each salesman will appear for all customer and vice versa for those salesmen who must belongs a city which is not the same as his customer and the customers should have a own grade. select T_Salesman.Name, T_Customer.Cust_Name,T_Salesman.City from T_Customer,T_Salesman where T_Customer.City=T_Salesman.City select T_Orders.Ord_No , T_Orders.Purchase_Amt, T_Customer.Cust_Name ,T_Customer.City from T_Orders , T_Customer where T_Customer.Customer_ID=T_Orders.Customer_ID and T_Orders.Purchase_Amt between 500 and 2000 --select T_Salesman.Name, T_Customer.Cust_Name from T_Salesman , T_Customer where T_Customer.SalesMan_ID=T_Salesman.SalesMan_ID select b.Name, a.Cust_Name from T_Customer a inner join T_Salesman b on a.SalesMan_ID=b.SalesMan_ID select a.Cust_Name, b.Name,b.Commission from T_Customer a inner join T_Salesman b on a.SalesMan_ID=b.SalesMan_ID where b.Commission .12 select a.Cust_Name, b.Name,b.Commission from T_Customer a inner join T_Salesman b on a.SalesMan_ID=b.SalesMan_ID where b.Commission .12 and a.City b.City select a.Ord_No ,a.Ord_Date, a.Purchase_Amt,b.Cust_Name,c.Name,c.Commission from T_Orders a inner join T_Customer b on a.Customer_ID=b.Customer_ID inner join T_Salesman c on a.SalesMan_ID=c.SalesMan_ID -- doubt in 7 select * from T_Customer a left join T_Salesman b on a.SalesMan_ID=b.SalesMan_ID order by Customer_ID asc select * from T_Customer a left join T_Salesman b on a.SalesMan_ID=b.SalesMan_ID where a.Grade 300 order by Customer_ID asc select a.Cust_Name ,a.City,b.Ord_No,b.Ord_Date,b.Purchase_Amt from T_Customer a left join T_Orders b on a.Customer_ID=b.Customer_ID order by b.Ord_Date asc select a.Cust_Name ,a.City,b.Ord_No,b.Ord_Date,b.Purchase_Amt , c.Commission from T_Customer a left join T_Orders b on a.Customer_ID=b.Customer_ID left join T_Salesman c on b.SalesMan_ID=c.SalesMan_ID order by b.Ord_Date asc select * from T_Customer a left join T_Salesman b on a.SalesMan_ID=b.SalesMan_ID order by Customer_ID asc --select * from T_Salesman a left join T_Customer b on a.SalesMan_ID=b.SalesMan_ID left join T_Orders c on b.Customer_ID=c.Customer_ID select * from T_Salesman a right join T_Customer b on a.SalesMan_ID=b.SalesMan_ID right join T_Orders c on b.Customer_ID=c.Customer_ID select a.SalesMan_ID from T_Salesman a right join T_Customer b on a.SalesMan_ID=b.SalesMan_ID right join T_Orders c on b.Customer_ID=c.Customer_ID where c.Purchase_Amt 2000 and b.Grade is not null select b.Cust_Name,b.City,c.Ord_No,Ord_Date, c.Purchase_Amt from T_Salesman a right join T_Customer b on a.SalesMan_ID=b.SalesMan_ID right join T_Orders c on b.Customer_ID=c.Customer_ID select b.Cust_Name,b.City,c.Ord_No,Ord_Date, c.Purchase_Amt from T_Salesman a right join T_Customer b on a.SalesMan_ID=b.SalesMan_ID right join T_Orders c on b.Customer_ID=c.Customer_ID where b.Grade is not null select * from T_Customer a cross join T_Salesman select * from T_Salesman a cross join T_Customer b where a.City is not null select * from T_Salesman a cross join T_Customer b where a.City is not null and b.Grade is not null and a.City b.City ### Subqueries - 1.Write a query to display all the orders from the orders table issued by the salesman 'Paul Adam'. - 2.Write a query to display all the orders for the salesman who belongs to the city New York. - 3.Write a query to find all the orders issued against the salesman who works for customer whose id is 3007. - 4.Write a query to display all the orders which values are greater than the average order value for 10th October 2012. - 5.Write a query to find all orders attributed to salesman in New york. - 6.Write a query to display the commission of all the salesmen servicing customers in Paris. - 7.Write a query to display all the customers whose id is 2001 bellow the salesman ID of Mc Lyon. - 8.Write a query to counts the customers with grades above New York's average. - 9.Write a query to display all customers with orders on October 5, 2012. - 10.Write a query to display all the customers with orders issued on date 17th August, 2012. - 11.Write a query to find the name and numbers of all salesmen who had more than one customer - 12.Write a queries to find all orders with order amounts which is above-average amounts for their customers. - 13.Write a queries to find all orders with order amounts which is on or above-average amounts for their customers. - 14.Write a query to find the sums of the amounts from the orders table, grouped by date, eliminating all those dates where the sum was not at least 1000.00 above the maximum amount. - 15.Write a query to extract the data from the customer table if and only if one or more of the customers in the customer table are located in London. - 16.Write a query to display the name of salesmen who have multiple customers. - 17.Write a query to find the all salesmen name with only one customer. - 18.Write a query that are extracts the rows of all salesmen who have customers with more than one current order. - 19.Write a query to find salesman with customers located in their cities. - 20.Write a query to find all the salesmen for whom there are customers that follow them. - 21.Write a query to display the salesmen which name are alphabetically lower than the name of the customers. - 22.Write a query to display the customers who have a greater gradation than any customer who belongs to the alphabetically lower than the city New York. - 23.Write a query to display all the orders that had amounts that were greater than at least one of the orders from October 9th 2012. - 24.Write a query to find all orders with amount smaller than any amount for a customer in London. - 25.Write a query to display all orders with amount smaller than any amount for a customer in London. - 26.Write a query to display only those customers whose grade are, in fact, higher than every customer in New York. - 27.Write a query to find only those customers whose grade are, higher than every customer to the city New York. - 28.Write a query to find all grade for those customers who belongs to the city Rome. - 29.Write a query to find all those customers whose grade are not as the grade, belongs to the city Paris. - 30.Write a query to find all those customers who holds a different grade than any customer of the city Dallas. select * from T_Orders where SalesMan_ID=(select SalesMan_ID from T_Salesman where Name='Paul Adam'); select * from T_Orders where SalesMan_ID=(select SalesMan_ID from T_Salesman where City='New York') select * from T_Orders where SalesMan_ID=(select SalesMan_ID from T_Orders where Customer_ID=3007) select * from T_Orders where Purchase_Amt (select AVG(Purchase_Amt) from T_Orders where Ord_Date='2012-10-10') select * from T_Orders where SalesMan_ID=(select SalesMan_ID from T_Salesman where City='New York') select * from T_Salesman where SalesMan_ID=(select SalesMan_ID from T_Customer where City='Paris') select * from T_Customer where Customer_ID=(select SalesMan_ID-2001 from T_Salesman where Name='Mc Lyon') select COUNT(*) from T_Customer where Grade (select AVG(Grade) from T_Customer where City='New York') select * FROM T_CUSTOMER where Customer_Id IN(select Customer_Id FROM T_ORDERS where Ord_Date='10/05/2012'); select * from T_CUSTOMER where Customer_Id IN(select Customer_Id FROM T_ORDERS where Ord_Date='08/17/2012'); select Salesman_Id, Name FROM T_SALESMAN where Salesman_Id IN(select Salesman_Id FROM T_ORDERS GROUP BY Salesman_Id HAVING COUNT(DISTINCT(Customer_id)) 1); select * FROM T_ORDERS Torm where Purchase_Amt (select AVG(Purchase_Amt) FROM T_ORDERS Tori where Torm.Customer_id=Tori.Customer_id ); select * FROM T_ORDERS Torm where Purchase_Amt =(select AVG(Purchase_Amt) FROM T_ORDERS Tori where Torm.Customer_id=Tori.Customer_id ); select SUM(Purchase_Amt)AS 'Total Purchase ' ,Ord_Date FROM T_ORDERS Torm GROUP BY Ord_Date HAVING SUM(Purchase_Amt) (select MAX(Purchase_Amt)+1000 FROM T_ORDERS Tori where Tori.Ord_Date=Torm.Ord_Date); select * FROM T_CUSTOMER where EXISTS (select Customer_Id FROM T_CUSTOMER where City='London'); select Salesman_Id, Name FROM T_SALESMAN where Salesman_Id IN(select Salesman_Id FROM T_ORDERS GROUP BY Salesman_Id HAVING COUNT(DISTINCT(Customer_id)) 1); select Salesman_Id, Name FROM T_SALESMAN where Salesman_Id IN(select Salesman_Id FROM T_ORDERS GROUP BY Salesman_Id HAVING COUNT(DISTINCT(Customer_id))=1); select Salesman_Id, Name FROM T_SALESMAN where Salesman_Id IN(select Ord_No FROM T_ORDERS GROUP BY Customer_id,Salesman_Id HAVING COUNT(Ord_No) 1);--/ Pending select * FROM T_SALESMAN where CITY IN(select DISTINCT(CITY) FROM T_CUSTOMER) select * FROM T_SALESMAN where CITY IN(select DISTINCT(CITY) FROM T_CUSTOMER) ; select * FROM T_SALESMAN Ts where EXISTS(select Customer_Id FROM T_CUSTOMER where Cust_name Ts.Name); select * FROM T_CUSTOMER Tc where Grade ANY (select Grade FROM T_CUSTOMER where City 'New York' ); select * FROM T_ORDERS where Purchase_Amt ANY(select Purchase_Amt FROM T_ORDERS where Ord_Date='10/09/2012'); select * FROM T_ORDERS where Purchase_Amt ANY(select Purchase_amt FROM T_ORDERS where Customer_id IN(select Customer_id FROM T_CUSTOMER where City='lONDON')); select * FROM T_ORDERS where Purchase_Amt ANY(select Purchase_amt FROM T_ORDERS where Customer_id IN(select Customer_id FROM T_CUSTOMER where City='lONDON')); select * FROM T_CUSTOMER where Grade ALL(select Grade FROM T_CUSTOMER where City='New York' ); select * FROM T_CUSTOMER where Grade ALL(select Grade FROM T_CUSTOMER where City='New York' ); select * FROM T_CUSTOMER where City='Rome'; select * FROM T_CUSTOMER where GRADE NOT IN(select Grade FROM T_CUSTOMER where CITY='Paris'); select * FROM T_CUSTOMER where GRADE NOT IN(select Grade FROM T_CUSTOMER where CITY='Dallas'); ### Union - 1.Write a query to display all salesmen and customer located in California. - 2.Write a query to display distinct salesman and their cities. - 3.Write a query to display all the salesmen and customer. - 4.Write a query to make a report of which salesman produce the largest and smallest orders on each date. - 5.Write a query to make a report of which salesman produce the largest and smallest orders on each date and arranged the orders number in smallest to largest number. - 6.Write a query to list all the salesmen, and indicate those who do not have customers in their cities, as well as those who do. - 7.Write a query to that appends strings to the selected fields, indicating whether or not a specified salesman was matched to a customer in his city. - 8.Create a union of two queries that shows the names, cities, and ratings of all customers. Those with a rating of 200 or greater will also have the words High Rating , while the others will have the words Low Rating . - 9.Write a command that produces the name and number of each salesman and each customer with more than one current order. Put the results in alphabetical order. --1 select Cust_name,City from T_CUSTOMER where City='California' UNION select Name,City from T_SALESMAN where City='California'; --2 select Distinct Cust_Name from T_Customer UNION select Distinct Name from T_Salesman --3 select Cust_Name from T_Customer UNION select Name from T_Salesman --4 select 'Highest',Ts.Salesman_id,Ts.Name,Purchase_Amt,Ord_No,Ord_Date from T_ORDERS Tor,T_SALESMAN Ts where Tor.Salesman_id=Ts.Salesman_Id AND Purchase_Amt = (select MAX(Purchase_Amt) from T_orders Tori where Tori.Ord_Date=Tor.Ord_Date) UNION select 'Lowest',Ts.Salesman_id,Ts.Name,Purchase_Amt,Ord_No,Ord_Date from T_ORDERS Tor,T_SALESMAN Ts where Tor.Salesman_id=Ts.Salesman_Id AND Purchase_Amt = (select MIN(Purchase_Amt) from T_orders Tori where Tori.Ord_Date=Tor.Ord_Date) --5 select 'Highest',Ts.Salesman_id,Ts.Name,Purchase_Amt,Ord_No,Ord_Date from T_ORDERS Tor,T_SALESMAN Ts where Tor.Salesman_id=Ts.Salesman_Id AND Purchase_Amt = (select MAX(Purchase_Amt) from T_orders Tori where Tori.Ord_Date=Tor.Ord_Date) UNION select 'Lowest',Ts.Salesman_id,Ts.Name,Purchase_Amt,Ord_No,Ord_Date from T_ORDERS Tor,T_SALESMAN Ts where Tor.Salesman_id=Ts.Salesman_Id AND Purchase_Amt = (select MIN(Purchase_Amt) from T_orders Tori where Tori.Ord_Date=Tor.Ord_Date) order by Ord_No --6 select * from T_SALESMAN where City NOT IN (select City from T_CUSTOMER ) UNION select * from T_SALESMAN where City IN(select CITY from T_CUSTOMER ) --7 select Ts.Salesman_Id,Name,Ts.City, 'Match' from T_SALESMAN Ts,T_CUSTOMER Tc where Ts.City=Tc.City UNION select Salesman_id ,Ts.Name, Ts.City ,'No Match' from T_SALESMAN Ts where Ts.City NOT IN(select City from T_CUSTOMER) --8 select Cust_Name,City,Grade,'High Rating' from T_CUSTOMER where Grade =200 UNION select Cust_Name,City,Grade,'Low Rating' from T_CUSTOMER where Grade 200 --9 select Customer_Id,Cust_Name from T_CUSTOMER Tc where 1 (select COUNT( ) from T_ORDERS Tor where Tc.Customer_Id=Tor.Customer_id ) UNION select Salesman_id,Name from T_SALESMAN Ts where 1 (select COUNT( ) from T_ORDERS Tor where Ts.Salesman_Id=Tor.Salesman_id ) ORDER BY Cust_name ### Views - 1.Write a query to create a view for all salesmen with columns salesman_id, name and city. - 2.Write a query to create a view for all salesmen with columns salesman_id, name and city. - 3.Write a query to find the salesmen of the city New York who achieved the commission more than 13%. - 4.Write a query to create a view to get a count of how many customers we have at each level of grade. - 5.Write a query to create a view to keep track the number of customers ordering, number of salesmen attached, average amount of orders and total amount of orders in a day. - 6.Write a query to create a view that shows for each order the salesman and customer by name. - 7.Write a query to create a view that find the salesman who has the customer with the highest order on a day. - 8.Write a query to create a view that find the salesman who has the customer with the highest order at least 3 times on a day. - 9.Write a query to create a view that shows all of the customers who have the highest grade. - 10.Write a query to create a view that shows the number of salesman in each city. - 11.Write a query to create a view that shows the average and total orders for each salesman after his or her name. (Assume all names are unique) - 12.Write a query to create a view that shows each salesman with more than one customers. - 13.Write a query to create a view that shows all matches of customers with salesman such that at least one customer in the city of customer served by a salesman in the city of salesman. - 14.Write a query to create a view that shows the number of orders in each day. - 15.Write a query to create a view that find the salesmen who issued orders on October 10th, 2012. - 16.Write a query to create a view that find the salesmen who issued orders on either August 17th, 2012 or October 10th, 2012. --1 CREATE VIEW SALESMAN_INFO AS select Salesman_id,Name,City from T_SALESMAN --2 CREATE VIEW SALESMAN_INFO AS select Salesman_id,Name,City from T_SALESMAN --3 CREATE VIEW SALES_COM_NEW AS SELECT * FROM T_SALESMAN WHERE City='New York'AND Commission .13; --4 CREATE VIEW CUST_SAME_LEVEL AS (SELECT Grade,COUNT( ) AS 'COunt ' FROM T_CUSTOMER GROUP BY Grade); --5 CREATE VIEW TRACKDATA AS SELECT Ord_Date,COUNT( DISTINCT Customer_id)'Customers',AVG(Purchase_Amt)'Avg Purchase',SUM(Purchase_Amt) 'Total Purchase'FROM T_ORDERS GROUP BY ord_date; SELECT * FROM TRACKDATA; --6 CREATE VIEW ORD_SAL_CUST AS (SELECT Ord_Num,Cust_Name,Name FROM T_ORDERS Tor,T_CUSTOMER Tc,T_SALESMAN Ts WHERE Tor.salesman_id=Ts.Salesman_Id AND Tor.Customer_id=Tc.Customer_Id ); SELECT * FROM ORD_SAL_CUST; --7 CREATE VIEW HIGHEST_ORDER AS SELECT Ord_No,Ts.Salesman_Id,Ts.Name FROM T_ORDERS Tor,T_SALESMAN Ts WHERE Tor.Salesman_id=Ts.Salesman_Id AND Tor.Purchase_Amt =(SELECT MAX(purchase_amt) FROM T_ORDERS Tori WHERE Tor.ord_date=tori.ord_date); SELECT * FROM HIGHEST_ORDER; --8 CREATE VIEW hIGHEST3 AS SELECT Salesman_id,Name FROM T_SALESMAN Ts WHERE 3 =(SELECT COUNT( ) FROM T_SALESMAN TsI WHERE TsI.Salesman_Id=Ts.Salesman_Id); SELECT * FROM hIGHEST3 --9 CREATE VIEW HIGHEST_GRADE AS SELECT MAX(GRADE)AS 'GRADE' FROM T_CUSTOMER; SELECT * FROM HIGHEST_GRADE; --10 CREATE VIEW CITYWISE_SALESMAN AS SELECT CITY,COUNT(CITY)AS 'COUNT' FROM T_SALESMAN GROUP BY City SELECT * FROM CITYWISE_SALESMAN --11 CREATE VIEW AVGORD_SALESMAN AS SELECT Ts.Name,AVG(Purchase_Amt)AS 'AVG ORDER',COUNT(Purchase_Amt)AS 'TOTAL ORDER' FROM T_ORDERS Tor,T_SALESMAN Ts WHERE Tor.salesman_id=TS.Salesman_Id GROUP BY Ts.Name SELECT * FROM AVGORD_SALESMAN --12 CREATE VIEW SALESCUST1GREAT AS SELECT * FROM T_SALESMAN Ts WHERE 1 (SELECT COUNT( ) FROM T_CUSTOMER Tc WHERE Tc.salesman_id=Ts.Salesman_Id); SELECT * FROM SALESCUST1GREAT; --13 CREATE VIEW citymatch(custcity, salescity) AS SELECT DISTINCT a.City, b.City FROM T_Customer a, T_Salesman b WHERE a.SalesMan_ID = b.SalesMan_ID --14 CREATE VIEW ORDEREACHDAY AS SELECT Ord_Date,COUNT( )AS 'On DAte Order' FROM T_ORDERS GROUP BY Ord_Date; SELECT * FROM ORDEREACHDAY; --15 CREATE VIEW ORDERONDATE10TH AS SELECT * FROM T_Salesman WHERE Salesman_Id IN(SELECT Salesman_Id FROM T_ORDERS WHERE Ord_Date='10/10/2012') SELECT * FROM ORDERONDATE10TH; --16 CREATE VIEW ORDERONDATE12TH AS SELECT * FROM T_Salesman WHERE Salesman_Id IN(SELECT Salesman_Id FROM T_ORDERS WHERE Ord_Date='10/10/2012' OR Ord_Date='08/17/2012'); SELECT * FROM ORDERONDATE12TH; ```","title":"Special Characters"},{"location":"terminal_commands/","text":"Some Useful Console Commands : grep \"some string\" file \\ The grep command searches for patterns in each file. It also looks for patterns separated by newline characters, and grep prints each line that matches a pattern. pwd \\ The pwd command is a command-line utility for printing the current working directory. touch somefile \\ The touch command is used to create a file without any content. The touch command can be used when the user doesn\u2019t have data to store at the time of file creation. $ rm someFile \\ Rm stands for remove, which does exactly what it says it does. Removes, or in other words, deletes a file rm -rf some-directory \\ By default, the rm command doesn\u2019t remove directories. You need to pass the -rf flag to remove directories. rmdir some-directory The rmdir command removes the directory if there\u2019s no content inside the directory. find path -name filename \\ The find command lets you quickly lookup a file or directory. It\u2019s useful when you\u2019re working on a big project with hundreds of files and multiple directories. mv somefile /to/some/other/path \\ The mv command moves files or directories from one place to another. The mv command supports moving single files, multiple files, and directories.","title":"Terminal"},{"location":"terminal_commands/#some-useful-console-commands","text":"grep \"some string\" file \\ The grep command searches for patterns in each file. It also looks for patterns separated by newline characters, and grep prints each line that matches a pattern. pwd \\ The pwd command is a command-line utility for printing the current working directory. touch somefile \\ The touch command is used to create a file without any content. The touch command can be used when the user doesn\u2019t have data to store at the time of file creation. $ rm someFile \\ Rm stands for remove, which does exactly what it says it does. Removes, or in other words, deletes a file rm -rf some-directory \\ By default, the rm command doesn\u2019t remove directories. You need to pass the -rf flag to remove directories. rmdir some-directory The rmdir command removes the directory if there\u2019s no content inside the directory. find path -name filename \\ The find command lets you quickly lookup a file or directory. It\u2019s useful when you\u2019re working on a big project with hundreds of files and multiple directories. mv somefile /to/some/other/path \\ The mv command moves files or directories from one place to another. The mv command supports moving single files, multiple files, and directories.","title":"Some Useful Console Commands  :"},{"location":"thinkpad/","text":"ThinkPad Setup My Personal Essential Commands : Delete Useless Packages ``` sudo apt-get clean sudo apt-get autoremove ``` Launch UnetBootin after Installation using command line sudo QT_X11_NO_MITSHM=1 /usr/bin/unetbootin Install Power Management and Cooling Essentials [TLP] sudo add-apt-repository ppa:linrunner/tlp sudo apt-get update sudo apt-get install tlp tlp-rdw //thinkpad Machines : sudo apt-get install tp-smapi-dkms acpi-call-dkms Enable Battery percentage in top bar without installing Tweaks shell gsettings set org.gnome.desktop.interface show-battery-percentage true Install LXDE GUI on top of ubuntu sudo apt-get install lxde Update the Conda Environment condat update --all Install Foxit Reader ``` ```","title":"Thinkpad"},{"location":"thinkpad/#thinkpad-setup","text":"My Personal Essential Commands : Delete Useless Packages ``` sudo apt-get clean sudo apt-get autoremove ``` Launch UnetBootin after Installation using command line sudo QT_X11_NO_MITSHM=1 /usr/bin/unetbootin Install Power Management and Cooling Essentials [TLP] sudo add-apt-repository ppa:linrunner/tlp sudo apt-get update sudo apt-get install tlp tlp-rdw //thinkpad Machines : sudo apt-get install tp-smapi-dkms acpi-call-dkms Enable Battery percentage in top bar without installing Tweaks shell gsettings set org.gnome.desktop.interface show-battery-percentage true Install LXDE GUI on top of ubuntu sudo apt-get install lxde Update the Conda Environment condat update --all Install Foxit Reader ``` ```","title":"ThinkPad Setup"},{"location":"vimCheats/","text":"Vim Shortcuts and Usage Guide esc+ :w for Saving esc+ :wq! for save and force exuit esc + :set numer to get ever Line Numbered h,j,k,l key for navigation number+j for moving to that line number x to delete the text at the current place of the cursor vimtutor to enter the tutorial mode of the vi editor f followed by (alphabet to be searched on the same line) ci+ the name of the tag whose data is to be deleted BB to navigate word by word v to Enter the Visual Mode at the Bottom of the Screen and then arrow key to select the text d to CUT y to Copy p to Paste","title":"Vim"},{"location":"vimCheats/#vim-shortcuts-and-usage-guide","text":"esc+ :w for Saving esc+ :wq! for save and force exuit esc + :set numer to get ever Line Numbered h,j,k,l key for navigation number+j for moving to that line number x to delete the text at the current place of the cursor vimtutor to enter the tutorial mode of the vi editor f followed by (alphabet to be searched on the same line) ci+ the name of the tag whose data is to be deleted BB to navigate word by word v to Enter the Visual Mode at the Bottom of the Screen and then arrow key to select the text d to CUT y to Copy p to Paste","title":"Vim Shortcuts and Usage Guide"},{"location":"dsalgo/dsalgoindex/","text":"Data Structure and Algorithm --Back to Home My Profile on Various Websites * CodeChef * HackerEarth * InterviewBit * LeetCode * GeeksforGeeks Resource Book, Algorithm 4 The Sol Project Main Link :(https://github.com/harshityadav95/Notex/wiki) Week 1 Mathematics Basic Recursion Arrays: Searching, Sorting, Deleting, Shift, Rotation, Prefix Sum... Week 2 Bit Magic Matrix: Search, Delete, Insert, Rotate... Searching: Linear Search, Binary Search, Two pointer approach... Week 3 Sorting: QuickSort and its variation, Mergesort, Counting sort, Insertion Sort, Heap Sort, Comparator Hashing: Different Types of Hashing Techniques, Collision resolution Techniques, Hashing Questions Week 4 Strings: Basic Operations, Naive Pattern Search, Other searching algorithms. Linked Lists: Singly Linked List, Doubly Linked Lists, Circular Linked List, Skip List Doubly Circular Week 5 Stacks: Stack Operations, Implementation, Different Questions Queues: Queue Operations, Implementation, Different Questions, Deque Operations, Implementation, Different Questions. Week 6 Tree: Binary Tree, Tree Traversal Binary Search Tree: Search, Insert, Delete and other important questions, AVL (Basic Introduction) Week 7 Heaps: Binary Heap, Questions based on heaps. Graphs: Types of Graphs, BFS, DFS, Cycle Detection, Connected Components, Bipartite Graph. Week 8 Recursion and Backtracking: Backtracking questions, n queen, rat, knight etc. Dynamic Programming: Properties (Top Down, Bottom Up, Optimal Substructures, Overlapping Subproblems).","title":"Data Structure and Algorithm"},{"location":"dsalgo/dsalgoindex/#data-structure-and-algorithm","text":"","title":"Data Structure and Algorithm"},{"location":"dsalgo/dsalgoindex/#-back-to-home","text":"My Profile on Various Websites * CodeChef * HackerEarth * InterviewBit * LeetCode * GeeksforGeeks","title":"&lt;--Back to Home"},{"location":"dsalgo/dsalgoindex/#resource","text":"Book, Algorithm 4","title":"Resource"},{"location":"dsalgo/dsalgoindex/#the-sol-project","text":"Main Link :(https://github.com/harshityadav95/Notex/wiki)","title":"The Sol Project"},{"location":"dsalgo/dsalgoindex/#week-1","text":"Mathematics Basic Recursion Arrays: Searching, Sorting, Deleting, Shift, Rotation, Prefix Sum...","title":"Week 1"},{"location":"dsalgo/dsalgoindex/#week-2","text":"Bit Magic Matrix: Search, Delete, Insert, Rotate... Searching: Linear Search, Binary Search, Two pointer approach...","title":"Week 2"},{"location":"dsalgo/dsalgoindex/#week-3","text":"Sorting: QuickSort and its variation, Mergesort, Counting sort, Insertion Sort, Heap Sort, Comparator Hashing: Different Types of Hashing Techniques, Collision resolution Techniques, Hashing Questions","title":"Week 3"},{"location":"dsalgo/dsalgoindex/#week-4","text":"Strings: Basic Operations, Naive Pattern Search, Other searching algorithms. Linked Lists: Singly Linked List, Doubly Linked Lists, Circular Linked List, Skip List Doubly Circular","title":"Week 4"},{"location":"dsalgo/dsalgoindex/#week-5","text":"Stacks: Stack Operations, Implementation, Different Questions Queues: Queue Operations, Implementation, Different Questions, Deque Operations, Implementation, Different Questions.","title":"Week 5"},{"location":"dsalgo/dsalgoindex/#week-6","text":"Tree: Binary Tree, Tree Traversal Binary Search Tree: Search, Insert, Delete and other important questions, AVL (Basic Introduction)","title":"Week 6"},{"location":"dsalgo/dsalgoindex/#week-7","text":"Heaps: Binary Heap, Questions based on heaps. Graphs: Types of Graphs, BFS, DFS, Cycle Detection, Connected Components, Bipartite Graph.","title":"Week 7"},{"location":"dsalgo/dsalgoindex/#week-8","text":"Recursion and Backtracking: Backtracking questions, n queen, rat, knight etc. Dynamic Programming: Properties (Top Down, Bottom Up, Optimal Substructures, Overlapping Subproblems).","title":"Week 8"},{"location":"dsalgo/sol1/","text":"SOL 1 --Back to Home Week 0 : Track 1 - Introduction Analysis of Algorithm How do we find which algorithm is better ? - Test Cases - Asymptotic Analysis Best Case(Omega Notation) , Average Case(Omega Notation), Worst Case (Big-Oh Notation) Shortcomings of Asymptotic analysis : Does not consider the difference caused by constants ie n^2 n+c (where C might be large) Analysis of Loops Track 2 - Analysis of Recursion General Method : Recursion Tree Method Requires Learning : Formula,Master Theorem Track 3 - Time Complexity of a Computer Program Cost of a statement, Number of times O(1) O(logn) O(n) O(nlogn) O(n^c) O(n!) SOL 2 Track 1 - Mathematics Finding Number of Digits in a Number Arithmetic and Geometric Progression Quadratic Equation Mean and Median Prime Numbers LCM and HCF Factorials Permutation and Combination Basics Modular Arithmetic Problems to Solve - Calculating the Absolute value without using inbuilt function Method 1 Convert Celsius To Fahrenheit Source Calculating the roots of the Quadratic equation Source Factorial of Number Recursion Source Digits in Factorial of a Big Number Source Numbers with Exactly 3 Divisors Source Mean and Median Source Print Digits up to N without loop Source Sum of N Digits in a number Source Digital Roots Source Fibonacci Using Recursion Source c++ long long fibonacci(int n) { if(n =1) return n; else return fibonacci(n-1)+fibonacci(n-2); } Modulo of 10^9+7 the Answer int sumUnderModulo(long long a,long long b) { int M=1000000007; //your code here return ((a%M)+(b%M))%M; } Find the First Bit Set Source Track 3 - Recursion Tower of Hanoi Source void towerofhanoi(int n,char s,char d ,char aux) { if(n==1) { cout Move Disk 1 from rod s to rod d endl; return; } towerofhanoi(n-1,s,aux,d); cout Move Disk n from rod s to rod d endl; towerofhanoi(n-1, aux, d, s); } Josephus Problem Source ...... Medium int josephus(int n, int k) { if(n==1) return 1; return (josephus(n-1,k)+k-1)%n +1; } Power using Recursion Source Power Set in Lexicographic order Source #include bits/stdc++.h add all the libraries to a c file Track 8 - Sorting C++ STL Library #### Vectors Collection of Specific Types vector double rain(7); Each of 7 element is of size double with variable name rain Access each element of array as Index rain[index_value]","title":"SOL 1"},{"location":"dsalgo/sol1/#sol-1","text":"","title":"SOL 1"},{"location":"dsalgo/sol1/#-back-to-home","text":"","title":"&lt;--Back to Home"},{"location":"dsalgo/sol1/#week-0","text":"","title":"Week 0 :"},{"location":"dsalgo/sol1/#track-1-introduction","text":"","title":"Track 1 - Introduction"},{"location":"dsalgo/sol1/#analysis-of-algorithm","text":"How do we find which algorithm is better ? - Test Cases - Asymptotic Analysis Best Case(Omega Notation) , Average Case(Omega Notation), Worst Case (Big-Oh Notation) Shortcomings of Asymptotic analysis : Does not consider the difference caused by constants ie n^2 n+c (where C might be large) Analysis of Loops","title":"Analysis of Algorithm"},{"location":"dsalgo/sol1/#track-2-analysis-of-recursion","text":"General Method : Recursion Tree Method Requires Learning : Formula,Master Theorem","title":"Track 2 - Analysis of Recursion"},{"location":"dsalgo/sol1/#track-3-time-complexity-of-a-computer-program","text":"Cost of a statement, Number of times O(1) O(logn) O(n) O(nlogn) O(n^c) O(n!)","title":"Track 3 - Time Complexity of a Computer Program"},{"location":"dsalgo/sol1/#sol-2","text":"","title":"SOL 2"},{"location":"dsalgo/sol1/#track-1-mathematics","text":"Finding Number of Digits in a Number Arithmetic and Geometric Progression Quadratic Equation Mean and Median Prime Numbers LCM and HCF Factorials Permutation and Combination Basics Modular Arithmetic Problems to Solve - Calculating the Absolute value without using inbuilt function Method 1 Convert Celsius To Fahrenheit Source Calculating the roots of the Quadratic equation Source Factorial of Number Recursion Source Digits in Factorial of a Big Number Source Numbers with Exactly 3 Divisors Source Mean and Median Source Print Digits up to N without loop Source Sum of N Digits in a number Source Digital Roots Source Fibonacci Using Recursion Source c++ long long fibonacci(int n) { if(n =1) return n; else return fibonacci(n-1)+fibonacci(n-2); } Modulo of 10^9+7 the Answer int sumUnderModulo(long long a,long long b) { int M=1000000007; //your code here return ((a%M)+(b%M))%M; } Find the First Bit Set Source","title":"Track 1 - Mathematics"},{"location":"dsalgo/sol1/#track-3-recursion","text":"Tower of Hanoi Source void towerofhanoi(int n,char s,char d ,char aux) { if(n==1) { cout Move Disk 1 from rod s to rod d endl; return; } towerofhanoi(n-1,s,aux,d); cout Move Disk n from rod s to rod d endl; towerofhanoi(n-1, aux, d, s); } Josephus Problem Source ...... Medium int josephus(int n, int k) { if(n==1) return 1; return (josephus(n-1,k)+k-1)%n +1; } Power using Recursion Source Power Set in Lexicographic order Source #include bits/stdc++.h add all the libraries to a c file","title":"Track 3 - Recursion"},{"location":"dsalgo/sol1/#track-8-sorting","text":"","title":"Track 8 - Sorting"},{"location":"dsalgo/sol1/#c-stl-library","text":"#### Vectors Collection of Specific Types vector double rain(7); Each of 7 element is of size double with variable name rain Access each element of array as Index rain[index_value]","title":"C++ STL Library"},{"location":"dsalgo/sorting/","text":"Sorting Algos --Back to Home Stable Algorithm Bubble Sort for(int i=0;i n-1;i++) { for(int j=0;j n-1-i;j++) { if(a[j] a[j+1]) { int temp=a[j]; a[j]=a[j+1]; a[j+1]=temp; } } } Selection Sort [ Link ]","title":"Sorting Algos"},{"location":"dsalgo/sorting/#sorting-algos","text":"","title":"Sorting Algos"},{"location":"dsalgo/sorting/#-back-to-home","text":"Stable Algorithm","title":"&lt;--Back to Home"},{"location":"dsalgo/sorting/#bubble-sort","text":"for(int i=0;i n-1;i++) { for(int j=0;j n-1-i;j++) { if(a[j] a[j+1]) { int temp=a[j]; a[j]=a[j+1]; a[j+1]=temp; } } }","title":"Bubble Sort"},{"location":"dsalgo/sorting/#selection-sort-link","text":"","title":"Selection Sort [Link]"}]}